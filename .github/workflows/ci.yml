name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety
        pip install flake8-docstrings flake8-import-order types-requests

    - name: Check code formatting with Black
      run: black --check --diff --line-length=88 .

    - name: Check import sorting with isort
      run: isort --check-only --diff --profile=black --line-length=88 .

    - name: Lint with flake8
      run: |
        # Critical syntax errors
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Style and complexity
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type checking with mypy
      run: mypy rezen/ --strict --ignore-missing-imports

    - name: Security scanning with bandit
      run: bandit -r rezen/ --skip B404,B603,B607 -f json -o bandit-report.json || true

    - name: Check for security vulnerabilities in dependencies
      run: safety check --json || true

    - name: Validate YAML files
      run: |
        python -c "
        import yaml
        import sys
        from pathlib import Path
        
        yaml_files = list(Path('.').rglob('*.yml')) + list(Path('.').rglob('*.yaml'))
        for file in yaml_files:
            try:
                yaml.safe_load(file.read_text())
                print(f'✅ {file}')
            except Exception as e:
                print(f'❌ {file}: {e}')
                sys.exit(1)
        "

    - name: Validate TOML files
      run: |
        python -c "
        import tomllib
        import sys
        from pathlib import Path
        
        toml_files = list(Path('.').rglob('*.toml'))
        for file in toml_files:
            try:
                tomllib.loads(file.read_text())
                print(f'✅ {file}')
            except Exception as e:
                print(f'❌ {file}: {e}')
                sys.exit(1)
        " 2>/dev/null || python -c "
        import toml
        import sys
        from pathlib import Path
        
        toml_files = list(Path('.').rglob('*.toml'))
        for file in toml_files:
            try:
                toml.loads(file.read_text())
                print(f'✅ {file}')
            except Exception as e:
                print(f'❌ {file}: {e}')
                sys.exit(1)
        "

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e ".[dev]"

    - name: Test with pytest
      env:
        REZEN_API_KEY: ${{ secrets.REZEN_API_KEY }}
      run: |
        pytest --cov=rezen --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == env.PYTHON_VERSION
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30
