{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ReZEN Python Client","text":"<p>The official Python client for the ReZEN Real Estate API. Build powerful real estate applications with comprehensive transaction management, agent networking, and team operations.</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Get up and running in 60 seconds:</p> <pre><code>pip install rezen\n</code></pre> <pre><code>from typing import Dict, List, Any\n\nfrom rezen import RezenClient\n\n# Initialize main client\nclient: RezenClient = RezenClient()\n\n# Search for active teams\nteams: List[Dict[str, Any]] = client.teams.search_teams(status=\"ACTIVE\")\n\n# Search for agents in California\nagents: List[Dict[str, Any]] = client.agents.search_active_agents(state_or_province=[\"CALIFORNIA\"])\n\n# Create a transaction\nresponse: Dict[str, Any] = client.transaction_builder.create_transaction_builder()\ntransaction_id: str = response['id']\n\n# Add property details\nclient.transaction_builder.update_location_info(transaction_id, {\n    \"address\": \"123 Main Street\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"zipCode\": \"90210\"\n})\n\n# Use Directory API for vendor management through main client\nvendors: List[Dict[str, Any]] = client.directory.search_vendors(\n    page_number=0,\n    page_size=20,\n    roles=[\"TITLE_ESCROW\", \"LENDER\"]\n)\n</code></pre> <p>\u2192 Get Started \u2192 API Reference</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li> <p>\ud83c\udfe0 Transaction Management</p> <p>Complete transaction lifecycle management from creation to closing, with support for all participant types and financial operations.</p> <p>:octicons-arrow-right-24: Learn more</p> </li> <li> <p>\ud83d\udc65 Agent &amp; Team Operations</p> <p>Comprehensive agent search, network hierarchy management, and team operations with advanced filtering capabilities.</p> <p>:octicons-arrow-right-24: Learn more</p> </li> <li> <p>\u2699\ufe0f Type-Safe &amp; Robust</p> <p>Complete type hints, comprehensive error handling, and 100% test coverage for production-ready applications.</p> <p>:octicons-arrow-right-24: Learn more</p> </li> <li> <p>\ud83d\udcd6 Well Documented</p> <p>Extensive documentation with real-world examples, troubleshooting guides, and comprehensive API reference.</p> <p>:octicons-arrow-right-24: Learn more</p> </li> </ul>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":""},{"location":"#real-estate-transaction-processing","title":"Real Estate Transaction Processing","text":"<p>Build applications that handle the complete real estate transaction lifecycle:</p> <ul> <li>Property listings and transaction creation</li> <li>Participant management (buyers, sellers, agents, service providers)</li> <li>Financial operations (commissions, payments, escrow)</li> <li>Document management and reporting</li> </ul>"},{"location":"#agent-network-management","title":"Agent Network Management","text":"<p>Manage complex agent networks and hierarchies:</p> <ul> <li>Agent discovery and search capabilities</li> <li>Network analysis with sponsor trees and downlines</li> <li>Team management and assignments</li> <li>Performance tracking and analytics</li> </ul>"},{"location":"#integration-automation","title":"Integration &amp; Automation","text":"<p>Integrate ReZEN with your existing systems:</p> <ul> <li>CRM integrations for customer management</li> <li>Accounting systems for financial tracking</li> <li>Document management for transaction records</li> <li>Workflow automation for process optimization</li> </ul>"},{"location":"#api-coverage","title":"\ud83d\udcca API Coverage","text":"API Section Endpoints Status Transaction Builder 52 endpoints \u2705 Complete Transactions 49 endpoints \u2705 Complete Agents 36 endpoints \u2705 Complete Teams 2 endpoints \u2705 Complete Users 3 endpoints \u2705 Complete Directory 16 endpoints \u2705 Complete Total 158 endpoints \u2705 Complete"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>The ReZEN Python client is built with modern Python best practices:</p> <pre><code>graph TB\n    A[RezenClient] --&gt; B[TransactionBuilderClient]\n    A --&gt; C[TransactionsClient]\n    A --&gt; D[TeamsClient]\n    A --&gt; E[AgentsClient]\n    A --&gt; F[UsersClient]\n    A --&gt; G[DirectoryClient]\n\n    B --&gt; H[BaseClient]\n    C --&gt; H\n    D --&gt; H\n    E --&gt; H\n    F --&gt; H\n    G --&gt; H\n\n    H --&gt; I[HTTP Session]\n    H --&gt; J[Error Handling]\n    H --&gt; K[Authentication]\n\n    style A fill:#e1f5fe\n    style H fill:#f3e5f5\n    style I fill:#e8f5e8\n    style J fill:#fff3e0\n    style K fill:#fce4ec\n</code></pre>"},{"location":"#key-design-principles","title":"Key Design Principles","text":"<ul> <li>\ud83c\udfaf Simple Interface: Intuitive method names and clear parameter structures</li> <li>\ud83d\udd12 Type Safety: Complete type hints for excellent IDE support</li> <li>\u26a1 Performance: Efficient HTTP session management and connection pooling</li> <li>\ud83d\udee1\ufe0f Reliability: Comprehensive error handling and retry mechanisms</li> <li>\ud83d\udcda Extensible: Clean architecture for easy customization and extension</li> </ul>"},{"location":"#examples","title":"\ud83d\udca1 Examples","text":""},{"location":"#create-a-complete-transaction","title":"Create a Complete Transaction","text":"<pre><code>from datetime import datetime, timedelta\nfrom typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Create transaction builder\nresponse: Dict[str, Any] = client.transaction_builder.create_transaction_builder()\ntransaction_id: str = response['id']\n\n# Add property details\nclient.transaction_builder.update_location_info(transaction_id, {\n    \"address\": \"1234 Elm Street\",\n    \"city\": \"San Francisco\",\n    \"state\": \"CA\",\n    \"zipCode\": \"94102\"\n})\n\n# Set pricing and timeline\nclosing_date: str = (datetime.now() + timedelta(days=45)).strftime(\"%Y-%m-%d\")\nclient.transaction_builder.update_price_and_date_info(transaction_id, {\n    \"purchase_price\": 850000,\n    \"closing_date\": closing_date\n})\n\n# Add participants\nclient.transaction_builder.add_buyer(transaction_id, {\n    \"first_name\": \"Alice\",\n    \"last_name\": \"Johnson\",\n    \"email\": \"alice@email.com\"\n})\n\n# Submit for processing\nclient.transaction_builder.submit_transaction(transaction_id)\n</code></pre>"},{"location":"#agent-network-analysis","title":"Agent Network Analysis","text":"<pre><code>from typing import Dict, List, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Find agents in California\nagents: List[Dict[str, Any]] = client.agents.search_active_agents(\n    state_or_province=[\"CALIFORNIA\"],\n    page_size=50\n)\n\n# Analyze agent's network\nfor agent in agents[:5]:\n    agent_id: str = agent['id']\n\n    # Get network statistics\n    network_stats: List[Dict[str, Any]] = client.agents.get_network_size_by_tier(agent_id)\n    front_line: List[Dict[str, Any]] = client.agents.get_front_line_agents_info(agent_id)\n\n    print(f\"Agent {agent['first_name']} {agent['last_name']}:\")\n    print(f\"  Network tiers: {len(network_stats)}\")\n    print(f\"  Front line agents: {len(front_line)}\")\n</code></pre>"},{"location":"#directory-management","title":"Directory Management","text":"<pre><code>from typing import Dict, List, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Search for vendors\nvendors: List[Dict[str, Any]] = client.directory.search_vendors(\n    page_number=0,\n    page_size=20,\n    is_archived=False,\n    state_or_province=\"CALIFORNIA\"\n)\n\n# Create a new person\nperson_data: Dict[str, Any] = {\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Smith\",\n    \"emailAddress\": \"jane@example.com\",\n    \"phoneNumber\": \"555-0123\"\n}\nperson: Dict[str, Any] = client.directory.create_person(person_data)\n\n# Link person to vendor\nclient.directory.link_person(person['id'], {\n    \"vendorId\": \"vendor-123\"\n})\n</code></pre> <p>\u2192 More Examples</p>"},{"location":"#getting-started","title":"\ud83d\udea6 Getting Started","text":""},{"location":"#1-installation","title":"1. Installation","text":"<p>Choose your installation method:</p> pippoetryconda <pre><code>pip install rezen\n</code></pre> <pre><code>poetry add rezen\n</code></pre> <pre><code>conda install -c conda-forge rezen\n</code></pre>"},{"location":"#2-authentication","title":"2. Authentication","text":"<p>Set up your API credentials:</p> Environment Variable.env FileDirect <pre><code>export REZEN_API_KEY=\"your_api_key_here\"\n</code></pre> <pre><code># .env\nREZEN_API_KEY=your_api_key_here\n</code></pre> <pre><code>client = RezenClient(api_key=\"your_api_key_here\")\n</code></pre>"},{"location":"#3-first-api-call","title":"3. First API Call","text":"<pre><code>from typing import List, Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\nteams: List[Dict[str, Any]] = client.teams.search_teams(status=\"ACTIVE\", page_size=10)\nprint(f\"Found {len(teams)} active teams\")\n</code></pre> <p>\u2192 Complete Installation Guide</p>"},{"location":"#documentation","title":"\ud83d\udcd6 Documentation","text":"<ul> <li> <p>\ud83d\ude80 Quick Start</p> <p>5-minute guide to get up and running</p> </li> <li> <p>\ud83d\udcda API Reference</p> <p>Complete API documentation with examples</p> </li> <li> <p>\ud83d\udca1 Examples</p> <p>Real-world usage patterns and best practices</p> </li> <li> <p>\ud83d\udd27 Troubleshooting</p> <p>Common issues and debugging techniques</p> </li> <li> <p>\ud83e\udd1d Contributing</p> <p>Help improve the ReZEN Python client</p> </li> <li> <p>\ud83d\udccb Changelog</p> <p>Version history and release notes</p> </li> </ul>"},{"location":"#support","title":"\ud83c\udd98 Support","text":""},{"location":"#community-help","title":"Community &amp; Help","text":"<ul> <li>\ud83d\udcd6 Documentation: Comprehensive guides and API reference</li> <li>\ud83d\udcac GitHub Issues: Bug reports and feature requests</li> <li>\ud83d\udce7 Email Support: support@rezen.com</li> <li>\ud83c\udf10 Website: rezen.com</li> </ul>"},{"location":"#status-monitoring","title":"Status &amp; Monitoring","text":"<ul> <li>\ud83d\udd0d API Status: status.rezen.com</li> <li>\ud83d\udcca PyPI Package: pypi.org/project/rezen</li> <li>\ud83d\udc19 GitHub Repo: github.com/theperrygroup/rezen</li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>The ReZEN Python client is released under the MIT License.</p> <p>Ready to build powerful real estate applications? Get Started \u2192</p>"},{"location":"STYLE_GUIDE/","title":"Documentation Style Guide","text":""},{"location":"STYLE_GUIDE/#overview","title":"Overview","text":"<p>This guide outlines documentation standards for maintainability, consistency, and clarity. It aims to create documentation that serves as both an effective learning resource and technical reference.</p>"},{"location":"STYLE_GUIDE/#core-principles","title":"Core Principles","text":""},{"location":"STYLE_GUIDE/#1-clarity-first","title":"1. Clarity First","text":"<p>Write for your target audience. Assume technical competence but not domain expertise.</p>"},{"location":"STYLE_GUIDE/#2-show-dont-just-tell","title":"2. Show, Don't Just Tell","text":"<p>Every concept should include a practical example.</p>"},{"location":"STYLE_GUIDE/#3-progressive-disclosure","title":"3. Progressive Disclosure","text":"<p>Start simple, add complexity gradually.</p>"},{"location":"STYLE_GUIDE/#4-consistency","title":"4. Consistency","text":"<p>Use consistent terminology, formatting, and structure throughout.</p>"},{"location":"STYLE_GUIDE/#documentation-structure","title":"Documentation Structure","text":""},{"location":"STYLE_GUIDE/#file-organization","title":"File Organization","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                 # Home page\n\u251c\u2500\u2500 getting-started/         # Onboarding content\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 installation.md\n\u2502   \u251c\u2500\u2500 authentication.md\n\u2502   \u2514\u2500\u2500 quickstart.md\n\u251c\u2500\u2500 guides/                  # How-to guides\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 examples.md\n\u2502   \u251c\u2500\u2500 transactions.md\n\u2502   \u2514\u2500\u2500 troubleshooting.md\n\u251c\u2500\u2500 api/                     # API reference\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 transaction-builder.md\n\u2502   \u251c\u2500\u2500 transactions.md\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 reference/               # Technical reference\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 data-types.md\n\u2502   \u251c\u2500\u2500 exceptions.md\n\u2502   \u2514\u2500\u2500 changelog.md\n\u2514\u2500\u2500 development/             # Contributor docs\n    \u251c\u2500\u2500 index.md\n    \u251c\u2500\u2500 contributing.md\n    \u2514\u2500\u2500 deployment.md\n</code></pre>"},{"location":"STYLE_GUIDE/#page-structure","title":"Page Structure","text":"<p>Each documentation page should follow this structure:</p> <pre><code># Page Title\n\nBrief introduction paragraph explaining what this page covers and why it matters.\n\n---\n\n## Overview (if needed)\n\nHigh-level explanation of the topic with key concepts.\n\n## Main Content Sections\n\n### Subsection Title\n\nContent with examples...\n\n## Related Topics\n\n- Link to related page\n- Another related topic\n\n## Next Steps\n\nGuide the reader to logical next topics.\n</code></pre>"},{"location":"STYLE_GUIDE/#formatting-standards","title":"Formatting Standards","text":""},{"location":"STYLE_GUIDE/#headers","title":"Headers","text":"<ul> <li>H1 (#): Page title only (one per page)</li> <li>H2 (##): Major sections</li> <li>H3 (###): Subsections</li> <li>H4 (####): Rarely used, only for deep nesting</li> </ul>"},{"location":"STYLE_GUIDE/#code-examples","title":"Code Examples","text":""},{"location":"STYLE_GUIDE/#do","title":"Do \u2705","text":"<pre><code># Create a client with error handling\nfrom rezen import RezenClient\nfrom rezen.exceptions import AuthenticationError\n\ntry:\n    client = RezenClient(api_key=\"your_api_key\")\n    teams = client.teams.search_teams(status=\"ACTIVE\")\nexcept AuthenticationError:\n    print(\"Invalid API key\")\n</code></pre>"},{"location":"STYLE_GUIDE/#dont","title":"Don't \u274c","text":"<pre><code># No context or error handling\nclient = RezenClient()\nteams = client.teams.search_teams()\n</code></pre>"},{"location":"STYLE_GUIDE/#inline-code","title":"Inline Code","text":"<p>Use backticks for: - Method names: <code>search_teams()</code> - Parameter names: <code>status</code> - File names: <code>config.py</code> - Commands: <code>pip install rezen</code></p>"},{"location":"STYLE_GUIDE/#emphasis","title":"Emphasis","text":"<ul> <li>Bold for important terms on first use</li> <li>Italic for emphasis within sentences</li> <li>Highlight for critical warnings (sparingly)</li> </ul>"},{"location":"STYLE_GUIDE/#content-guidelines","title":"Content Guidelines","text":""},{"location":"STYLE_GUIDE/#api-documentation","title":"API Documentation","text":"<p>Each API method should include:</p> <ol> <li>Brief description of what it does</li> <li>Parameters table with types and descriptions</li> <li>Returns section describing the response</li> <li>Example showing typical usage</li> <li>Errors section listing possible exceptions</li> </ol>"},{"location":"STYLE_GUIDE/#do_1","title":"Do \u2705","text":"<pre><code>## search_teams\n\nSearch for teams with filtering and pagination.\n\n### Parameters\n\n| Parameter | Type | Required | Description |\n|-----------|------|----------|-------------|\n| `status` | `str` | No | Filter by team status |\n| `name` | `str` | No | Search by team name |\n\n### Returns\n\n`List[Team]`: List of matching teams.\n\n### Example\n\n```python\nteams = client.teams.search_teams(\n    status=\"ACTIVE\",\n    name=\"Realty\"\n)\n</code></pre>"},{"location":"STYLE_GUIDE/#errors","title":"Errors","text":"<ul> <li><code>ValidationError</code>: Invalid parameters</li> <li><code>NetworkError</code>: Connection failed <pre><code>#### Don't \u274c\n```markdown\n## search_teams\n\nThis method searches teams.\n\nExample: `client.teams.search_teams()`\n</code></pre></li> </ul>"},{"location":"STYLE_GUIDE/#index-pages","title":"Index Pages","text":"<p>Index pages should use card grids for navigation:</p>"},{"location":"STYLE_GUIDE/#do_2","title":"Do \u2705","text":"<pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n-   \ud83d\udcdd **Section Title**\n\n    ---\n\n    Brief description of what this section covers\n\n    [:octicons-arrow-right-24: Go to section](link.md)\n\n-   \ud83d\udd27 **Another Section**\n\n    ---\n\n    Description of this section's content\n\n    [:octicons-arrow-right-24: Go to section](link.md)\n\n&lt;/div&gt;\n</code></pre>"},{"location":"STYLE_GUIDE/#dont_1","title":"Don't \u274c","text":"<pre><code>## Sections\n\n- [Section Title](link.md)\n- [Another Section](link.md)\n</code></pre>"},{"location":"STYLE_GUIDE/#icons-and-emojis","title":"Icons and Emojis","text":"<ul> <li>Use Unicode emojis directly (\ud83c\udfe0, \ud83d\udd0c, etc.)</li> <li>Keep icon usage consistent across similar content</li> <li>Don't overuse - one per section heading is usually enough</li> </ul>"},{"location":"STYLE_GUIDE/#examples","title":"Examples","text":""},{"location":"STYLE_GUIDE/#progressive-complexity","title":"Progressive Complexity","text":"<p>Start with the simplest case:</p>"},{"location":"STYLE_GUIDE/#do_3","title":"Do \u2705","text":"<pre><code>### Basic Usage\n\n```python\n# Simple team search\nteams = client.teams.search_teams()\n</code></pre>"},{"location":"STYLE_GUIDE/#filtered-search","title":"Filtered Search","text":"<pre><code># Search with filters\nteams = client.teams.search_teams(\n    status=\"ACTIVE\",\n    page_size=50\n)\n</code></pre>"},{"location":"STYLE_GUIDE/#advanced-usage","title":"Advanced Usage","text":"<pre><code># Complex search with full error handling\nfrom rezen.enums import TeamStatus, SortDirection\n\ntry:\n    teams = client.teams.search_teams(\n        status=TeamStatus.ACTIVE,\n        sort_by=\"created_at\",\n        sort_direction=SortDirection.DESC,\n        page_size=100\n    )\nexcept ValidationError as e:\n    logger.error(f\"Invalid search params: {e}\")\n</code></pre>"},{"location":"STYLE_GUIDE/#dont_2","title":"Don't \u274c","text":"<pre><code>### Example\n\n```python\n# Here's everything at once\nfrom rezen import RezenClient\nfrom rezen.enums import TeamStatus, SortDirection\nfrom rezen.exceptions import ValidationError\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ntry:\n    client = RezenClient(api_key=os.getenv(\"REZEN_API_KEY\"))\n    teams = client.teams.search_teams(\n        status=TeamStatus.ACTIVE,\n        name=\"Realty\",\n        sort_by=\"created_at\",\n        sort_direction=SortDirection.DESC,\n        page=1,\n        page_size=100\n    )\n    for team in teams:\n        print(f\"{team.name}: {team.status}\")\nexcept ValidationError as e:\n    logger.error(f\"Validation error: {e}\")\nexcept Exception as e:\n    logger.error(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"STYLE_GUIDE/#tabbed-content","title":"Tabbed Content","text":"<p>Use tabs for alternative approaches:</p>"},{"location":"STYLE_GUIDE/#do_4","title":"Do \u2705","text":"<pre><code>=== \"\ud83d\ude80 Basic Operation\"\n\n    ```python\n    result = client.simple_operation()\n    ```\n\n=== \"\u2699\ufe0f Advanced Configuration\"\n\n    ```python\n    result = client.complex_operation(\n        option1=True,\n        option2=\"value\"\n    )\n    ```\n</code></pre>"},{"location":"STYLE_GUIDE/#dont_3","title":"Don't \u274c","text":"<pre><code>### Method 1\n...\n\n### Method 2\n...\n\n### Method 3\n...\n</code></pre>"},{"location":"STYLE_GUIDE/#writing-style","title":"Writing Style","text":""},{"location":"STYLE_GUIDE/#voice-and-tone","title":"Voice and Tone","text":"<ul> <li>Active voice: \"The client sends requests\" not \"Requests are sent\"</li> <li>Direct: \"Use <code>search_teams()</code> to find teams\" not \"One might use...\"</li> <li>Professional but approachable: Technical accuracy with clarity</li> </ul>"},{"location":"STYLE_GUIDE/#common-patterns","title":"Common Patterns","text":""},{"location":"STYLE_GUIDE/#introducing-features","title":"Introducing Features","text":"<p>Do \u2705</p> <p>The transaction builder provides a fluent interface for creating complex transactions. Start with a property, add participants, then build.</p> <p>Don't \u274c</p> <p>ReZEN's revolutionary transaction builder leverages cutting-edge technology to facilitate the creation of transaction objects.</p>"},{"location":"STYLE_GUIDE/#explaining-errors","title":"Explaining Errors","text":"<p>Do \u2705</p> <p>When authentication fails, the client raises <code>AuthenticationError</code>. This typically means your API key is invalid or expired.</p> <p>Don't \u274c</p> <p>Errors can occur. AuthenticationError happens sometimes.</p>"},{"location":"STYLE_GUIDE/#admonitions","title":"Admonitions","text":"<p>Use admonitions to highlight important information:</p>"},{"location":"STYLE_GUIDE/#types-and-usage","title":"Types and Usage","text":"<pre><code>!!! note \"Optional title\"\n    General information that adds context.\n\n!!! tip\n    Helpful suggestions for better results.\n\n!!! warning\n    Important cautions to prevent issues.\n\n!!! danger\n    Critical warnings about destructive operations.\n\n!!! success\n    Positive confirmations or success states.\n\n!!! example\n    Extended examples (use sparingly, prefer code blocks).\n\n!!! info\n    Additional context or background information.\n</code></pre>"},{"location":"STYLE_GUIDE/#when-to-use","title":"When to Use","text":"<ul> <li>Note: Additional context that's helpful but not critical</li> <li>Tip: Best practices or optimization suggestions</li> <li>Warning: Common mistakes or important limitations</li> <li>Danger: Data loss, security issues, or breaking changes</li> <li>Success: Confirmation of correct setup or configuration</li> <li>Info: Background information or explanations</li> </ul>"},{"location":"STYLE_GUIDE/#navigation","title":"Navigation","text":""},{"location":"STYLE_GUIDE/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Keep ToC depth to 3 levels maximum</li> <li>Use descriptive headings that work standalone</li> <li>Maintain logical flow from general to specific</li> </ul>"},{"location":"STYLE_GUIDE/#cross-references","title":"Cross-References","text":""},{"location":"STYLE_GUIDE/#internal-links","title":"Internal Links","text":"<p>Do \u2705 <pre><code>See the [Authentication Guide](../getting-started/authentication.md) for setup instructions.\n</code></pre></p> <p>Don't \u274c <pre><code>See [here](../getting-started/authentication.md) for more info.\n</code></pre></p>"},{"location":"STYLE_GUIDE/#section-links","title":"Section Links","text":"<p>Do \u2705 <pre><code>Learn more about [error handling](#error-handling) below.\n</code></pre></p> <p>Don't \u274c <pre><code>See the section below.\n</code></pre></p>"},{"location":"STYLE_GUIDE/#code-documentation","title":"Code Documentation","text":""},{"location":"STYLE_GUIDE/#docstrings","title":"Docstrings","text":"<p>Follow Google style:</p> <pre><code>def search_teams(\n    self,\n    status: Optional[str] = None,\n    name: Optional[str] = None\n) -&gt; List[Team]:\n    \"\"\"Search for teams with optional filtering.\n\n    Args:\n        status: Filter by team status (e.g., \"ACTIVE\", \"INACTIVE\")\n        name: Search by team name (partial match)\n\n    Returns:\n        List of Team objects matching the criteria\n\n    Raises:\n        ValidationError: If parameters are invalid\n        NetworkError: If the API request fails\n\n    Example:\n        &gt;&gt;&gt; teams = client.teams.search_teams(status=\"ACTIVE\")\n        &gt;&gt;&gt; print(f\"Found {len(teams)} active teams\")\n    \"\"\"\n</code></pre>"},{"location":"STYLE_GUIDE/#type-hints","title":"Type Hints","text":"<p>Always include:</p> <pre><code>from typing import List, Optional, Dict, Any\n\ndef process_data(\n    items: List[Dict[str, Any]],\n    filter_key: Optional[str] = None\n) -&gt; List[Dict[str, Any]]:\n    \"\"\"Process with full type hints.\"\"\"\n    pass\n</code></pre>"},{"location":"STYLE_GUIDE/#version-documentation","title":"Version Documentation","text":""},{"location":"STYLE_GUIDE/#changelog-format","title":"Changelog Format","text":"<pre><code>## [1.2.0] - 2024-01-15\n\n### Added\n- New `search_teams()` method with advanced filtering\n- Support for pagination in all search methods\n\n### Changed\n- Improved error messages for validation failures\n- Updated `Team` model with new fields\n\n### Fixed\n- Fixed timeout issues in long-running requests\n- Corrected type hints for optional parameters\n\n### Deprecated\n- `get_team_by_name()` - use `search_teams(name=...)` instead\n\n### Removed\n- Removed support for Python 3.7\n\n### Security\n- Updated dependencies to patch CVE-2024-1234\n</code></pre>"},{"location":"STYLE_GUIDE/#diagrams-and-visuals","title":"Diagrams and Visuals","text":""},{"location":"STYLE_GUIDE/#when-to-include","title":"When to Include","text":"<ul> <li>Architecture diagrams: For system overview</li> <li>Flow charts: For complex processes</li> <li>Sequence diagrams: For API interactions</li> <li>Screenshots: Only for UI elements</li> </ul>"},{"location":"STYLE_GUIDE/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<pre><code>graph LR\n    A[Client] --&gt;|Request| B[API]\n    B --&gt;|Response| A\n    B --&gt;|Validate| C[Auth]\n    C --&gt;|Token| B\n</code></pre>"},{"location":"STYLE_GUIDE/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"STYLE_GUIDE/#avoid-these-issues","title":"Avoid These Issues","text":"<ol> <li>Inconsistent terminology: Pick one term and stick with it</li> <li>Orphaned pages: Every page should be linked from somewhere</li> <li>Outdated examples: Test all code examples regularly</li> <li>Missing context: Don't assume prior knowledge</li> <li>Walls of text: Break up content with headers and examples</li> </ol>"},{"location":"STYLE_GUIDE/#review-checklist","title":"Review Checklist","text":"<p>Before publishing documentation:</p> <ul> <li> All code examples are tested and working</li> <li> Links are valid and point to correct locations</li> <li> Formatting is consistent with this guide</li> <li> Page has clear purpose and audience</li> <li> Navigation makes sense in context</li> <li> No typos or grammar errors</li> <li> Type hints included in all code examples</li> <li> Proper error handling shown where relevant</li> </ul>"},{"location":"STYLE_GUIDE/#quick-reference","title":"Quick Reference","text":""},{"location":"STYLE_GUIDE/#essential-elements","title":"Essential Elements","text":"<p>Every page needs: - Clear title and introduction - Practical examples - Links to related content - Consistent formatting</p>"},{"location":"STYLE_GUIDE/#markdown-extensions","title":"Markdown Extensions","text":"<p>We use these MkDocs extensions: - <code>admonition</code> for callout boxes - <code>pymdownx.tabbed</code> for tabbed content - <code>pymdownx.superfences</code> for code blocks - <code>pymdownx.emoji</code> for emoji support - <code>tables</code> for data tables - <code>toc</code> for table of contents</p>"},{"location":"STYLE_GUIDE/#front-matter","title":"Front Matter","text":"<p>Optional but useful:</p> <pre><code>---\ntitle: Page Title\ndescription: Brief description for SEO\n---\n</code></pre>"},{"location":"STYLE_GUIDE/#resources","title":"Resources","text":"<ul> <li>MkDocs Documentation</li> <li>Material for MkDocs</li> <li>Google Developer Documentation Style Guide</li> </ul> <p>Remember: Good documentation is a feature. It reduces support burden, improves developer experience, and builds trust in your API.</p>"},{"location":"api/","title":"API Reference","text":"<p>Complete method reference for the ReZEN Python API client. This section covers all available API endpoints, parameters, and return types.</p>"},{"location":"api/#api-overview","title":"\ud83d\ude80 API Overview","text":"<p>\u2705 All APIs Operational</p> <p>All ReZEN API endpoints are fully operational with real-time data access.</p> <ul> <li> <p>\ud83d\udd27 Transaction Builder</p> <p>Create and manage transaction builders with participants and properties</p> <p>:octicons-arrow-right-24: Transaction Builder API</p> </li> <li> <p>\ud83e\udd1d Transactions</p> <p>Work with live transactions, manage participants, and handle payments</p> <p>:octicons-arrow-right-24: Transactions API</p> </li> <li> <p>\ud83d\udc65 Teams</p> <p>Search and manage team information with comprehensive filtering</p> <p>:octicons-arrow-right-24: Teams API</p> </li> <li> <p>\ud83d\udc54 Agents</p> <p>Agent search, network management, and detailed information retrieval</p> <p>:octicons-arrow-right-24: Agents API</p> </li> <li> <p>\ud83d\udc64 Users</p> <p>Access user profiles, team membership, and office details</p> <p>:octicons-arrow-right-24: Users API</p> </li> <li> <p>\ud83d\udcd6 Directory</p> <p>Access directory services for agent and contact information</p> <p>:octicons-arrow-right-24: Directory API</p> </li> <li> <p>\u2611\ufe0f Checklist</p> <p>Manage transaction checklists and document uploads</p> <p>:octicons-arrow-right-24: Checklist API</p> </li> <li> <p>\ud83d\udcc4 Documents</p> <p>Handle documents, digital signatures, and workflows</p> <p>:octicons-arrow-right-24: Documents API</p> </li> </ul>"},{"location":"api/#api-status-overview","title":"\ud83d\udcca API Status Overview","text":"API Section Status Endpoints Coverage Transaction Builder \u2705 Available 52+ endpoints Complete Transactions \u2705 Available 49+ endpoints Complete Agents \u2705 Available 36+ endpoints Complete Teams \u2705 Available 4 endpoints Complete Users \u2705 Available 3 endpoints Complete Directory \u2705 Available 16 endpoints Complete Checklist \u2705 Available 9 endpoints Complete Documents \u2705 Available 13 endpoints Complete"},{"location":"api/#quick-reference","title":"\ud83d\udccb Quick Reference","text":""},{"location":"api/#core-components","title":"Core Components","text":"<p>Main Client</p> <p>The <code>RezenClient</code> serves as the main entry point, providing access to all API modules through a unified interface.</p> <p>Specialized Clients</p> <ul> <li>Transaction Builder: Create and configure new transactions</li> <li>Transactions: Manage live transactions and participants</li> <li>Teams: Search and filter team information</li> <li>Agents: Comprehensive agent search and network management</li> <li>Users: Access user profiles and team/office membership</li> <li>Directory: Standalone directory services</li> <li>Checklist: Transaction checklists and item management</li> <li>Documents: Document uploads and digital signatures</li> </ul>"},{"location":"api/#common-patterns","title":"Common Patterns","text":"Basic UsageError HandlingAdvanced Filtering <pre><code>from rezen import RezenClient\n\n# Initialize client\nclient = RezenClient()\n\n# Access specialized APIs\nteams = client.teams.search_teams(status=\"ACTIVE\")\nagents = client.agents.search_active_agents(name=\"John\")\nchecklist = client.checklist.get_checklist(\"checklist-123\")\n</code></pre> <pre><code>from rezen import RezenClient\nfrom rezen.exceptions import RezenError, NotFoundError\n\ntry:\n    client = RezenClient()\n    transaction = client.transactions.get_transaction(\"tx-123\")\nexcept NotFoundError:\n    print(\"Transaction not found\")\nexcept RezenError as e:\n    print(f\"API error: {e}\")\n</code></pre> <pre><code>from rezen import RezenClient\nfrom rezen.enums import TeamStatus, SortDirection\n\nclient = RezenClient()\n\n# Advanced team search with enums\nteams = client.teams.search_teams(\n    status=TeamStatus.ACTIVE,\n    sort_direction=SortDirection.DESC,\n    page_size=50\n)\n</code></pre>"},{"location":"api/#client-setup","title":"\ud83d\udd27 Client Setup","text":"<p>Getting Started</p> <p>Before using any API methods, you need to set up authentication. See the Authentication Guide for setup instructions.</p>"},{"location":"api/#quick-setup","title":"Quick Setup","text":"<pre><code>from rezen import RezenClient\n\n# Using environment variable (recommended)\nclient = RezenClient()\n\n# Or with explicit API key\nclient = RezenClient(api_key=\"your_api_key_here\")\n</code></pre>"},{"location":"api/#api-endpoints-by-category","title":"\ud83d\udcd6 API Endpoints by Category","text":""},{"location":"api/#transaction-management","title":"\ud83c\udfd7\ufe0f Transaction Management","text":"<p>Build and manage real estate transactions:</p> <ul> <li>Transaction Builder - Create new transactions with participants</li> <li>Transactions - Manage live transactions and processing</li> <li>Checklist - Track transaction requirements and documents</li> </ul>"},{"location":"api/#people-organizations","title":"\ud83d\udc65 People &amp; Organizations","text":"<p>Work with agents, teams, and contacts:</p> <ul> <li>Teams - Search and manage team information</li> <li>Agents - Agent search and network management</li> <li>Users - User profiles and team/office membership</li> <li>Directory - Contact and agent directory services</li> </ul>"},{"location":"api/#documents-compliance","title":"\ud83d\udcc4 Documents &amp; Compliance","text":"<p>Handle documents and digital workflows:</p> <ul> <li>Documents - Digital signatures and document management</li> <li>Checklist - Transaction checklists and compliance tracking</li> </ul>"},{"location":"api/#key-features","title":"\ud83c\udfaf Key Features","text":""},{"location":"api/#type-safety","title":"Type Safety","text":"<ul> <li>Full type hints for all methods and parameters</li> <li>IDE autocompletion and error detection</li> <li>Runtime type validation with Pydantic</li> </ul>"},{"location":"api/#error-handling","title":"Error Handling","text":"<ul> <li>Specific exception types for different error conditions</li> <li>Rich error context with request/response details</li> <li>Comprehensive error handling patterns</li> </ul>"},{"location":"api/#developer-experience","title":"Developer Experience","text":"<ul> <li>Google-style docstrings with examples</li> <li>Automatic retry logic for transient failures</li> <li>Built-in rate limiting and pagination support</li> </ul>"},{"location":"api/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<p>Additional Resources</p> <ul> <li>Data Types &amp; Enums - Type definitions and constants</li> <li>Exception Reference - Error handling guide</li> <li>Examples &amp; Guides - Practical usage examples</li> <li>Authentication Setup - Client configuration</li> </ul>"},{"location":"api/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>New to the ReZEN API? Start here:</p> <ol> <li>Install the client - Get up and running</li> <li>Configure authentication - Set up your API key</li> <li>Try the quick start - Make your first API call</li> <li>Explore examples - See real-world use cases</li> </ol>"},{"location":"api/#method-lookup","title":"\ud83d\udd0d Method Lookup","text":"<p>Looking for a specific method? Use the search function above or browse by category:</p> <ul> <li>Transaction creation \u2192 Transaction Builder</li> <li>Agent search \u2192 Agents API</li> <li>Team management \u2192 Teams API</li> <li>Payment processing \u2192 Transactions API</li> <li>Contact lookup \u2192 Directory API</li> <li>Document signatures \u2192 Documents API</li> <li>Checklist tracking \u2192 Checklist API</li> </ul>"},{"location":"api/agents/","title":"Agents API","text":"<p>Comprehensive agent search, network management, and detailed information retrieval.</p>"},{"location":"api/agents/#overview","title":"Overview","text":"<p>Agents API Features</p> <ul> <li>Agent Search: Find agents with advanced filtering including email and phone</li> <li>Agent Details: Get individual agent information and cap details</li> <li>Network Management: Access sponsor trees and downlines</li> <li>Contact Information: Get agent details by email, ID, or phone</li> <li>Geographic Filtering: Search by location and region</li> </ul>"},{"location":"api/agents/#quick-start","title":"Quick Start","text":"\ud83d\ude80 Basic Usage\ud83d\udd0d Search Options\u2699\ufe0f Advanced Filtering\ud83d\udee1\ufe0f Error Handling <pre><code>from rezen import RezenClient\n\nclient = RezenClient()\n\n# Get a single agent by ID\nagent = client.agents.get_agent(\"agent-uuid\")\nprint(f\"Agent: {agent['name']}\")\n\n# Simple agent search by name\nagents = client.agents.search_active_agents(name=\"John\", page_size=10)\nprint(f\"Found {len(agents)} agents named John\")\n</code></pre> <pre><code>from rezen import RezenClient\n\nclient = RezenClient()\n\n# Search by email\nagents = client.agents.search_active_agents(email=\"john@example.com\")\n\n# Search by phone\nagents = client.agents.search_active_agents(phone=\"+1234567890\")\n\n# Using backward compatibility method\nagents = client.agents.agent_search(email=\"john@example.com\")\nagents = client.agents.agent_search(phone=\"+1234567890\")\n</code></pre> <pre><code>from rezen import RezenClient\nfrom rezen.enums import Country, StateOrProvince, AgentSortField\n\nclient = RezenClient()\n\n# Geographic search with sorting\nagents = client.agents.search_active_agents(\n    country=[Country.UNITED_STATES],\n    state_or_province=[StateOrProvince.CALIFORNIA],\n    sort_by=[AgentSortField.LAST_NAME],\n    page_size=50\n)\n</code></pre> <pre><code>from rezen import RezenClient\nfrom rezen.exceptions import RezenError, NotFoundError\n\nclient = RezenClient()\n\ntry:\n    agent = client.agents.get_agent(\"agent-uuid\")\n    print(f\"Found agent: {agent['name']}\")\nexcept NotFoundError:\n    print(\"Agent not found\")\nexcept RezenError as e:\n    print(f\"API error occurred: {e}\")\n</code></pre>"},{"location":"api/agents/#core-methods","title":"Core Methods","text":""},{"location":"api/agents/#get-single-agent","title":"Get Single Agent","text":"<p>Get a single agent by ID.</p> <p>Parameters:</p> Name Type Description Default <code>agent_id</code> <code>str</code> <p>The agent's ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing agent information</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If agent not found or API error</p>"},{"location":"api/agents/#get-agent-cap-information","title":"Get Agent Cap Information","text":"<p>Get agent's cap information.</p> <p>Parameters:</p> Name Type Description Default <code>agent_id</code> <code>str</code> <p>UUID of the agent</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Agent's cap information</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/agents/#search-active-agents","title":"Search Active Agents","text":"<p>Search for active agents.</p> <p>Parameters:</p> Name Type Description Default <code>page_number</code> <code>Optional[int]</code> <p>Page number for pagination (default: 0)</p> <code>None</code> <code>page_size</code> <code>Optional[int]</code> <p>Page size for pagination (default: 20)</p> <code>None</code> <code>sort_direction</code> <code>Optional[Union[SortDirection, str]]</code> <p>Sort direction (default: ASC)</p> <code>None</code> <code>sort_by</code> <code>Optional[List[Union[AgentSortField, str]]]</code> <p>Fields to sort by (default: [\"FIRST_NAME\", \"LAST_NAME\"])</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Filter by agent name</p> <code>None</code> <code>email</code> <code>Optional[str]</code> <p>Filter by email address</p> <code>None</code> <code>phone</code> <code>Optional[str]</code> <p>Filter by phone number</p> <code>None</code> <code>non_reportable</code> <code>Optional[List[bool]]</code> <p>Filter by non-reportable status</p> <code>None</code> <code>country</code> <code>Optional[List[Union[Country, str]]]</code> <p>Filter by country</p> <code>None</code> <code>state_or_province</code> <code>Optional[List[Union[StateOrProvince, str]]]</code> <p>Filter by state or province</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Search results for active agents</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>New Parameters</p> <p>The <code>search_active_agents</code> method now supports <code>email</code> and <code>phone</code> parameters for direct contact search.</p>"},{"location":"api/agents/#agent-search-backward-compatibility","title":"Agent Search (Backward Compatibility)","text":"<p>Search agents by email or phone - backward compatibility method.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>Email address to search for</p> <code>''</code> <code>phone</code> <code>str</code> <p>Phone number to search for</p> <code>''</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing search results</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/agents/#get-agent-by-email","title":"Get Agent by Email","text":"<p>Get agent(s) by email address.</p> <p>Parameters:</p> Name Type Description Default <code>email_address</code> <code>str</code> <p>Email address to search for</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Agent information matching the email address</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/agents/#get-agents-by-ids","title":"Get Agents by IDs","text":"<p>Get agents by ids (limit 20).</p> <p>Parameters:</p> Name Type Description Default <code>agent_ids</code> <code>List[str]</code> <p>List of agent UUIDs (maximum 20)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Agents information for the specified IDs</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <code>ValidationError</code> <p>If more than 20 agent IDs are provided</p>"},{"location":"api/agents/#network-hierarchy","title":"Network Hierarchy","text":"<p>Get agent's sponsor tree.</p> <p>Parameters:</p> Name Type Description Default <code>agent_id</code> <code>str</code> <p>UUID of the agent</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Agent's sponsor tree information</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Get agents in the network within a specific tier of the given agent.</p> <p>Parameters:</p> Name Type Description Default <code>agent_id</code> <code>str</code> <p>UUID of the agent</p> required <code>tier</code> <code>int</code> <p>Tier level to retrieve</p> required <code>updated_at_from</code> <code>Optional[date]</code> <p>Start date for updatedAt filter (e.g., \"2025-01-01\")</p> <code>None</code> <code>updated_at_to</code> <code>Optional[date]</code> <p>End date for updatedAt filter (e.g., \"2025-01-31\")</p> <code>None</code> <code>status_in</code> <code>Optional[List[Union[AgentStatus, str]]]</code> <p>Filter agents by status, defaults to ACTIVE if not specified</p> <code>None</code> <code>page_number</code> <code>Optional[int]</code> <p>Page number for pagination (default: 0)</p> <code>None</code> <code>page_size</code> <code>Optional[int]</code> <p>Page size for pagination (default: 20)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Downline agents information for the specified tier</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/agents/#search-examples","title":"Search Examples","text":"<p>Advanced Agent Search</p> Contact SearchGeographic SearchSorted Results <pre><code># Search by email\nagents = client.agents.search_active_agents(\n    email=\"john.doe@example.com\"\n)\n\n# Search by phone\nagents = client.agents.search_active_agents(\n    phone=\"+1234567890\"\n)\n\n# Using compatibility method\nagents = client.agents.agent_search(email=\"john@example.com\")\n</code></pre> <pre><code>from rezen.enums import Country, StateOrProvince\n\n# Search California agents\nagents = client.agents.search_active_agents(\n    country=[Country.UNITED_STATES],\n    state_or_province=[StateOrProvince.CALIFORNIA],\n    page_size=50\n)\n</code></pre> <pre><code>from rezen.enums import AgentSortField, SortDirection\n\nagents = client.agents.search_active_agents(\n    sort_by=[AgentSortField.LAST_NAME, AgentSortField.FIRST_NAME],\n    sort_direction=SortDirection.ASC,\n    page_size=25\n)\n</code></pre>"},{"location":"api/agents/#agent-information","title":"Agent Information","text":"<p>Agent Details</p> <p>Get comprehensive agent information including cap details and profile scores.</p> <p>Agent Information Retrieval</p> <pre><code># Get single agent details\nagent = client.agents.get_agent(\"agent-uuid\")\n\n# Get agent cap information\ncap_info = client.agents.get_cap_info(\"agent-uuid\")\n\n# Get profile score\nprofile_score = client.agents.get_profile_score(\"agent-uuid\")\n\n# Get payment details\npayment_details = client.agents.get_payment_details(\"agent-uuid\")\n</code></pre>"},{"location":"api/agents/#network-management","title":"Network Management","text":"<p>Agent Hierarchy</p> <p>The ReZEN platform supports agent network hierarchies with sponsor trees and downlines.</p> <p>Network Analysis</p> <pre><code># Get agent's sponsor tree\nsponsor_tree = client.agents.get_sponsor_tree(\"agent-uuid\")\n\n# Get first-tier downline\ndownline = client.agents.get_down_line_agents(\n    agent_id=\"agent-uuid\",\n    tier=1,\n    status_in=[\"ACTIVE\"]\n)\n\n# Get front line agents info\nfront_line = client.agents.get_front_line_agents_info(\"agent-uuid\")\n</code></pre>"},{"location":"api/agents/#next-steps","title":"Next Steps","text":"<ul> <li> <p>\ud83d\udc65 Teams API</p> <p>Manage team information and memberships</p> </li> <li> <p>\ud83d\udd27 Transaction Builder</p> <p>Add agents to transactions</p> </li> <li> <p>\ud83d\udcd6 Directory API</p> <p>Access additional agent directory services</p> </li> </ul>"},{"location":"api/checklist/","title":"Checklist API","text":"<p>Comprehensive API for managing checklists, checklist items, documents, and progress tracking.</p>"},{"location":"api/checklist/#overview","title":"Overview","text":"<p>Checklist API Features</p> <p>The ChecklistClient provides complete access to ReZEN's checklist functionality:</p> <ul> <li>\u2705 Checklist Management: Create, retrieve, and update checklists</li> <li>\ud83d\udccb Item Operations: Add, update, delete, and complete checklist items</li> <li>\ud83d\udcc4 Document Handling: Upload documents and manage versions</li> <li>\ud83d\udcca Progress Tracking: Monitor checklist completion status</li> <li>\ud83d\udd04 Batch Operations: Update multiple checklists efficiently</li> <li>\ud83d\udcbe File Downloads: Retrieve document versions</li> </ul>"},{"location":"api/checklist/#quick-start","title":"Quick Start","text":"<pre><code>from rezen import ChecklistClient\n\n# Initialize client (uses REZEN_API_KEY from environment)\nclient = ChecklistClient()\n\n# Get a checklist\nchecklist = client.get_checklist(\"3fa85f64-5717-4562-b3fc-2c963f66afa6\")\n\n# Get checklist item details\nitem = client.get_checklist_item(\"4fa85f64-5717-4562-b3fc-2c963f66afa7\")\n\n# Mark item as complete\nclient.complete_checklist_item(item[\"id\"], is_complete=True)\n</code></pre>"},{"location":"api/checklist/#endpoint-reference","title":"Endpoint Reference","text":""},{"location":"api/checklist/#checklist-operations","title":"Checklist Operations","text":""},{"location":"api/checklist/#get-checklist","title":"Get Checklist","text":"<p>Get checklist for given ID.</p> <p>Parameters:</p> Name Type Description Default <code>checklist_id</code> <code>str</code> <p>The checklist ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing checklist details and items</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>checklist = client.get_checklist(\"3fa85f64-5717-4562-b3fc-2c963f66afa6\")\n\n# Response structure\n{\n    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n    \"createdAt\": 1640995200000,\n    \"name\": \"Transaction Checklist\",\n    \"items\": [...],\n    \"approved\": False,\n    \"locked\": False,\n    \"checklistDefinitionId\": \"...\",\n    \"fileApiVersion\": \"V1\"\n}\n</code></pre></p>"},{"location":"api/checklist/#create-checklist","title":"Create Checklist","text":"<p>Create checklist for given checklist definition ID.</p> <p>Parameters:</p> Name Type Description Default <code>checklist_definition_id</code> <code>str</code> <p>The checklist definition ID</p> required <code>checklist_data</code> <code>Dict[str, Any]</code> <p>Checklist creation data including parent info and assignees</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing the API response</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>checklist_data = {\n    \"parentId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n    \"parentType\": \"TRANSACTION\",\n    \"assignees\": {\n        \"agent1\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n        \"agent2\": \"4fa85f64-5717-4562-b3fc-2c963f66afa7\"\n    },\n    \"brokerAgentId\": \"broker-123\",\n    \"ownerAgentId\": \"owner-123\"\n}\n\nresult = client.create_checklist(\n    checklist_definition_id=\"def-123\",\n    checklist_data=checklist_data\n)\n</code></pre></p>"},{"location":"api/checklist/#get-checklist-progress","title":"Get Checklist Progress","text":"<p>Get checklists progress for given checklist IDs.</p> <p>Parameters:</p> Name Type Description Default <code>checklist_ids</code> <code>List[str]</code> <p>List of checklist IDs</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing progress information (API returns array in 'data' field)</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>checklist_ids = [\"checklist-1\", \"checklist-2\", \"checklist-3\"]\nprogress = client.get_checklists_progress(checklist_ids)\n\n# Response structure (list of progress objects)\n[\n    {\n        \"checklistId\": \"checklist-1\",\n        \"itemCount\": 10,\n        \"completedCount\": 7,\n        \"itemCountIncludingOptionals\": 12,\n        \"completedCountIncludingOptionals\": 8\n    },\n    ...\n]\n</code></pre></p>"},{"location":"api/checklist/#batch-update-checklists","title":"Batch Update Checklists","text":"<p>Update all checklists with the given IDs.</p> <p>Parameters:</p> Name Type Description Default <code>batch_items</code> <code>List[Dict[str, Any]]</code> <p>List of items with checklistId and patch data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing the API response</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>batch_items = [\n    {\n        \"checklistId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n        \"patch\": {\"locked\": True}\n    },\n    {\n        \"checklistId\": \"4fa85f64-5717-4562-b3fc-2c963f66afa7\",\n        \"patch\": {\"approved\": True}\n    }\n]\n\nresult = client.batch_update_checklists(batch_items)\n</code></pre></p>"},{"location":"api/checklist/#checklist-item-operations","title":"Checklist Item Operations","text":""},{"location":"api/checklist/#get-checklist-item","title":"Get Checklist Item","text":"<p>Get checklist item for given ID.</p> <p>Parameters:</p> Name Type Description Default <code>checklist_item_id</code> <code>str</code> <p>The checklist item ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing checklist item details</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>item = client.get_checklist_item(\"3fa85f64-5717-4562-b3fc-2c963f66afa6\")\n\n# Response structure\n{\n    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n    \"createdAt\": 1640995200000,\n    \"name\": \"Property Inspection\",\n    \"checklistId\": \"...\",\n    \"description\": \"Complete property inspection\",\n    \"position\": 1,\n    \"dueDate\": \"2025-06-09\",\n    \"required\": True,\n    \"urgent\": False,\n    \"complete\": False,\n    \"documents\": [...],\n    \"labels\": [...]\n}\n</code></pre></p>"},{"location":"api/checklist/#create-checklist-item","title":"Create Checklist Item","text":"<p>Create checklist item for given checklist ID.</p> <p>Parameters:</p> Name Type Description Default <code>checklist_id</code> <code>str</code> <p>The checklist ID</p> required <code>item_data</code> <code>Dict[str, Any]</code> <p>Item data including item details</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing the API response</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>item_data = {\n    \"item\": {\n        \"name\": \"Final Walkthrough\",\n        \"description\": \"Conduct final property walkthrough with buyer\",\n        \"position\": 10,\n        \"dueDate\": \"2025-06-09\",\n        \"required\": True,\n        \"urgent\": False,\n        \"labels\": [\n            {\n                \"text\": \"Buyer Required\"\n            }\n        ]\n    }\n}\n\nresult = client.create_checklist_item(\n    checklist_id=\"checklist-123\",\n    item_data=item_data\n)\n</code></pre></p>"},{"location":"api/checklist/#update-checklist-item","title":"Update Checklist Item","text":"<p>Update checklist item for given checklist item ID.</p> <p>Parameters:</p> Name Type Description Default <code>checklist_item_id</code> <code>str</code> <p>The checklist item ID</p> required <code>item_data</code> <code>Dict[str, Any]</code> <p>Item data including item details</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing the API response</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>update_data = {\n    \"item\": {\n        \"id\": \"item-123\",\n        \"name\": \"Updated Item Name\",\n        \"description\": \"Updated description\",\n        \"dueDate\": \"2025-07-01\",\n        \"urgent\": True,\n        \"complete\": False\n    }\n}\n\nresult = client.update_checklist_item(\n    checklist_item_id=\"item-123\",\n    item_data=update_data\n)\n</code></pre></p>"},{"location":"api/checklist/#delete-checklist-item","title":"Delete Checklist Item","text":"<p>Delete checklist item for given ID.</p> <p>Parameters:</p> Name Type Description Default <code>checklist_item_id</code> <code>str</code> <p>The checklist item ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing deletion status and message</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>result = client.delete_checklist_item(\"item-123\")\n\n# Response\n{\n    \"status\": True,\n    \"message\": \"Checklist item deleted successfully\"\n}\n</code></pre></p>"},{"location":"api/checklist/#complete-checklist-item","title":"Complete Checklist Item","text":"<p>Mark checklist item as complete or incomplete.</p> <p>Parameters:</p> Name Type Description Default <code>checklist_item_id</code> <code>str</code> <p>The checklist item ID</p> required <code>is_complete</code> <code>bool</code> <p>Whether to mark as complete (default: True)</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing the API response</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code># Mark as complete\nclient.complete_checklist_item(\"item-123\", is_complete=True)\n\n# Mark as incomplete\nclient.complete_checklist_item(\"item-123\", is_complete=False)\n</code></pre></p>"},{"location":"api/checklist/#document-operations","title":"Document Operations","text":""},{"location":"api/checklist/#get-checklist-document","title":"Get Checklist Document","text":"<p>Get document for the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>document_id</code> <code>str</code> <p>The document ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing document details including versions</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>document = client.get_checklist_document(\"doc-123\")\n\n# Response structure\n{\n    \"id\": \"doc-123\",\n    \"createdAt\": 1640995200000,\n    \"name\": \"Purchase Agreement\",\n    \"description\": \"Signed purchase agreement\",\n    \"versions\": [\n        {\n            \"id\": \"version-1\",\n            \"name\": \"Version 1.0\",\n            \"number\": 1,\n            \"uploaderId\": \"user-123\",\n            \"path\": \"documents/purchase-agreement-v1.pdf\"\n        }\n    ],\n    \"currentVersion\": {...},\n    \"documentDefinitionId\": \"...\"\n}\n</code></pre></p>"},{"location":"api/checklist/#update-checklist-document","title":"Update Checklist Document","text":"<p>Update current version for the given document ID.</p> <p>Parameters:</p> Name Type Description Default <code>document_id</code> <code>str</code> <p>The document ID</p> required <code>document_data</code> <code>Dict[str, Any]</code> <p>Document data including versions and current version</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing the API response</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>document_data = {\n    \"id\": \"doc-123\",\n    \"name\": \"Updated Purchase Agreement\",\n    \"description\": \"Updated with amendments\",\n    \"currentVersion\": {\n        \"id\": \"version-2\"\n    }\n}\n\nresult = client.update_checklist_document(\n    document_id=\"doc-123\",\n    document_data=document_data\n)\n</code></pre></p>"},{"location":"api/checklist/#delete-checklist-document","title":"Delete Checklist Document","text":"<p>Delete the given document ID.</p> <p>Parameters:</p> Name Type Description Default <code>document_id</code> <code>str</code> <p>The document ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing the API response</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>result = client.delete_checklist_document(\"doc-123\")\n</code></pre></p>"},{"location":"api/checklist/#add-document-to-checklist-item","title":"Add Document to Checklist Item","text":"<p>Add a new document to the given checklist item ID.</p> <p>Parameters:</p> Name Type Description Default <code>checklist_item_id</code> <code>str</code> <p>The checklist item ID</p> required <code>name</code> <code>str</code> <p>Document name</p> required <code>description</code> <code>str</code> <p>Document description</p> required <code>uploader_id</code> <code>str</code> <p>ID of the user uploading the document</p> required <code>transaction_id</code> <code>str</code> <p>Transaction ID</p> required <code>file</code> <code>Optional[BinaryIO]</code> <p>File to upload (optional)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing document details</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code># With file upload\nwith open(\"contract.pdf\", \"rb\") as file:\n    result = client.add_document_to_checklist_item(\n        checklist_item_id=\"item-123\",\n        name=\"Purchase Contract\",\n        description=\"Signed purchase contract\",\n        uploader_id=\"user-456\",\n        transaction_id=\"txn-789\",\n        file=file\n    )\n\n# Without file (metadata only)\nresult = client.add_document_to_checklist_item(\n    checklist_item_id=\"item-123\",\n    name=\"External Document\",\n    description=\"Document stored externally\",\n    uploader_id=\"user-456\",\n    transaction_id=\"txn-789\"\n)\n</code></pre></p>"},{"location":"api/checklist/#add-document-version","title":"Add Document Version","text":"<p>Add a new version for given document ID.</p> <p>Parameters:</p> Name Type Description Default <code>checklist_document_id</code> <code>str</code> <p>The checklist document ID</p> required <code>name</code> <code>str</code> <p>Version name</p> required <code>description</code> <code>str</code> <p>Version description</p> required <code>uploader_id</code> <code>str</code> <p>ID of the user uploading the version</p> required <code>transaction_id</code> <code>str</code> <p>Transaction ID</p> required <code>file</code> <code>Optional[BinaryIO]</code> <p>File to upload (optional)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing version details</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>with open(\"contract-v2.pdf\", \"rb\") as file:\n    result = client.add_document_version(\n        checklist_document_id=\"doc-123\",\n        name=\"Version 2.0\",\n        description=\"Updated with amendments\",\n        uploader_id=\"user-456\",\n        transaction_id=\"txn-789\",\n        file=file\n    )\n\n# Response includes new version details\n{\n    \"id\": \"version-2\",\n    \"name\": \"Version 2.0\",\n    \"description\": \"Updated with amendments\",\n    \"number\": 2,\n    \"uploaderId\": \"user-456\",\n    \"path\": \"documents/contract-v2.pdf\"\n}\n</code></pre></p>"},{"location":"api/checklist/#download-document-version","title":"Download Document Version","text":"<p>Get the download URL for a document version.</p> <p>Parameters:</p> Name Type Description Default <code>version_id</code> <code>str</code> <p>The version ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing the download URL (response will be processed by base client)</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Example: <pre><code>result = client.download_document_version(\"version-123\")\n\n# Response contains download URL\n{\n    \"downloadUrl\": \"https://example.com/secure/download/doc.pdf\"\n}\n</code></pre></p>"},{"location":"api/checklist/#usage-examples","title":"Usage Examples","text":""},{"location":"api/checklist/#complete-checklist-workflow","title":"Complete Checklist Workflow","text":"<p>End-to-End Checklist Management</p> <pre><code>from rezen import ChecklistClient\nfrom rezen.exceptions import NotFoundError, ValidationError\n\ndef manage_transaction_checklist(transaction_id: str):\n    \"\"\"Complete checklist workflow for a transaction.\"\"\"\n    client = ChecklistClient()\n\n    try:\n        # 1. Create a new checklist\n        print(\"Creating checklist...\")\n        checklist_data = {\n            \"parentId\": transaction_id,\n            \"parentType\": \"TRANSACTION\",\n            \"assignees\": {\n                \"listing_agent\": \"agent-123\",\n                \"buyer_agent\": \"agent-456\"\n            }\n        }\n\n        checklist_result = client.create_checklist(\n            checklist_definition_id=\"standard-purchase\",\n            checklist_data=checklist_data\n        )\n        checklist_id = checklist_result[\"checklistId\"]\n\n        # 2. Get the checklist details\n        checklist = client.get_checklist(checklist_id)\n        print(f\"Created checklist: {checklist['name']}\")\n\n        # 3. Add custom items\n        custom_item = {\n            \"item\": {\n                \"name\": \"Home Warranty Decision\",\n                \"description\": \"Buyer to decide on home warranty\",\n                \"required\": False,\n                \"position\": 99,\n                \"dueDate\": \"2025-06-15\"\n            }\n        }\n\n        item_result = client.create_checklist_item(\n            checklist_id=checklist_id,\n            item_data=custom_item\n        )\n        print(f\"Added custom item: {item_result['id']}\")\n\n        # 4. Process existing items\n        checklist = client.get_checklist(checklist_id)\n        for item in checklist[\"items\"]:\n            if item[\"required\"] and not item[\"complete\"]:\n                print(f\"\\nProcessing: {item['name']}\")\n\n                # Upload document if needed\n                if \"inspection\" in item[\"name\"].lower():\n                    upload_inspection_report(client, item[\"id\"], transaction_id)\n\n                # Mark as complete\n                client.complete_checklist_item(item[\"id\"])\n                print(f\"\u2713 Completed: {item['name']}\")\n\n        # 5. Check progress\n        progress = client.get_checklists_progress([checklist_id])\n        if progress:\n            prog = progress[0] if isinstance(progress, list) else progress\n            print(f\"\\nProgress: {prog['completedCount']}/{prog['itemCount']} items\")\n\n        # 6. Lock checklist when done\n        client.batch_update_checklists([\n            {\n                \"checklistId\": checklist_id,\n                \"patch\": {\"locked\": True, \"approved\": True}\n            }\n        ])\n        print(\"Checklist locked and approved!\")\n\n        return checklist_id\n\n    except NotFoundError as e:\n        print(f\"Resource not found: {e}\")\n    except ValidationError as e:\n        print(f\"Validation error: {e}\")\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        return None\n\ndef upload_inspection_report(client, item_id, transaction_id):\n    \"\"\"Upload inspection report to checklist item.\"\"\"\n    try:\n        with open(\"inspection_report.pdf\", \"rb\") as file:\n            result = client.add_document_to_checklist_item(\n                checklist_item_id=item_id,\n                name=\"Property Inspection Report\",\n                description=\"Complete inspection findings\",\n                uploader_id=\"inspector-001\",\n                transaction_id=transaction_id,\n                file=file\n            )\n            print(f\"  Uploaded: {result['name']}\")\n    except FileNotFoundError:\n        print(\"  \u26a0\ufe0f  Inspection report not found\")\n</code></pre>"},{"location":"api/checklist/#document-version-management","title":"Document Version Management","text":"<p>Managing Document Versions</p> <pre><code>def manage_document_versions(doc_id: str):\n    \"\"\"Demonstrate document version management.\"\"\"\n    client = ChecklistClient()\n\n    # Get current document info\n    document = client.get_checklist_document(doc_id)\n    print(f\"Document: {document['name']}\")\n    print(f\"Current version: {document['currentVersion']['number']}\")\n\n    # Upload new version\n    with open(\"contract-amended.pdf\", \"rb\") as file:\n        new_version = client.add_document_version(\n            checklist_document_id=doc_id,\n            name=f\"Version {len(document['versions']) + 1}\",\n            description=\"Added inspection contingency\",\n            uploader_id=\"agent-123\",\n            transaction_id=\"txn-456\",\n            file=file\n        )\n\n    print(f\"Uploaded version {new_version['number']}\")\n\n    # Update document to use new version\n    client.update_checklist_document(\n        document_id=doc_id,\n        document_data={\n            \"currentVersion\": {\"id\": new_version[\"id\"]}\n        }\n    )\n\n    # Get download URL for specific version\n    download_info = client.download_document_version(new_version[\"id\"])\n    print(f\"Download URL: {download_info['downloadUrl']}\")\n</code></pre>"},{"location":"api/checklist/#progress-monitoring","title":"Progress Monitoring","text":"<p>Monitor Multiple Checklists</p> <pre><code>def monitor_checklist_progress(checklist_ids: list):\n    \"\"\"Monitor progress across multiple checklists.\"\"\"\n    client = ChecklistClient()\n\n    # Get progress for all checklists\n    progress_list = client.get_checklists_progress(checklist_ids)\n\n    total_items = 0\n    total_completed = 0\n\n    print(\"Checklist Progress Report\")\n    print(\"=\" * 50)\n\n    for progress in progress_list:\n        checklist_id = progress[\"checklistId\"]\n        completed = progress[\"completedCount\"]\n        total = progress[\"itemCount\"]\n        percentage = (completed / total * 100) if total &gt; 0 else 0\n\n        print(f\"\\nChecklist: {checklist_id}\")\n        print(f\"Progress: {completed}/{total} ({percentage:.1f}%)\")\n        print(f\"Optional items: {progress['itemCountIncludingOptionals'] - total}\")\n\n        total_items += total\n        total_completed += completed\n\n    # Overall summary\n    overall_percentage = (total_completed / total_items * 100) if total_items &gt; 0 else 0\n    print(f\"\\n{'=' * 50}\")\n    print(f\"Overall: {total_completed}/{total_items} ({overall_percentage:.1f}%)\")\n\n    return overall_percentage &gt;= 100\n</code></pre>"},{"location":"api/checklist/#error-handling","title":"Error Handling","text":"<p>Common Errors</p> <p>The ChecklistClient properly handles various error scenarios:</p> <pre><code>from rezen import ChecklistClient\nfrom rezen.exceptions import (\n    NotFoundError,\n    ValidationError,\n    AuthenticationError,\n    ServerError\n)\n\nclient = ChecklistClient()\n\ntry:\n    checklist = client.get_checklist(\"invalid-id\")\nexcept NotFoundError as e:\n    print(f\"Checklist not found: {e}\")\nexcept ValidationError as e:\n    print(f\"Invalid request: {e}\")\nexcept AuthenticationError as e:\n    print(f\"Authentication failed: {e}\")\nexcept ServerError as e:\n    print(f\"Server error: {e}\")\n</code></pre>"},{"location":"api/checklist/#best-practices","title":"Best Practices","text":"<p>Recommended Patterns</p> <ol> <li>Always handle exceptions - Wrap API calls in try-except blocks</li> <li>Check item requirements - Only mark required items as complete when truly done</li> <li>Use batch operations - Update multiple checklists in one call when possible</li> <li>Version documents - Use the version system for document updates</li> <li>Monitor progress - Regularly check completion status</li> <li>Validate before locking - Ensure all required items are complete before locking</li> </ol> <p>File Upload Tips</p> <ul> <li>Always use context managers (<code>with</code> statement) for file operations</li> <li>Provide meaningful names and descriptions for documents</li> <li>Include the transaction ID for proper association</li> <li>Handle <code>FileNotFoundError</code> gracefully</li> </ul>"},{"location":"api/checklist/#api-reference","title":"API Reference","text":""},{"location":"api/checklist/#base-configuration","title":"Base Configuration","text":"<ul> <li>Base URL: <code>https://sherlock.therealbrokerage.com/api/v1</code></li> <li>Authentication: Bearer token (API key)</li> <li>Content-Type: <code>application/json</code> (except for file uploads)</li> </ul>"},{"location":"api/checklist/#rate-limits","title":"Rate Limits","text":"<p>API Rate Limits</p> <ul> <li>Standard rate limit: 100 requests per minute</li> <li>File upload limit: 10 MB per file</li> <li>Batch operations: Maximum 100 items per request</li> </ul>"},{"location":"api/checklist/#migration-guide","title":"Migration Guide","text":"<p>Migrating from Legacy Methods</p> <p>If you're using the old checklist methods, here's how to migrate:</p> Old Method New Method <code>get_checklist_item(checklist_id, item_id)</code> <code>get_checklist_item(item_id)</code> <code>update_checklist_item(checklist_id, item_id, data)</code> <code>update_checklist_item(item_id, data)</code> <code>mark_checklist_item_complete(checklist_id, item_id)</code> <code>complete_checklist_item(item_id, True)</code> <code>post_document_to_checklist(item_id, data, file)</code> <code>add_document_to_checklist_item(...)</code> <code>delete_checklist_item_document(item_id, doc_id)</code> <code>delete_checklist_document(doc_id)</code>"},{"location":"api/checklist/#next-steps","title":"Next Steps","text":"<ul> <li> <p>\ud83d\udcc4 Documents API</p> <p>Deep dive into document management</p> </li> <li> <p>\ud83d\udd04 Transactions API</p> <p>Learn about transaction operations</p> </li> <li> <p>\ud83d\udd0c API Overview</p> <p>Explore other API endpoints</p> </li> </ul>"},{"location":"api/directory/","title":"Directory API","text":"<p>Access directory services for agent and contact information with dedicated client functionality.</p>"},{"location":"api/directory/#overview","title":"Overview","text":"<p>Directory API Features</p> <ul> <li>Dedicated Client: Separate client for directory services</li> <li>Contact Search: Find contacts and agent information</li> <li>Different Endpoint: Uses specialized directory API endpoint</li> <li>Enhanced Search: Advanced contact discovery capabilities</li> </ul>"},{"location":"api/directory/#client-setup","title":"Client Setup","text":"<p>Separate Directory Client</p> <p>The Directory API uses a dedicated client with its own endpoint configuration.</p> <pre><code>from rezen import DirectoryClient\n\n# Initialize directory client\ndirectory = DirectoryClient()\n\n# Or with explicit configuration\ndirectory = DirectoryClient(\n    api_key=\"your_api_key_here\",\n    base_url=\"https://yenta.therealbrokerage.com/api/v1\"\n)\n</code></pre>"},{"location":"api/directory/#core-methods","title":"Core Methods","text":""},{"location":"api/directory/#directory-client-operations","title":"Directory Client Operations","text":"<p>               Bases: <code>BaseClient</code></p> <p>Client for ReZEN Directory API endpoints.</p> <p>Provides access to directory functionality including: - Vendor management (create, update, search, archive) - Person management (create, update, search, link/unlink) - Directory entry search across vendors and persons - Role management and W9 file handling</p> <p>Initialize the Directory API client.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>Optional[str]</code> <p>ReZEN API key for authentication</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the directory API. Defaults to yenta production URL</p> <code>None</code>"},{"location":"api/directory/#rezen.directory.DirectoryClient.archive_person","title":"<code>archive_person(person_id, archive=True)</code>","text":"<p>Archive or unarchive a person.</p> <p>Parameters:</p> Name Type Description Default <code>person_id</code> <code>str</code> <p>UUID of the person</p> required <code>archive</code> <code>bool</code> <p>True to archive, False to unarchive</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated person data</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.archive_vendor","title":"<code>archive_vendor(vendor_id, archive=True)</code>","text":"<p>Archive or unarchive a vendor.</p> <p>Parameters:</p> Name Type Description Default <code>vendor_id</code> <code>str</code> <p>UUID of the vendor</p> required <code>archive</code> <code>bool</code> <p>True to archive, False to unarchive</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated vendor data</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.create_person","title":"<code>create_person(person_data, owner_agent_id=None, owner_team_id=None)</code>","text":"<p>Create a person.</p> <p>Parameters:</p> Name Type Description Default <code>person_data</code> <code>Dict[str, Any]</code> <p>Person creation data</p> required <code>owner_agent_id</code> <code>Optional[str]</code> <p>Owner agent ID</p> <code>None</code> <code>owner_team_id</code> <code>Optional[str]</code> <p>Owner team ID</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created person response data</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.create_vendor","title":"<code>create_vendor(vendor_data)</code>","text":"<p>Create a vendor.</p> <p>Parameters:</p> Name Type Description Default <code>vendor_data</code> <code>Dict[str, Any]</code> <p>Vendor creation data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created vendor response data</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.get_permitted_roles","title":"<code>get_permitted_roles(entry_type=None)</code>","text":"<p>Get roles available for directory entries.</p> <p>Parameters:</p> Name Type Description Default <code>entry_type</code> <code>Optional[Union[DirectoryEntryType, str]]</code> <p>Filter by entry type (VENDOR or PERSON)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Available roles for directory entries</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.get_person","title":"<code>get_person(person_id)</code>","text":"<p>Get person by id.</p> <p>Parameters:</p> Name Type Description Default <code>person_id</code> <code>str</code> <p>UUID of the person</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Person data</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.get_vendor","title":"<code>get_vendor(vendor_id)</code>","text":"<p>Get vendor by id.</p> <p>Parameters:</p> Name Type Description Default <code>vendor_id</code> <code>str</code> <p>UUID of the vendor</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Vendor data</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.get_vendor_w9_url","title":"<code>get_vendor_w9_url(vendor_id)</code>","text":"<p>Get a vendor's W9 URL.</p> <p>Parameters:</p> Name Type Description Default <code>vendor_id</code> <code>str</code> <p>UUID of the vendor</p> required <p>Returns:</p> Type Description <code>str</code> <p>W9 file URL</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.link_person","title":"<code>link_person(person_id, link_data)</code>","text":"<p>Link a person to a vendor.</p> <p>Parameters:</p> Name Type Description Default <code>person_id</code> <code>str</code> <p>UUID of the person</p> required <code>link_data</code> <code>Dict[str, Any]</code> <p>Link data containing vendor information</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated person data</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.search_all_entries","title":"<code>search_all_entries(page_number, page_size, is_archived=None, is_verified=None, search_text=None, national_business_id=None, name=None, email_address=None, phone_number=None, street=None, city=None, postal=None, state_or_province=None, country=None, administrative_area_ids=None, roles=None, created_by=None, entry_id=None, sort_by=None)</code>","text":"<p>Get all vendors and persons with paging, sorting, and filtering.</p> <p>Parameters:</p> Name Type Description Default <code>page_number</code> <code>int</code> <p>Page number for pagination</p> required <code>page_size</code> <code>int</code> <p>Page size for pagination</p> required <code>is_archived</code> <code>Optional[bool]</code> <p>Filter by archived status</p> <code>None</code> <code>is_verified</code> <code>Optional[bool]</code> <p>Filter by verified status</p> <code>None</code> <code>search_text</code> <code>Optional[str]</code> <p>Search text</p> <code>None</code> <code>national_business_id</code> <code>Optional[str]</code> <p>Filter by national business ID</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Filter by name</p> <code>None</code> <code>email_address</code> <code>Optional[str]</code> <p>Filter by email address</p> <code>None</code> <code>phone_number</code> <code>Optional[str]</code> <p>Filter by phone number</p> <code>None</code> <code>street</code> <code>Optional[str]</code> <p>Filter by street address</p> <code>None</code> <code>city</code> <code>Optional[str]</code> <p>Filter by city</p> <code>None</code> <code>postal</code> <code>Optional[str]</code> <p>Filter by postal code</p> <code>None</code> <code>state_or_province</code> <code>Optional[Union[StateOrProvince, str]]</code> <p>Filter by state or province</p> <code>None</code> <code>country</code> <code>Optional[Union[Country, str]]</code> <p>Filter by country</p> <code>None</code> <code>administrative_area_ids</code> <code>Optional[List[str]]</code> <p>Filter by administrative area IDs</p> <code>None</code> <code>roles</code> <code>Optional[List[Union[DirectoryRole, str]]]</code> <p>Filter by roles</p> <code>None</code> <code>created_by</code> <code>Optional[str]</code> <p>Filter by creator UUID</p> <code>None</code> <code>entry_id</code> <code>Optional[str]</code> <p>Filter by entry ID</p> <code>None</code> <code>sort_by</code> <code>Optional[List[Union[DirectoryEntrySortField, str]]]</code> <p>Fields to sort by</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Paginated directory entry search results</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.search_persons","title":"<code>search_persons(page_number, page_size, is_archived=None, is_public=None, is_linked_to_vendor=None, search_text=None, first_name=None, last_name=None, email_address=None, phone_number=None, roles=None, sort_by=None)</code>","text":"<p>Get all persons with paging, sorting, and filtering.</p> <p>Parameters:</p> Name Type Description Default <code>page_number</code> <code>int</code> <p>Page number for pagination</p> required <code>page_size</code> <code>int</code> <p>Page size for pagination</p> required <code>is_archived</code> <code>Optional[bool]</code> <p>Filter by archived status</p> <code>None</code> <code>is_public</code> <code>Optional[bool]</code> <p>Filter by public status</p> <code>None</code> <code>is_linked_to_vendor</code> <code>Optional[bool]</code> <p>Filter by whether person is linked to vendor</p> <code>None</code> <code>search_text</code> <code>Optional[str]</code> <p>Search text</p> <code>None</code> <code>first_name</code> <code>Optional[str]</code> <p>Filter by first name</p> <code>None</code> <code>last_name</code> <code>Optional[str]</code> <p>Filter by last name</p> <code>None</code> <code>email_address</code> <code>Optional[str]</code> <p>Filter by email address</p> <code>None</code> <code>phone_number</code> <code>Optional[str]</code> <p>Filter by phone number</p> <code>None</code> <code>roles</code> <code>Optional[List[Union[DirectoryRole, str]]]</code> <p>Filter by roles</p> <code>None</code> <code>sort_by</code> <code>Optional[List[Union[PersonSortField, str]]]</code> <p>Fields to sort by</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Paginated person search results</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.search_vendors","title":"<code>search_vendors(page_number, page_size, is_archived=None, is_verified=None, has_linked_persons=None, search_text=None, national_business_id=None, name=None, email_address=None, phone_number=None, street=None, city=None, postal=None, state_or_province=None, country=None, administrative_area_ids=None, roles=None, sort_by=None)</code>","text":"<p>Get all vendors with paging, sorting, and filtering.</p> <p>Parameters:</p> Name Type Description Default <code>page_number</code> <code>int</code> <p>Page number for pagination</p> required <code>page_size</code> <code>int</code> <p>Page size for pagination</p> required <code>is_archived</code> <code>Optional[bool]</code> <p>Filter by archived status</p> <code>None</code> <code>is_verified</code> <code>Optional[bool]</code> <p>Filter by verified status</p> <code>None</code> <code>has_linked_persons</code> <code>Optional[bool]</code> <p>Filter by whether vendor has linked persons</p> <code>None</code> <code>search_text</code> <code>Optional[str]</code> <p>Search text</p> <code>None</code> <code>national_business_id</code> <code>Optional[str]</code> <p>Filter by national business ID</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Filter by name</p> <code>None</code> <code>email_address</code> <code>Optional[str]</code> <p>Filter by email address</p> <code>None</code> <code>phone_number</code> <code>Optional[str]</code> <p>Filter by phone number</p> <code>None</code> <code>street</code> <code>Optional[str]</code> <p>Filter by street address</p> <code>None</code> <code>city</code> <code>Optional[str]</code> <p>Filter by city</p> <code>None</code> <code>postal</code> <code>Optional[str]</code> <p>Filter by postal code</p> <code>None</code> <code>state_or_province</code> <code>Optional[Union[StateOrProvince, str]]</code> <p>Filter by state or province</p> <code>None</code> <code>country</code> <code>Optional[Union[Country, str]]</code> <p>Filter by country</p> <code>None</code> <code>administrative_area_ids</code> <code>Optional[List[str]]</code> <p>Filter by administrative area IDs</p> <code>None</code> <code>roles</code> <code>Optional[List[Union[DirectoryRole, str]]]</code> <p>Filter by roles</p> <code>None</code> <code>sort_by</code> <code>Optional[List[Union[VendorSortField, str]]]</code> <p>Fields to sort by</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Paginated vendor search results</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.unlink_person","title":"<code>unlink_person(person_id)</code>","text":"<p>Unlink a person from its linked vendor.</p> <p>Parameters:</p> Name Type Description Default <code>person_id</code> <code>str</code> <p>UUID of the person</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated person data</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.update_person","title":"<code>update_person(person_id, person_data)</code>","text":"<p>Update person by id.</p> <p>Parameters:</p> Name Type Description Default <code>person_id</code> <code>str</code> <p>UUID of the person</p> required <code>person_data</code> <code>Dict[str, Any]</code> <p>Updated person data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated person data</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.update_vendor","title":"<code>update_vendor(vendor_id, vendor_data)</code>","text":"<p>Update vendor by id.</p> <p>Parameters:</p> Name Type Description Default <code>vendor_id</code> <code>str</code> <p>UUID of the vendor</p> required <code>vendor_data</code> <code>Dict[str, Any]</code> <p>Updated vendor data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated vendor data</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#rezen.directory.DirectoryClient.update_vendor_w9","title":"<code>update_vendor_w9(vendor_id, w9_file)</code>","text":"<p>Update a vendor's W9 file.</p> <p>Parameters:</p> Name Type Description Default <code>vendor_id</code> <code>str</code> <p>UUID of the vendor</p> required <code>w9_file</code> <code>BinaryIO</code> <p>W9 file to upload</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated vendor data</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/directory/#usage-examples","title":"Usage Examples","text":"<p>Directory Operations</p> Basic Contact SearchAdvanced Directory Search <pre><code>from rezen import DirectoryClient\n\ndirectory = DirectoryClient()\n\n# Search for contacts\ncontacts = directory.search_contacts(name=\"John Doe\")\n\nfor contact in contacts:\n    print(f\"Contact: {contact['name']} - {contact['email']}\")\n</code></pre> <pre><code># Advanced search with multiple criteria\nresults = directory.advanced_search(\n    name=\"Smith\",\n    location=\"California\",\n    agent_type=\"LISTING_AGENT\"\n)\n</code></pre>"},{"location":"api/directory/#directory-vs-main-api","title":"Directory vs Main API","text":"<p>API Differences</p> Feature Main API Directory API Endpoint Standard ReZEN API Specialized directory endpoint Client <code>RezenClient</code> <code>DirectoryClient</code> Purpose Transaction management Contact/agent discovery Authentication Same API key Same API key <p>Combined Usage</p> <p>You can use both clients together in your application:</p> <pre><code>from rezen import RezenClient, DirectoryClient\n\n# Main client for transactions\nclient = RezenClient()\n\n# Directory client for contact search\ndirectory = DirectoryClient()\n\n# Find contacts, then use in transactions\ncontacts = directory.search_contacts(name=\"John Doe\")\nif contacts:\n    # Use contact info in transaction builder\n    buyer_data = {\n        \"type\": \"BUYER\",\n        \"first_name\": contacts[0]['first_name'],\n        \"last_name\": contacts[0]['last_name'],\n        \"email\": contacts[0]['email']\n    }\n    # ... continue with transaction creation\n</code></pre>"},{"location":"api/directory/#best-practices","title":"Best Practices","text":"<p>Endpoint Considerations</p> <ul> <li>The Directory API uses a different base URL than the main API</li> <li>Ensure your API key has access to directory services</li> <li>Consider rate limiting for directory searches</li> </ul> <p>Production Usage</p> <pre><code>import logging\nfrom rezen import DirectoryClient\nfrom rezen.exceptions import RezenError\n\ndef safe_directory_search(name: str):\n    \"\"\"Safely search directory with error handling.\"\"\"\n    try:\n        directory = DirectoryClient()\n        results = directory.search_contacts(name=name)\n        return {\"success\": True, \"contacts\": results}\n    except RezenError as e:\n        logging.error(f\"Directory search failed: {e}\")\n        return {\"success\": False, \"error\": str(e)}\n</code></pre>"},{"location":"api/directory/#next-steps","title":"Next Steps","text":"<ul> <li> <p>\ud83d\udc54 Agents API</p> <p>Use agent data from directory in main API</p> </li> <li> <p>\ud83d\udd27 Transaction Builder</p> <p>Add directory contacts to transactions</p> </li> <li> <p>\ud83d\ude80 Getting Started</p> <p>Complete setup guide for ReZEN clients</p> </li> </ul>"},{"location":"api/documents/","title":"Documents API","text":"<p>Manage documents, digital signatures, and document workflows.</p>"},{"location":"api/documents/#overview","title":"Overview","text":"<p>Documents API Features</p> <ul> <li>Document Management: Upload and manage documents</li> <li>Digital Signatures: Send documents for electronic signature</li> <li>Workflow Tracking: Monitor document status and audit trails</li> <li>Template Support: Create documents from templates</li> <li>Bulk Operations: Handle multiple documents efficiently</li> </ul> <p>Alias Names</p> <p>This API is available as both <code>client.documents</code> and <code>client.signature</code> for backward compatibility.</p>"},{"location":"api/documents/#quick-start","title":"Quick Start","text":"<pre><code>from rezen import RezenClient\n\nclient = RezenClient()\n\n# Upload document for signature\nwith open(\"contract.pdf\", \"rb\") as file:\n    document = client.documents.post_document(\n        data={\n            \"title\": \"Purchase Agreement\",\n            \"signers\": [\n                {\"email\": \"buyer@example.com\", \"name\": \"John Buyer\"},\n                {\"email\": \"seller@example.com\", \"name\": \"Jane Seller\"}\n            ]\n        },\n        file=file\n    )\n\n# Send for signature\nresult = client.documents.send_document_for_signature(\n    document_id=document['id'],\n    data={\"message\": \"Please review and sign the purchase agreement\"}\n)\n</code></pre>"},{"location":"api/documents/#core-methods","title":"Core Methods","text":""},{"location":"api/documents/#upload-document","title":"Upload Document","text":"<p>Post document to signature API.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Document metadata including signers, fields, etc.</p> required <code>file</code> <code>Optional[BinaryIO]</code> <p>Document file to upload (optional)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing document creation response</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/documents/#get-document","title":"Get Document","text":"<p>Get document details.</p> <p>Parameters:</p> Name Type Description Default <code>document_id</code> <code>str</code> <p>The document ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing document details</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/documents/#send-for-signature","title":"Send for Signature","text":"<p>Send document for signature.</p> <p>Parameters:</p> Name Type Description Default <code>document_id</code> <code>str</code> <p>The document ID</p> required <code>data</code> <code>Dict[str, Any]</code> <p>Signature request data including signers</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing signature request response</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/documents/#get-document-status","title":"Get Document Status","text":"<p>Get document signature status.</p> <p>Parameters:</p> Name Type Description Default <code>document_id</code> <code>str</code> <p>The document ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing document status</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/documents/#cancel-signature-request","title":"Cancel Signature Request","text":"<p>Cancel signature request.</p> <p>Parameters:</p> Name Type Description Default <code>document_id</code> <code>str</code> <p>The document ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing cancellation response</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/documents/#document-operations","title":"Document Operations","text":"<p>Document Management</p> Upload DocumentCheck StatusSend Reminders <pre><code># Upload document with signers\nwith open(\"contract.pdf\", \"rb\") as file:\n    document = client.documents.post_document(\n        data={\n            \"title\": \"Sales Contract\",\n            \"description\": \"Property sales agreement\",\n            \"signers\": [\n                {\n                    \"email\": \"john@example.com\",\n                    \"name\": \"John Doe\",\n                    \"role\": \"buyer\"\n                },\n                {\n                    \"email\": \"jane@example.com\",\n                    \"name\": \"Jane Smith\",\n                    \"role\": \"seller\"\n                }\n            ],\n            \"fields\": [\n                {\n                    \"type\": \"signature\",\n                    \"page\": 1,\n                    \"x\": 100,\n                    \"y\": 200,\n                    \"signer\": \"john@example.com\"\n                },\n                {\n                    \"type\": \"date\",\n                    \"page\": 1,\n                    \"x\": 100,\n                    \"y\": 250,\n                    \"signer\": \"john@example.com\"\n                }\n            ]\n        },\n        file=file\n    )\n\n    print(f\"Document ID: {document['id']}\")\n</code></pre> <pre><code># Get document status\nstatus = client.documents.get_document_status(document_id)\n\nprint(f\"Status: {status['status']}\")\nprint(f\"Completed: {status['completed_count']}/{status['total_signers']}\")\n\nfor signer in status['signers']:\n    print(f\"- {signer['name']}: {signer['status']}\")\n</code></pre> <pre><code># Send reminder to specific signer\nfor signer in document['signers']:\n    if signer['status'] == 'pending':\n        client.documents.remind_signer(\n            document_id=document['id'],\n            signer_id=signer['id'],\n            message=\"Gentle reminder to sign the document\"\n        )\n        print(f\"Reminder sent to {signer['email']}\")\n</code></pre>"},{"location":"api/documents/#signature-workflow","title":"Signature Workflow","text":"<p>Signature Process</p> <ol> <li>Upload: Upload document with signer information</li> <li>Configure: Set signature fields and requirements</li> <li>Send: Send document for signature</li> <li>Track: Monitor signature progress</li> <li>Complete: Download signed document</li> </ol> <p>Complete Signature Workflow</p> <pre><code>from rezen import RezenClient\nimport time\n\ndef signature_workflow(file_path: str):\n    \"\"\"Complete document signature workflow.\"\"\"\n\n    client = RezenClient()\n\n    # Step 1: Upload document\n    with open(file_path, \"rb\") as file:\n        document = client.documents.post_document(\n            data={\n                \"title\": \"Contract Agreement\",\n                \"signers\": [\n                    {\n                        \"email\": \"signer1@example.com\",\n                        \"name\": \"First Signer\",\n                        \"order\": 1\n                    },\n                    {\n                        \"email\": \"signer2@example.com\",\n                        \"name\": \"Second Signer\",\n                        \"order\": 2\n                    }\n                ]\n            },\n            file=file\n        )\n\n    document_id = document['id']\n    print(f\"Document uploaded: {document_id}\")\n\n    # Step 2: Send for signature\n    client.documents.send_document_for_signature(\n        document_id=document_id,\n        data={\n            \"message\": \"Please sign this agreement\",\n            \"subject\": \"Contract Ready for Signature\"\n        }\n    )\n    print(\"Document sent for signature\")\n\n    # Step 3: Monitor progress\n    while True:\n        status = client.documents.get_document_status(document_id)\n\n        print(f\"\\nStatus: {status['status']}\")\n        print(f\"Signed: {status['completed_count']}/{status['total_signers']}\")\n\n        if status['status'] == 'completed':\n            break\n        elif status['status'] == 'cancelled':\n            print(\"Signature request was cancelled\")\n            return None\n\n        time.sleep(60)  # Check every minute\n\n    # Step 4: Download signed document\n    download = client.documents.download_document(document_id)\n    print(f\"\\nSigned document available at: {download['url']}\")\n\n    # Step 5: Get audit trail\n    audit = client.documents.get_audit_trail(document_id)\n    print(\"\\nAudit Trail:\")\n    for event in audit['events']:\n        print(f\"- {event['timestamp']}: {event['action']} by {event['user']}\")\n\n    return document_id\n</code></pre>"},{"location":"api/documents/#template-management","title":"Template Management","text":""},{"location":"api/documents/#get-templates","title":"Get Templates","text":"<p>Get available document templates.</p> <p>Parameters:</p> Name Type Description Default <code>page_number</code> <code>int</code> <p>Page number for pagination</p> <code>0</code> <code>page_size</code> <code>int</code> <p>Page size for pagination</p> <code>20</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing document templates</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/documents/#create-from-template","title":"Create from Template","text":"<p>Create document from template.</p> <p>Parameters:</p> Name Type Description Default <code>template_id</code> <code>str</code> <p>The template ID</p> required <code>data</code> <code>Dict[str, Any]</code> <p>Document creation data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing created document</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Using Templates</p> <pre><code># Get available templates\ntemplates = client.documents.get_document_templates(page_size=50)\n\nfor template in templates['templates']:\n    print(f\"Template: {template['name']}\")\n    print(f\"  Type: {template['document_type']}\")\n    print(f\"  Fields: {len(template['fields'])}\")\n\n# Create document from template\ndocument = client.documents.create_document_from_template(\n    template_id=\"template-001\",\n    data={\n        \"title\": \"New Purchase Agreement\",\n        \"signers\": [\n            {\"email\": \"buyer@example.com\", \"name\": \"Buyer Name\"},\n            {\"email\": \"seller@example.com\", \"name\": \"Seller Name\"}\n        ],\n        \"field_values\": {\n            \"property_address\": \"123 Main St\",\n            \"purchase_price\": \"$500,000\",\n            \"closing_date\": \"2024-03-15\"\n        }\n    }\n)\n\nprint(f\"Created document from template: {document['id']}\")\n</code></pre>"},{"location":"api/documents/#bulk-operations","title":"Bulk Operations","text":""},{"location":"api/documents/#bulk-send","title":"Bulk Send","text":"<p>Bulk send multiple documents for signature.</p> <p>Parameters:</p> Name Type Description Default <code>documents</code> <code>List[Dict[str, Any]]</code> <p>List of document data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing bulk send response</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Bulk Document Sending</p> <pre><code># Prepare multiple documents\ndocuments = [\n    {\n        \"template_id\": \"disclosure-template\",\n        \"title\": \"Disclosure Form - Unit 101\",\n        \"signers\": [{\"email\": \"tenant101@example.com\", \"name\": \"Tenant 101\"}]\n    },\n    {\n        \"template_id\": \"disclosure-template\",\n        \"title\": \"Disclosure Form - Unit 102\",\n        \"signers\": [{\"email\": \"tenant102@example.com\", \"name\": \"Tenant 102\"}]\n    },\n    {\n        \"template_id\": \"disclosure-template\",\n        \"title\": \"Disclosure Form - Unit 103\",\n        \"signers\": [{\"email\": \"tenant103@example.com\", \"name\": \"Tenant 103\"}]\n    }\n]\n\n# Send all documents at once\nresult = client.documents.bulk_send_documents(documents)\n\nprint(f\"Sent {len(result['sent'])} documents\")\nprint(f\"Failed: {len(result['failed'])}\")\n\nfor doc in result['sent']:\n    print(f\"\u2713 Sent: {doc['title']} (ID: {doc['id']})\")\n\nfor error in result['failed']:\n    print(f\"\u2717 Failed: {error['title']} - {error['error']}\")\n</code></pre>"},{"location":"api/documents/#signer-management","title":"Signer Management","text":""},{"location":"api/documents/#get-signer-link","title":"Get Signer Link","text":"<p>Get signing link for specific signer.</p> <p>Parameters:</p> Name Type Description Default <code>document_id</code> <code>str</code> <p>The document ID</p> required <code>signer_id</code> <code>str</code> <p>The signer ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing signing link</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/documents/#send-reminder","title":"Send Reminder","text":"<p>Send reminder to signer.</p> <p>Parameters:</p> Name Type Description Default <code>document_id</code> <code>str</code> <p>The document ID</p> required <code>signer_id</code> <code>str</code> <p>The signer ID</p> required <code>message</code> <code>Optional[str]</code> <p>Optional reminder message</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing reminder response</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Managing Signers</p> <pre><code># Get signing links for all signers\ndocument = client.documents.get_document(document_id)\n\nfor signer in document['signers']:\n    if signer['status'] == 'pending':\n        # Get unique signing link\n        link = client.documents.get_signer_link(\n            document_id=document_id,\n            signer_id=signer['id']\n        )\n\n        print(f\"Signing link for {signer['name']}: {link['url']}\")\n\n        # Send reminder if needed\n        client.documents.remind_signer(\n            document_id=document_id,\n            signer_id=signer['id'],\n            message=\"Please sign at your earliest convenience\"\n        )\n</code></pre>"},{"location":"api/documents/#audit-compliance","title":"Audit &amp; Compliance","text":""},{"location":"api/documents/#get-audit-trail","title":"Get Audit Trail","text":"<p>Get document audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>document_id</code> <code>str</code> <p>The document ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing audit trail</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p>"},{"location":"api/documents/#download-document","title":"Download Document","text":"<p>Get download URL for document.</p> <p>Parameters:</p> Name Type Description Default <code>document_id</code> <code>str</code> <p>The document ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict containing download URL</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> <p>Compliance Tracking</p> <pre><code># Get complete audit trail\naudit = client.documents.get_audit_trail(document_id)\n\nprint(\"Document Audit Trail:\")\nprint(f\"Document: {audit['document_title']}\")\nprint(f\"Created: {audit['created_at']}\")\nprint(f\"Status: {audit['status']}\")\n\nprint(\"\\nEvents:\")\nfor event in audit['events']:\n    print(f\"{event['timestamp']} - {event['action']}\")\n    print(f\"  By: {event['user_email']}\")\n    print(f\"  IP: {event['ip_address']}\")\n\n# Download for records\nif audit['status'] == 'completed':\n    download = client.documents.download_document(document_id)\n    print(f\"\\nDownload URL: {download['url']}\")\n    print(f\"Expires: {download['expires_at']}\")\n</code></pre>"},{"location":"api/documents/#error-handling","title":"Error Handling","text":"<p>Common Errors</p> <ul> <li>Invalid Signers: Ensure all signer emails are valid</li> <li>Missing Fields: Check required document fields</li> <li>Template Errors: Verify template ID exists</li> <li>File Size: Maximum file size is typically 25MB</li> </ul> <p>Error Handling</p> <pre><code>from rezen.exceptions import ValidationError, NotFoundError\n\ntry:\n    # Attempt to send document\n    document = client.documents.post_document(data=document_data, file=file)\n\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n    print(f\"Invalid fields: {e.invalid_fields}\")\n\nexcept NotFoundError as e:\n    print(f\"Document or template not found: {e}\")\n\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"api/documents/#next-steps","title":"Next Steps","text":"<ul> <li> <p>\u2611\ufe0f Checklist API</p> <p>Manage transaction checklists</p> </li> <li> <p>\ud83d\udd04 Transactions API</p> <p>Work with transaction documents</p> </li> <li> <p>\ud83d\udd27 Transaction Builder</p> <p>Create transactions with documents</p> </li> </ul>"},{"location":"api/teams/","title":"Teams API","text":"<p>Search and manage team information with comprehensive filtering and sorting capabilities.</p>"},{"location":"api/teams/#overview","title":"Overview","text":"<p>Teams API Capabilities</p> <ul> <li>Search Teams: Find teams with advanced filtering options</li> <li>Team Details: Get comprehensive team information including members</li> <li>Flexible Sorting: Sort results by various criteria</li> <li>Pagination: Handle large result sets efficiently</li> <li>Member Management: Access team member details</li> </ul>"},{"location":"api/teams/#quick-start","title":"Quick Start","text":"<pre><code>from rezen import RezenClient\nfrom rezen.enums import TeamStatus, SortDirection\n\nclient = RezenClient()\n\n# Simple team search\nteams = client.teams.search_teams(status=\"ACTIVE\", page_size=10)\n\n# Get team with full details\nteam = client.teams.get_team(\"team-uuid\")\n\n# Get team members\nmembers = client.teams.get_team_members(\"team-uuid\")\n\n# Advanced search with enums\nteams = client.teams.search_teams(\n    status=TeamStatus.ACTIVE,\n    sort_direction=SortDirection.DESC,\n    page_size=50\n)\n</code></pre>"},{"location":"api/teams/#api-methods","title":"API Methods","text":""},{"location":"api/teams/#search-teams","title":"Search Teams","text":"<p>Search teams given a set of criteria.</p> <p>Parameters:</p> Name Type Description Default <code>page_number</code> <code>Optional[int]</code> <p>Page number for pagination (default: 0)</p> <code>None</code> <code>page_size</code> <code>Optional[int]</code> <p>Number of results per page (default: 20, min: 1)</p> <code>None</code> <code>sort_direction</code> <code>Optional[Union[SortDirection, str]]</code> <p>Sort direction (ASC or DESC, default: ASC)</p> <code>None</code> <code>sort_by</code> <code>Optional[Union[List[Union[TeamSortField, str]], Union[TeamSortField, str]]]</code> <p>Fields to sort by (default: [\"NAME\"])</p> <code>None</code> <code>team_id</code> <code>Optional[str]</code> <p>Filter by team UUID</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Filter by team name</p> <code>None</code> <code>search_text</code> <code>Optional[str]</code> <p>General search text</p> <code>None</code> <code>status</code> <code>Optional[Union[TeamStatus, str]]</code> <p>Filter by team status (ACTIVE or INACTIVE)</p> <code>None</code> <code>created_at_start</code> <code>Optional[Union[date, str]]</code> <p>Filter by creation date start (YYYY-MM-DD format)</p> <code>None</code> <code>created_at_end</code> <code>Optional[Union[date, str]]</code> <p>Filter by creation date end (YYYY-MM-DD format)</p> <code>None</code> <code>team_type</code> <code>Optional[Union[TeamType, str]]</code> <p>Filter by team type (NORMAL, PLATINUM, GROUP, DOMESTIC, PRO)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing team search results with pagination information</p> Example <pre><code># Search for active teams\nteams = client.teams.search_teams(\n    status=TeamStatus.ACTIVE,\n    team_type=TeamType.PLATINUM,\n    page_size=50\n)\n\n# Search by name\nteams = client.teams.search_teams(\n    name=\"Sales Team\",\n    sort_by=[SortField.NAME, SortField.CREATED_AT],\n    sort_direction=SortDirection.DESC\n)\n\n# Search with text query\nteams = client.teams.search_teams(\n    search_text=\"marketing\",\n    page_number=2\n)\n</code></pre> <p>Search Examples</p> Basic SearchAdvanced Filtering <pre><code>teams = client.teams.search_teams(\n    status=\"ACTIVE\",\n    page_size=20\n)\n</code></pre> <pre><code>from rezen.enums import TeamStatus, TeamSortField, SortDirection\n\nteams = client.teams.search_teams(\n    status=TeamStatus.ACTIVE,\n    name=\"Sales Team\",\n    sort_by=[TeamSortField.NAME, TeamSortField.CREATED_AT],\n    sort_direction=SortDirection.ASC,\n    page_size=50\n)\n</code></pre>"},{"location":"api/teams/#get-team-details","title":"Get Team Details","text":"<p>Get team by ID without agents information.</p> <p>Parameters:</p> Name Type Description Default <code>team_id</code> <code>str</code> <p>UUID of the team to retrieve</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing team details without agent information</p> Example <pre><code>team = client.teams.get_team_without_agents(\"550e8400-e29b-41d4-a716-446655440000\")\nprint(f\"Team name: {team['name']}\")\nprint(f\"Team status: {team['status']}\")\n</code></pre> <p>Get team by ID with full information including agents.</p> <p>Parameters:</p> Name Type Description Default <code>team_id</code> <code>str</code> <p>UUID of the team to retrieve</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing full team details including agent information</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> Example <pre><code>team = client.teams.get_team(\"550e8400-e29b-41d4-a716-446655440000\")\nprint(f\"Team name: {team['name']}\")\nprint(f\"Team members: {len(team.get('agents', []))}\")\n</code></pre> <p>Team Details Methods</p> <ul> <li>Use <code>get_team_without_agents()</code> for basic team information without member details</li> <li>Use <code>get_team()</code> for full team information including all agents/members</li> </ul>"},{"location":"api/teams/#get-team-members","title":"Get Team Members","text":"<p>Get team members for a specific team.</p> <p>Parameters:</p> Name Type Description Default <code>team_id</code> <code>str</code> <p>UUID of the team to retrieve members for</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing team members information</p> <p>Raises:</p> Type Description <code>RezenError</code> <p>If the API request fails</p> Example <pre><code>members = client.teams.get_team_members(\"550e8400-e29b-41d4-a716-446655440000\")\nfor member in members.get('members', []):\n    print(f\"Member: {member['name']} - {member['role']}\")\n</code></pre> <p>Team Member Examples</p> Get All MembersGet Full Team Info <pre><code># Get team members\nteam_id = \"550e8400-e29b-41d4-a716-446655440000\"\nmembers = client.teams.get_team_members(team_id)\n\nprint(f\"Team has {len(members.get('members', []))} members\")\nfor member in members.get('members', []):\n    print(f\"Member: {member['name']} - Role: {member['role']}\")\n</code></pre> <pre><code># Get complete team information with agents\nteam = client.teams.get_team(team_id)\n\nprint(f\"Team: {team['name']}\")\nprint(f\"Status: {team['status']}\")\nprint(f\"Type: {team['team_type']}\")\nprint(f\"Total agents: {len(team.get('agents', []))}\")\n\n# Process team agents\nfor agent in team.get('agents', []):\n    print(f\"Agent: {agent['first_name']} {agent['last_name']}\")\n</code></pre>"},{"location":"api/teams/#parameters-reference","title":"Parameters Reference","text":""},{"location":"api/teams/#search-parameters","title":"Search Parameters","text":"Parameter Type Description <code>page_number</code> <code>Optional[int]</code> Page number (default: 0) <code>page_size</code> <code>Optional[int]</code> Results per page (default: 20) <code>sort_direction</code> <code>Optional[SortDirection]</code> ASC or DESC <code>sort_by</code> <code>Optional[List[TeamSortField]]</code> Fields to sort by <code>team_id</code> <code>Optional[str]</code> Filter by team UUID <code>name</code> <code>Optional[str]</code> Filter by team name <code>search_text</code> <code>Optional[str]</code> General search text <code>status</code> <code>Optional[TeamStatus]</code> ACTIVE or INACTIVE <code>created_at_start</code> <code>Optional[str]</code> Date filter start (YYYY-MM-DD) <code>created_at_end</code> <code>Optional[str]</code> Date filter end (YYYY-MM-DD) <code>team_type</code> <code>Optional[TeamType]</code> Team type filter"},{"location":"api/teams/#complete-examples","title":"Complete Examples","text":"<p>Comprehensive Team Management</p> <pre><code>from rezen import RezenClient\nfrom rezen.enums import TeamStatus, TeamType, SortDirection, TeamSortField\n\ndef comprehensive_team_management():\n    client = RezenClient()\n\n    # Search for active teams\n    teams = client.teams.search_teams(\n        status=TeamStatus.ACTIVE,\n        team_type=TeamType.PLATINUM,\n        sort_by=[TeamSortField.NAME, TeamSortField.CREATED_AT],\n        sort_direction=SortDirection.DESC,\n        page_size=25,\n        created_at_start=\"2024-01-01\",\n        created_at_end=\"2024-12-31\"\n    )\n\n    print(f\"Found {len(teams)} teams\")\n\n    # Get detailed information for each team\n    for team_summary in teams[:5]:  # Process first 5 teams\n        team_id = team_summary['id']\n\n        # Get full team details\n        full_team = client.teams.get_team(team_id)\n        print(f\"\\nTeam: {full_team['name']}\")\n        print(f\"Status: {full_team['status']}\")\n        print(f\"Type: {full_team['team_type']}\")\n\n        # Get team members\n        members = client.teams.get_team_members(team_id)\n        print(f\"Members: {len(members.get('members', []))}\")\n\n        # List member details\n        for member in members.get('members', [])[:3]:  # Show first 3 members\n            print(f\"  - {member['name']} ({member['role']})\")\n\n    return teams\n</code></pre>"},{"location":"api/teams/#team-types-and-statuses","title":"Team Types and Statuses","text":"<p>Team Types</p> Type Description <code>NORMAL</code> Standard team <code>PLATINUM</code> Platinum-level team <code>GROUP</code> Group team <code>DOMESTIC</code> Domestic team <code>PRO</code> Professional team <p>Team Statuses</p> Status Description <code>ACTIVE</code> Team is currently active <code>INACTIVE</code> Team is inactive/archived"},{"location":"api/teams/#next-steps","title":"Next Steps","text":"<ul> <li> <p>\ud83d\udc54 Agents API</p> <p>Search and manage agent information</p> </li> <li> <p>\ud83d\udd27 Transaction Builder</p> <p>Create transactions with team members</p> </li> <li> <p>\ud83d\udcdd Data Types</p> <p>Learn about team-related enums and types</p> </li> </ul>"},{"location":"api/transaction-builder/","title":"Transaction Builder API","text":"<p>Create and manage transaction builders with full participant and property management capabilities.</p>"},{"location":"api/transaction-builder/#overview","title":"Overview","text":"<p>Transaction Builder Workflow</p> <p>The Transaction Builder API allows you to:</p> <ul> <li>Create new transaction builders for various types of real estate transactions</li> <li>Configure property details, participants, and financial information</li> <li>Manage buyers, sellers, agents, and other transaction participants</li> <li>Submit completed transactions for processing</li> <li>Convert listings to transactions</li> <li>Backward Compatibility with legacy method names</li> </ul> <p>\ud83d\udea8 CRITICAL API REQUIREMENTS</p> <p>These requirements are MANDATORY for successful API calls:</p> <p>Location Updates: - Basic address fields (street, city, state, zip) alone will FAIL - Additional fields are REQUIRED: <code>county</code>, <code>yearBuilt</code>, <code>mlsNumber</code></p> <p>Price/Date Updates: - Basic price fields alone will FAIL - BOTH commission objects are REQUIRED: <code>listingCommission</code> AND <code>saleCommission</code></p> <p>Co-Agent Roles: - \u2705 Working: <code>\"REAL\"</code>, <code>\"BUYERS_AGENT\"</code>, <code>\"SELLERS_AGENT\"</code> - \u274c Fails: <code>\"LISTING_AGENT\"</code></p> <p>Owner Agents: - Require specific sequence: location \u2192 price/date \u2192 participants \u2192 owner agent - Need valid <code>officeId</code> and <code>teamId</code></p>"},{"location":"api/transaction-builder/#quick-start","title":"Quick Start","text":"\ud83d\ude80 Basic Transaction\ud83c\udfe0 Listing Builder\ud83d\udd04 Convert Listing <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Step 1: Create transaction builder\ntransaction_id: str = client.transaction_builder.create_transaction_builder()\n\n# Step 2: Add property information - CRITICAL REQUIREMENTS\n# \u26a0\ufe0f Additional fields beyond basic address are REQUIRED\nlocation_data: Dict[str, Any] = {\n    \"street\": \"123 Main Street\",  # Use 'street' not 'address'\n    \"city\": \"Salt Lake City\",\n    \"state\": \"UTAH\",  # MUST BE ALL CAPS\n    \"zip\": \"84101\",   # Use 'zip' not 'zipCode'\n    \"county\": \"Salt Lake\",      # REQUIRED - API fails without this\n    \"yearBuilt\": 2020,         # REQUIRED - API fails without this\n    \"mlsNumber\": \"MLS123456\"   # REQUIRED - API fails without this\n}\nclient.transaction_builder.update_location_info(transaction_id, location_data)\n\n# Step 3: Add price/date information - CRITICAL REQUIREMENTS\n# \u26a0\ufe0f BOTH commission objects are REQUIRED together\nprice_data: Dict[str, Any] = {\n    \"dealType\": \"COMPENSATING\",\n    \"propertyType\": \"RESIDENTIAL\",\n    \"salePrice\": {\"amount\": 500000, \"currency\": \"USD\"},\n    \"representationType\": \"BUYER\",\n    \"listingCommission\": {     # REQUIRED - cannot omit\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    },\n    \"saleCommission\": {        # REQUIRED - cannot omit\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    }\n}\nclient.transaction_builder.update_price_and_date_info(transaction_id, price_data)\n\n# Step 4: Add participants (use camelCase)\nbuyer_data: Dict[str, Any] = {\n    \"firstName\": \"John\",  # Use camelCase\n    \"lastName\": \"Doe\",    # Use camelCase\n    \"email\": \"john.doe@email.com\",\n    \"phoneNumber\": \"(555) 123-4567\"  # Use camelCase\n}\nclient.transaction_builder.add_buyer(transaction_id, buyer_data)\n\n# Step 5: Add co-agent (working roles only)\nco_agent_data: Dict[str, Any] = {\n    \"agentId\": \"bd465129-b224-43e3-b92f-524ea5f53783\",\n    \"role\": \"REAL\",  # \u2705 Working role\n    \"receivesInvoice\": False\n}\nclient.transaction_builder.add_co_agent(transaction_id, co_agent_data)\n\n# Step 6: Submit transaction\nclient.transaction_builder.submit_transaction(transaction_id)\n</code></pre> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Create listing builder using dedicated method\nlisting_id: str = client.transaction_builder.create_listing_builder()\n\n# Configure listing-specific details (use camelCase)\nseller_data: Dict[str, Any] = {\n    \"firstName\": \"Jane\",      # Use camelCase\n    \"lastName\": \"Smith\",      # Use camelCase\n    \"email\": \"jane.smith@email.com\",\n    \"phoneNumber\": \"(555) 987-6543\"  # Use camelCase\n}\nclient.transaction_builder.add_seller(listing_id, seller_data)\n</code></pre> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Convert existing listing to transaction\nlisting_id: str = \"existing-listing-id\"\nresponse: Dict[str, Any] = client.transaction_builder.convert_listing_to_transaction(listing_id)\ntransaction_id: str = response['id']\nprint(f\"Converted listing {listing_id} to transaction {transaction_id}\")\n</code></pre>"},{"location":"api/transaction-builder/#core-transaction-management","title":"Core Transaction Management","text":""},{"location":"api/transaction-builder/#create-transaction-builder","title":"Create Transaction Builder","text":"<p>Create empty transaction builder.</p> <p>This is the starting point for creating a new transaction. After creation, you'll receive a transaction ID that you'll use for all subsequent operations.</p> <p>\u26a0\ufe0f CRITICAL: Follow the recommended workflow for successful transaction creation. Many endpoints require specific data to be present before they will work.</p> Recommended Workflow <ol> <li>Create transaction builder (this method)</li> <li>Add location info (update_location_info) - REQUIRES additional fields</li> <li>Add price/date info (update_price_and_date_info) - REQUIRES commission objects</li> <li>Add buyers/sellers (add_buyer/add_seller) - Works after location data</li> <li>Add co-agents (add_co_agent) - Works with specific roles</li> <li>Add owner agent (update_owner_agent_info) - Requires complete setup + office/team IDs</li> </ol> Successful Working Example <pre><code># Complete working sequence with co-agent\nclient = RezenClient()\n\n# 1. Create transaction\ntransaction_id = client.transaction_builder.create_transaction_builder()\n\n# 2. Add location (with required additional fields)\nlocation_data = {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Salt Lake City\",\n    \"state\": \"UTAH\",\n    \"zip\": \"84101\",\n    \"county\": \"Salt Lake\",      # REQUIRED\n    \"yearBuilt\": 2020,         # REQUIRED\n    \"mlsNumber\": \"MLS123456\"   # REQUIRED\n}\nclient.transaction_builder.update_location_info(transaction_id, location_data)\n\n# 3. Add price/date (with both commission objects)\nprice_data = {\n    \"dealType\": \"COMPENSATING\",\n    \"propertyType\": \"RESIDENTIAL\",\n    \"salePrice\": {\"amount\": 550000, \"currency\": \"USD\"},\n    \"representationType\": \"BUYER\",\n    \"listingCommission\": {     # REQUIRED\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    },\n    \"saleCommission\": {        # REQUIRED\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    }\n}\nclient.transaction_builder.update_price_and_date_info(transaction_id, price_data)\n\n# 4. Add participants\nclient.transaction_builder.add_buyer(transaction_id, {\n    \"firstName\": \"John\",\n    \"lastName\": \"Buyer\",\n    \"email\": \"john@example.com\",\n    \"phoneNumber\": \"(801) 555-1234\"\n})\n\n# 5. Add co-agent (this works immediately)\nco_agent_info = {\n    \"agentId\": \"bd465129-b224-43e3-b92f-524ea5f53783\",\n    \"role\": \"REAL\",\n    \"receivesInvoice\": False\n}\nclient.transaction_builder.add_co_agent(transaction_id, co_agent_info)\n\n# Result: Complete working transaction with co-agent\nprint(f\"\u2705 Successfully created transaction {transaction_id} with co-agent\")\n</code></pre> Builder Types <ul> <li>\"TRANSACTION\": Standard real estate transaction</li> <li>\"LISTING\": Property listing</li> </ul> <p>Parameters:</p> Name Type Description Default <code>builder_type</code> <code>str</code> <p>Type of builder to create (\"TRANSACTION\" or \"LISTING\")</p> <code>'TRANSACTION'</code> <p>Returns:</p> Type Description <code>str</code> <p>Transaction builder ID as string</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If builder_type is invalid</p> <code>RezenError</code> <p>If transaction creation fails</p> <p>Consistent Response Format</p> <p>The method now returns a consistent <code>{\"id\": \"transaction_id\"}</code> format instead of a raw string.</p>"},{"location":"api/transaction-builder/#create-listing-builder","title":"Create Listing Builder","text":"<p>Create a listing builder (wrapper for create_transaction_builder).</p> <p>Returns:</p> Type Description <code>str</code> <p>Listing builder ID</p> <p>Convenience Method</p> <p>This is a wrapper around <code>create_transaction_builder(builder_type='LISTING')</code> for easier listing creation.</p>"},{"location":"api/transaction-builder/#convert-listing-to-transaction","title":"Convert Listing to Transaction","text":"<p>Convert a listing to a transaction (wrapper for create_builder_from_transaction).</p> <p>Parameters:</p> Name Type Description Default <code>listing_id</code> <code>str</code> <p>Listing ID to convert</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data</p> <p>Create Different Builder Types</p> Transaction BuilderListing BuilderConvert Existing Listing <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Standard transaction builder\nresponse: Dict[str, Any] = client.transaction_builder.create_transaction_builder()\nprint(f\"Transaction ID: {response['id']}\")\n</code></pre> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Using dedicated listing builder method\nresponse: Dict[str, Any] = client.transaction_builder.create_listing_builder()\nprint(f\"Listing ID: {response['id']}\")\n</code></pre> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Convert listing to transaction\nlisting_id = \"existing-listing-id\"\nresponse: Dict[str, Any] = client.transaction_builder.convert_listing_to_transaction(listing_id)\nprint(f\"New transaction ID: {response['id']}\")\n</code></pre>"},{"location":"api/transaction-builder/#get-transaction-builder","title":"Get Transaction Builder","text":"<p>Get a specific transaction builder by ID.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder data</p> <p>Response Structure</p> <p>The transaction builder response includes:</p> <ul> <li>Basic Information: ID, type, status, creation date</li> <li>Participants: All buyers, sellers, agents, and other participants</li> <li>Property Details: Location, pricing, and property information</li> <li>Financial Data: Commission splits and payment information</li> </ul>"},{"location":"api/transaction-builder/#submit-transaction","title":"Submit Transaction","text":"<p>Submit a transaction builder to create a transaction.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction preview response data</p> <p>Submission Requirements</p> <p>Before submitting, ensure:</p> <ul> <li> At least one participant is added</li> <li> Property location is specified</li> <li> Required financial information is complete</li> <li> All mandatory fields are populated</li> </ul>"},{"location":"api/transaction-builder/#delete-transaction-builder","title":"Delete Transaction Builder","text":"<p>Delete transaction builder.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Deletion response data</p> <p>Deletion Warning</p> <p>This operation is irreversible. Ensure you have backups of any critical data before deletion.</p>"},{"location":"api/transaction-builder/#participant-management","title":"Participant Management","text":""},{"location":"api/transaction-builder/#buyers","title":"Buyers","text":"\u2795\ud83d\udc64 Add Buyer <p>Add a new buyer.</p> <p>Important: Use camelCase for field names: - firstName (not first_name) - lastName (not last_name) - phoneNumber (not phone_number)</p> Example <p>buyer_info = {     \"firstName\": \"John\",     \"lastName\": \"Doe\",     \"email\": \"john.doe@example.com\",     \"phoneNumber\": \"(555) 123-4567\" }</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>buyer_info</code> <code>Dict[str, Any]</code> <p>Buyer information data with camelCase fields</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data</p> <p>Required Buyer Fields:</p> Field Type Description <code>firstName</code> <code>str</code> Buyer's first name (camelCase) <code>lastName</code> <code>str</code> Buyer's last name (camelCase) <code>email</code> <code>str</code> Valid email address <p>Optional Buyer Fields:</p> Field Type Description <code>phoneNumber</code> <code>str</code> Phone number (camelCase) <code>company</code> <code>str</code> Company name <code>address</code> <code>str</code> Mailing address <p>Complete Buyer Example</p> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\nbuyer_data: Dict[str, Any] = {\n    \"firstName\": \"John\",  # Use camelCase\n    \"lastName\": \"Doe\",  # Use camelCase\n    \"email\": \"john.doe@email.com\",\n    \"phoneNumber\": \"+1-555-123-4567\",  # Use camelCase\n    \"company\": \"Doe Enterprises\",\n    \"address\": \"456 Business Ave, Business City, BC 12345\"\n}\n\n# Using new method name\nresponse: Dict[str, Any] = client.transaction_builder.add_buyer(transaction_id, buyer_data)\n\n# Or using backward compatibility alias\nresponse: Dict[str, Any] = client.transaction_builder.put_buyer_to_draft(transaction_id, buyer_data)\n</code></pre>"},{"location":"api/transaction-builder/#sellers","title":"Sellers","text":"\u2796\ud83d\udc64 Add Seller <p>Add a new seller to a transaction builder.</p> <p>Important: Use camelCase for field names: - firstName (not first_name) - lastName (not last_name) - phoneNumber (not phone_number)</p> Example <p>seller_info = {     \"firstName\": \"Jane\",     \"lastName\": \"Smith\",     \"email\": \"jane.smith@example.com\",     \"phoneNumber\": \"(555) 987-6543\" }</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>seller_info</code> <code>Dict[str, Any]</code> <p>Seller information data with camelCase fields</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data</p> <p>Seller Configuration</p> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\nseller_data: Dict[str, Any] = {\n    \"firstName\": \"Jane\",  # Use camelCase\n    \"lastName\": \"Smith\",  # Use camelCase\n    \"email\": \"jane.smith@email.com\",\n    \"phoneNumber\": \"+1-555-987-6543\"  # Use camelCase\n}\n\n# Using new method name\nresponse: Dict[str, Any] = client.transaction_builder.add_seller(transaction_id, seller_data)\n\n# Or using backward compatibility alias\nresponse: Dict[str, Any] = client.transaction_builder.put_seller_to_draft(transaction_id, seller_data)\n</code></pre>"},{"location":"api/transaction-builder/#agents-co-agents","title":"Agents &amp; Co-Agents","text":"\ud83d\udc54 Add Co-Agent <p>Add a new co-agent to the transaction.</p> <p>Co-agents can be added at any time after transaction creation, unlike owner agents which require a specific sequence. The co-agent will appear in the transaction's agentsInfo.coAgents array.</p> <p>\u26a0\ufe0f ROLE LIMITATIONS \u26a0\ufe0f Based on testing, only certain roles work with co-agents:</p> <p>\u2705 WORKING ROLES:     - \"REAL\" - Always works (may display differently based on representationType)     - \"BUYERS_AGENT\" - Works on transactions with location data     - \"SELLERS_AGENT\" - Works on transactions with location data</p> <p>\u274c NON-WORKING ROLES:     - \"LISTING_AGENT\" - Fails with \"Bad request: Invalid request\"</p> Required Fields <ul> <li>agentId (str): UUID of the co-agent (must be a valid agent ID)</li> <li>role (str): Agent role - use one of the working roles above</li> <li>receivesInvoice (bool): Whether the co-agent receives invoice</li> </ul> Optional Fields <ul> <li>opCityReferral (bool): Whether this is an OpCity referral (default: False)</li> <li>optedInForEcp (bool): Whether opted in for ECP (default: False)</li> </ul> Note on Role Display <p>The role field accepts \"REAL\" but may be displayed differently in the response based on the transaction's representationType. For example, if representationType is \"BUYER\", a co-agent with role \"REAL\" may appear as \"BUYERS_AGENT\" in the response.</p> Working Examples <pre><code># \u2705 Co-agent with REAL role (always works)\nco_agent_info = {\n    \"agentId\": \"bd465129-b224-43e3-b92f-524ea5f53783\",\n    \"role\": \"REAL\",\n    \"receivesInvoice\": False,\n    \"opCityReferral\": False,\n    \"optedInForEcp\": False\n}\nresult = client.add_co_agent(transaction_id, co_agent_info)\n\n# \u2705 Co-agent with BUYERS_AGENT role (works with location data)\nco_agent_info = {\n    \"agentId\": \"bd465129-b224-43e3-b92f-524ea5f53783\",\n    \"role\": \"BUYERS_AGENT\",\n    \"receivesInvoice\": False\n}\nresult = client.add_co_agent(transaction_id, co_agent_info)\n\n# \u274c This FAILS (LISTING_AGENT role not supported)\nco_agent_info = {\n    \"agentId\": \"bd465129-b224-43e3-b92f-524ea5f53783\",\n    \"role\": \"LISTING_AGENT\",  # This role fails\n    \"receivesInvoice\": False\n}\n# Will return \"Bad request: Invalid request\"\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>co_agent_info</code> <code>Dict[str, Any]</code> <p>Co-agent information data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data with updated co-agents list</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If role is not supported or agent ID is invalid</p> <p>Agent Roles:</p> <p>Available Agent Roles</p> <ul> <li><code>BUYERS_AGENT</code>: Represents the buyer</li> <li><code>SELLERS_AGENT</code>: Represents the seller</li> <li><code>LISTING_AGENT</code>: Lists the property</li> <li><code>DUAL_AGENT</code>: Represents both parties</li> </ul> <p>Co-Agent Examples</p> Buyer's AgentSeller's Agent <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\nco_agent_data: Dict[str, Any] = {\n    \"agent_id\": \"agent-uuid-here\",\n    \"role\": \"BUYERS_AGENT\"\n}\nclient.transaction_builder.add_co_agent(transaction_id, co_agent_data)\n</code></pre> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\nco_agent_data: Dict[str, Any] = {\n    \"agent_id\": \"seller-agent-uuid\",\n    \"role\": \"SELLERS_AGENT\"\n}\nclient.transaction_builder.add_co_agent(transaction_id, co_agent_data)\n</code></pre>"},{"location":"api/transaction-builder/#owner-agents","title":"Owner Agents","text":"\u2b50\ud83d\udc64 Update Owner Agent <p>Update owner agent information for the transaction.</p> <p>\u2705 WORKING SOLUTION \u2705 This method now works correctly when called in the proper sequence.</p> <p>\ud83d\udd04 REQUIRED SEQUENCE: 1. Create transaction (create_transaction_builder) 2. Add location info with ALL required fields (update_location_info) 3. Add price/date info with commission objects (update_price_and_date_info) 4. Add buyers/sellers (add_buyer/add_seller) 5. THEN add owner agent (this method) - \u2705 WORKS!</p> <p>\ud83d\udccb COMPLETE DATA REQUIREMENTS:</p> Location Info Must Include <ul> <li>street, city, state, zip (basic)</li> <li>county: Required additional field</li> <li>yearBuilt: Required additional field</li> <li>mlsNumber: Required additional field</li> </ul> <p>Price/Date Info Must Include:     - dealType, propertyType, salePrice, representationType (basic)     - listingCommission: Required commission object     - saleCommission: Required commission object</p> Owner Agent Data Structure <p>owner_agent_info = {     \"ownerAgent\": {         \"agentId\": str,  # User ID (same as agent ID in ReZEN)         \"role\": str      # \"BUYERS_AGENT\" or \"SELLERS_AGENT\"     },     \"officeId\": str,     # From user.offices[0].id     \"teamId\": str        # UUID of the team }</p> <p>\ud83c\udfaf GETTING THE RIGHT IDS:     - agentId: Use current user's ID (user[\"id\"] from get_current_user())     - officeId: Use user[\"offices\"][0][\"id\"] from get_current_user()     - teamId: Use team ID from get_user_teams_and_offices()</p> Role Matching <p>The role MUST match the representationType from price/date info: - representationType: \"BUYER\" \u2192 role: \"BUYERS_AGENT\" - representationType: \"SELLER\" \u2192 role: \"SELLERS_AGENT\"</p> <p>\ud83d\udca1 TIP: Use convenience methods instead of manual setup:     - set_current_user_as_owner_agent() for default team     - set_current_user_as_owner_agent_with_team() for specific team</p> Example - Complete Working Sequence <pre><code># 1. Create transaction\nbuilder_id = client.transaction_builder.create_transaction_builder()\n\n# 2. Add location with ALL required fields (REQUIRED FIRST)\nclient.transaction_builder.update_location_info(builder_id, {\n    \"street\": \"123 Main St\",\n    \"city\": \"Salt Lake City\",\n    \"state\": \"UTAH\",\n    \"zip\": \"84101\",\n    \"county\": \"Salt Lake\",        # REQUIRED\n    \"yearBuilt\": 2020,           # REQUIRED\n    \"mlsNumber\": \"MLS-123456\"    # REQUIRED\n})\n\n# 3. Add price/date with commission objects (REQUIRED SECOND)\nclient.transaction_builder.update_price_and_date_info(builder_id, {\n    \"dealType\": \"COMPENSATING\",\n    \"propertyType\": \"RESIDENTIAL\",\n    \"salePrice\": {\"amount\": 500000, \"currency\": \"USD\"},\n    \"representationType\": \"BUYER\",\n    \"listingCommission\": {       # REQUIRED\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    },\n    \"saleCommission\": {          # REQUIRED\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    }\n})\n\n# 4. Add buyer (REQUIRED THIRD)\nclient.transaction_builder.add_buyer(builder_id, {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john@example.com\",\n    \"phoneNumber\": \"(555) 123-4567\"\n})\n\n# 5. Get user and office info\nuser = client.users.get_current_user()\n\n# 6. NOW add owner agent (WORKS!)\nowner_info = {\n    \"ownerAgent\": {\n        \"agentId\": user[\"id\"],          # User ID = Agent ID\n        \"role\": \"BUYERS_AGENT\"          # Must match representationType\n    },\n    \"officeId\": user[\"offices\"][0][\"id\"],  # From user's offices\n    \"teamId\": \"your-team-uuid\"              # Your team ID\n}\nresult = client.transaction_builder.update_owner_agent_info(builder_id, owner_info)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>transaction_builder_id</code> <code>str</code> <p>UUID of the transaction builder</p> required <code>owner_agent_info</code> <code>Dict[str, Any]</code> <p>Dictionary containing owner agent details</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated transaction builder data</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If owner agent info is invalid or sequence not followed</p> <code>NotFoundError</code> <p>If transaction builder not found</p>"},{"location":"api/transaction-builder/#multiple-teams-support","title":"Multiple Teams Support","text":"<p>\u2705 New Feature: Multiple Teams Support</p> <p>Many ReZEN users belong to multiple teams. These convenience methods help handle team selection automatically:</p> \ud83d\udc65 Get Teams &amp; Offices\u2b50\ud83d\udc64 Set Owner Agent (Default Team)\u2705\ud83d\udc64 Set Owner Agent (Specific Team) <p>Get current user's teams and offices with smart default selection.</p> <p>\u2705 WORKING METHOD - Handles multiple team scenarios automatically.</p> <p>This method helps handle users who belong to multiple teams by: 1. Fetching all teams the user belongs to 2. Determining a smart default team (prefers LEADER role over ADMIN) 3. Extracting office information from user profile 4. Providing clear guidance on team selection</p> <p>\ud83c\udfaf SMART DEFAULT LOGIC: - If user has LEADER role in any team \u2192 that team becomes default - If user only has ADMIN roles \u2192 first ADMIN team becomes default - If user has only one team \u2192 that team becomes default</p> <p>\ud83d\udca1 USE CASES: - Check if user needs team selection before transaction creation - Get default team for automatic owner agent setup - Display available teams for user selection</p> <p>Parameters:</p> Name Type Description Default <code>users_client</code> <code>Optional[Any]</code> <p>Optional users client instance (uses parent client if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing:</p> <code>Dict[str, Any]</code> <ul> <li>user: Full user profile data with offices array</li> </ul> <code>Dict[str, Any]</code> <ul> <li>teams: List of teams user belongs to with roles</li> </ul> <code>Dict[str, Any]</code> <ul> <li>offices: List of offices user belongs to</li> </ul> <code>Dict[str, Any]</code> <ul> <li>default_team: Recommended team (smart selection)</li> </ul> <code>Dict[str, Any]</code> <ul> <li>has_multiple_teams: Boolean indicating if user has multiple teams</li> </ul> <code>Dict[str, Any]</code> <ul> <li>team_selection_needed: Boolean indicating if explicit selection recommended</li> </ul> <code>Dict[str, Any]</code> <ul> <li>agent_id: User's agent ID (same as user ID)</li> </ul> <code>Dict[str, Any]</code> <ul> <li>office_id: Primary office ID from user.offices[0].id</li> </ul> Example <pre><code>info = client.transaction_builder.get_user_teams_and_offices()\n\nprint(f\"Agent ID: {info['agent_id']}\")\nprint(f\"Office ID: {info['office_id']}\")\n\nif info[\"has_multiple_teams\"]:\n    print(\"\\nAvailable teams:\")\n    for team in info[\"teams\"]:\n        role = team[\"role\"]\n        name = team[\"name\"]\n        is_default = team[\"id\"] == info[\"default_team\"][\"id\"]\n        marker = \" (DEFAULT)\" if is_default else \"\"\n        print(f\"  - {name} (Role: {role}){marker}\")\n\n    # Use default team or let user choose\n    selected_team = info[\"default_team\"]\n    print(f\"\\nUsing default team: {selected_team['name']}\")\nelse:\n    print(f\"Single team: {info['default_team']['name']}\")\n\n# Ready-to-use IDs for transaction setup\nteam_id = info[\"default_team\"][\"id\"]\noffice_id = info[\"office_id\"]\nagent_id = info[\"agent_id\"]\n</code></pre> Team Data Structure <p>Each team in the teams list contains: - id: Team UUID - name: Team name - role: User's role in the team (\"LEADER\", \"ADMIN\", etc.)</p> <p>Raises:</p> Type Description <code>APIError</code> <p>If user data cannot be retrieved</p> <code>ValueError</code> <p>If user has no offices (required for transactions)</p> <p>Smart Default Logic: - Prefers teams where you have LEADER role - Falls back to ADMIN teams - Uses first available team as last resort</p> <p>Set the current authenticated user as the owner agent with default team.</p> <p>\u2705 WORKING CONVENIENCE METHOD</p> <p>\u26a0\ufe0f MULTIPLE TEAMS WARNING \u26a0\ufe0f If you belong to multiple teams, this method will use your DEFAULT team (prefers LEADER role). To specify a particular team, use <code>set_current_user_as_owner_agent_with_team()</code> instead.</p> <p>This is a convenience method that automatically: 1. Gets current user information (user ID and office ID) 2. Determines default team using smart logic 3. Sets up owner agent with all required fields</p> <p>\ud83c\udfaf SMART DEFAULT TEAM LOGIC: - Prefers teams where you have LEADER role - Falls back to teams where you have ADMIN role - Uses first available team as last resort</p> <p>Parameters:</p> Name Type Description Default <code>transaction_builder_id</code> <code>str</code> <p>UUID of the transaction builder</p> required <code>role</code> <code>str</code> <p>Agent role (\"BUYERS_AGENT\" or \"SELLERS_AGENT\")</p> required <code>users_client</code> <code>Optional[Any]</code> <p>Optional UsersClient instance. If None, will create one.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated transaction builder data</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If owner agent info is invalid or user has no teams</p> <code>NotFoundError</code> <p>If transaction builder not found</p> <code>AuthenticationError</code> <p>If not authenticated</p> <code>ValueError</code> <p>If user has no offices</p> Example <pre><code># Simple case - uses default team automatically\nresult = client.transaction_builder.set_current_user_as_owner_agent(\n    builder_id,\n    \"BUYERS_AGENT\"\n)\n\n# For multiple teams - check first, then choose approach\nteams_info = client.transaction_builder.get_user_teams_and_offices()\n\nif teams_info[\"has_multiple_teams\"]:\n    print(f\"You have {len(teams_info['teams'])} teams.\")\n    print(f\"Will use default: {teams_info['default_team']['name']}\")\n\n    # Option 1: Use this method with default team\n    result = client.transaction_builder.set_current_user_as_owner_agent(\n        builder_id, \"BUYERS_AGENT\"\n    )\n\n    # Option 2: Specify team explicitly\n    # result = client.transaction_builder.set_current_user_as_owner_agent_with_team(\n    #     builder_id, \"BUYERS_AGENT\", teams_info[\"teams\"][1][\"id\"]\n    # )\nelse:\n    # Single team - use this convenience method\n    result = client.transaction_builder.set_current_user_as_owner_agent(\n        builder_id, \"BUYERS_AGENT\"\n    )\n</code></pre> <p>Best for: Users with single team or who want automatic team selection.</p> <p>Set current user as owner agent with explicit team selection.</p> <p>\u2705 WORKING CONVENIENCE METHOD</p> <p>This method allows users to specify which team to use when they belong to multiple teams. This gives full control over team selection and is recommended when you need to be explicit about which team to use.</p> <p>\ud83c\udfaf PERFECT FOR: - Users who belong to multiple teams - When you need specific team for business reasons - Programmatic team selection based on criteria</p> <p>This method automatically: 1. Gets current user information (user ID and office ID) 2. Validates the user belongs to the specified team 3. Sets up owner agent with all required fields</p> <p>Parameters:</p> Name Type Description Default <code>transaction_builder_id</code> <code>str</code> <p>UUID of the transaction builder</p> required <code>role</code> <code>str</code> <p>Agent role (\"BUYERS_AGENT\" or \"SELLERS_AGENT\")</p> required <code>team_id</code> <code>str</code> <p>Specific team ID to use for the transaction</p> required <code>users_client</code> <code>Optional[Any]</code> <p>Optional UsersClient instance. If None, will create one.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated transaction builder data</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If user is not a member of the specified team</p> <code>ValidationError</code> <p>If team_id is invalid</p> <code>NotFoundError</code> <p>If transaction builder not found</p> <code>AuthenticationError</code> <p>If not authenticated</p> <code>ValueError</code> <p>If user has no offices</p> Example <pre><code># Option 1: Get available teams and choose\nteams_info = client.transaction_builder.get_user_teams_and_offices()\n\nif teams_info[\"has_multiple_teams\"]:\n    print(\"Available teams:\")\n    for team in teams_info[\"teams\"]:\n        print(f\"  {team['name']} (ID: {team['id']}, Role: {team['role']})\")\n\n    # Choose a specific team (e.g., select LEADER team)\n    leader_teams = [t for t in teams_info[\"teams\"] if t[\"role\"] == \"LEADER\"]\n    selected_team_id = leader_teams[0][\"id\"] if leader_teams else teams_info[\"teams\"][0][\"id\"]\nelse:\n    selected_team_id = teams_info[\"default_team\"][\"id\"]\n\n# Set owner agent with specific team\nresult = client.transaction_builder.set_current_user_as_owner_agent_with_team(\n    builder_id,\n    role=\"BUYERS_AGENT\",\n    team_id=selected_team_id\n)\n\n# Option 2: Direct usage if you know the team ID\nresult = client.transaction_builder.set_current_user_as_owner_agent_with_team(\n    builder_id,\n    role=\"SELLERS_AGENT\",\n    team_id=\"12345678-1234-1234-1234-123456789012\"\n)\n</code></pre> <p>Best for: Users with multiple teams who need explicit control.</p> <p>Prerequisites Required</p> <p>CRITICAL: The owner agent endpoint requires the transaction to be properly set up BEFORE adding agents:</p> <ol> <li>Location info must be added first (<code>update_location_info</code>)</li> <li>Price and date info must be added second (<code>update_price_and_date_info</code>) </li> <li>Buyers/Sellers must be added third (<code>add_buyer</code>/<code>add_seller</code>)</li> <li>THEN owner agent can be added successfully</li> </ol> <p>Owner Data Structure: <pre><code>{\n    \"ownerAgent\": {\n        \"agentId\": \"agent_uuid\",\n        \"role\": \"BUYERS_AGENT\"  # or \"SELLERS_AGENT\"\n    },\n    \"officeId\": \"office_uuid\", \n    \"teamId\": \"team_uuid\"\n}\n</code></pre></p> <p>Multiple Teams Support</p> <p>New in ReZEN: If you belong to multiple teams, use the enhanced methods:</p> <ul> <li><code>get_user_teams_and_offices()</code> - Discover available teams</li> <li><code>set_current_user_as_owner_agent_with_team()</code> - Specify exact team</li> </ul> <p>See Multiple Teams Guide for details.</p> <p>Complete Working Example</p> Manual Owner AgentCurrent User as Owner <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Step 1: Create transaction\nbuilder_id = client.transaction_builder.create_transaction_builder()\n\n# Step 2: Add location (REQUIRED FIRST)\nlocation_data: Dict[str, Any] = {\n    \"street\": \"123 Main St\",\n    \"city\": \"Salt Lake City\", \n    \"state\": \"UTAH\",\n    \"zip\": \"84101\"\n}\nclient.transaction_builder.update_location_info(builder_id, location_data)\n\n# Step 3: Add price/date info (REQUIRED SECOND)\nprice_data: Dict[str, Any] = {\n    \"dealType\": \"COMPENSATING\",\n    \"propertyType\": \"RESIDENTIAL\", \n    \"salePrice\": {\"amount\": 500000, \"currency\": \"USD\"},\n    \"representationType\": \"BUYER\"  # Must match agent role\n}\nclient.transaction_builder.update_price_and_date_info(builder_id, price_data)\n\n# Step 4: Add clients (REQUIRED THIRD)\nclient.transaction_builder.add_buyer(builder_id, {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john@example.com\",\n    \"phoneNumber\": \"(801) 555-1234\"\n})\n\n# Step 5: NOW add owner agent (will work!)\nowner_data: Dict[str, Any] = {\n    \"ownerAgent\": {\n        \"agentId\": \"your_agent_id\",\n        \"role\": \"BUYERS_AGENT\"  # Must match representationType\n    },\n    \"officeId\": \"your_office_id\",\n    \"teamId\": \"your_team_id\"\n}\nclient.transaction_builder.update_owner_agent_info(builder_id, owner_data)\n</code></pre> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Set up transaction (same steps 1-4 as above)\nbuilder_id = client.transaction_builder.create_transaction_builder()\n# ... add location, price, and clients ...\n\n# Use convenience method for current user\nclient.transaction_builder.set_current_user_as_owner_agent(\n    builder_id, \n    role=\"BUYERS_AGENT\"\n)\n</code></pre> <p>Role Matching</p> <p>The <code>role</code> in <code>ownerAgent</code> must match the <code>representationType</code> in the price/date info:</p> <ul> <li><code>representationType: \"BUYER\"</code> \u2192 <code>role: \"BUYERS_AGENT\"</code></li> <li><code>representationType: \"SELLER\"</code> \u2192 <code>role: \"SELLERS_AGENT\"</code></li> </ul>"},{"location":"api/transaction-builder/#other-participants","title":"Other Participants","text":"\ud83d\udc65 Add Participant <p>Add a new participant to the transaction builder.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>participant_info</code> <code>Dict[str, Any]</code> <p>Participant information data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data</p> <p>Participant Types:</p> Type Description <code>INSPECTOR</code> Property inspector <code>APPRAISER</code> Property appraiser <code>LENDER</code> Mortgage lender <code>TITLE_COMPANY</code> Title company representative <code>ATTORNEY</code> Legal counsel <code>CONTRACTOR</code> Contractor or repair specialist <p>Service Provider Examples</p> Property InspectorMortgage Lender <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\ninspector_data: Dict[str, Any] = {\n    \"type\": \"INSPECTOR\",\n    \"firstName\": \"Mike\",  # Use camelCase\n    \"lastName\": \"Inspector\",  # Use camelCase\n    \"company\": \"Quality Inspections Inc\",\n    \"phoneNumber\": \"+1-555-INSPECT\",  # Use camelCase\n    \"email\": \"mike@qualityinspections.com\"\n}\nclient.transaction_builder.add_participant(transaction_id, inspector_data)\n</code></pre> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\nlender_data: Dict[str, Any] = {\n    \"type\": \"LENDER\",\n    \"firstName\": \"Sarah\",  # Use camelCase\n    \"lastName\": \"Banker\",  # Use camelCase\n    \"company\": \"First National Bank\",\n    \"phoneNumber\": \"+1-555-LOANS\",  # Use camelCase\n    \"email\": \"sarah.banker@firstnational.com\"\n}\nclient.transaction_builder.add_participant(transaction_id, lender_data)\n</code></pre>"},{"location":"api/transaction-builder/#property-location-details","title":"Property &amp; Location Details","text":""},{"location":"api/transaction-builder/#location-information","title":"Location Information","text":"<p>Update location information.</p> <p>\u26a0\ufe0f CRITICAL REQUIREMENT \u26a0\ufe0f Basic address fields alone (street, city, state, zip) will FAIL. The API requires additional property details for successful location updates.</p> <p>REQUIRED ADDITIONAL FIELDS (beyond basic address):     - county (str): County name (e.g., \"Salt Lake\")     - yearBuilt (int): Year the property was built (e.g., 2020)     - mlsNumber (str): MLS listing number (e.g., \"MLS123456\")</p> Field Name Requirements <ul> <li>Use 'street' not 'address'</li> <li>Use 'zip' not 'zipCode' or 'zip_code'</li> <li>State must be ALL CAPS (e.g., 'UTAH', 'CALIFORNIA')</li> <li>Use camelCase for: yearBuilt, mlsNumber, escrowNumber</li> </ul> Required Fields for Success <ul> <li>street (str): Property street address</li> <li>city (str): City name</li> <li>state (str): State name in ALL CAPS</li> <li>zip (str): ZIP code</li> <li>county (str): County name - REQUIRED</li> <li>yearBuilt (int): Year built - REQUIRED</li> <li>mlsNumber (str): MLS number - REQUIRED</li> </ul> Optional Fields <ul> <li>street2 (str): Secondary address line</li> <li>unit (str): Unit number</li> <li>escrowNumber (str): Escrow number</li> </ul> Working Example <pre><code># \u2705 This WORKS (includes required additional fields)\nlocation_info = {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Salt Lake City\",\n    \"state\": \"UTAH\",\n    \"zip\": \"84101\",\n    \"county\": \"Salt Lake\",        # REQUIRED\n    \"yearBuilt\": 2020,           # REQUIRED\n    \"mlsNumber\": \"MLS123456\",    # REQUIRED\n    \"escrowNumber\": \"ESC-2024-001\"  # Optional\n}\n\n# \u274c This FAILS (missing required additional fields)\nlocation_info = {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Salt Lake City\",\n    \"state\": \"UTAH\",\n    \"zip\": \"84101\"\n    # Missing county, yearBuilt, mlsNumber - API returns \"Bad request: Invalid request\"\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>location_info</code> <code>Dict[str, Any]</code> <p>Location information data with ALL required fields</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data</p> <p>Raises:</p> Type Description <code>InvalidFieldNameError</code> <p>If using wrong field names (address, zipCode, etc.)</p> <code>InvalidFieldValueError</code> <p>If state is not in ALL CAPS</p> <code>ValidationError</code> <p>If missing required additional fields</p> <p>Backward Compatibility</p> <p>You can also use <code>put_location_to_draft()</code> which is an alias for <code>update_location_info()</code>.</p> <p>Property Location Examples</p> Residential PropertyCommercial Property <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\nlocation_data: Dict[str, Any] = {\n    \"street\": \"123 Maple Street\",  # Use 'street' not 'address'\n    \"street2\": \"\",\n    \"city\": \"Springfield\",\n    \"state\": \"UTAH\",  # Must be UTAH (all caps)\n    \"zip\": \"84101\",  # Use 'zip' not 'zipCode'\n    \"county\": \"Salt Lake\",\n    \"unit\": \"Unit 2A\",  # For condos/apartments\n    \"subdivision\": \"Maple Grove\",\n    \"yearBuilt\": 2020,  # Use camelCase\n    \"mlsNumber\": \"MLS123\",  # Use camelCase\n    \"escrowNumber\": \"\"\n}\n\n# Using new method name\nclient.transaction_builder.update_location_info(transaction_id, location_data)\n\n# Or using backward compatibility alias\nclient.transaction_builder.put_location_to_draft(transaction_id, location_data)\n</code></pre> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\nlocation_data: Dict[str, Any] = {\n    \"street\": \"456 Business Blvd\",  # Use 'street' not 'address'\n    \"street2\": \"\",\n    \"city\": \"Commerce City\",\n    \"state\": \"UTAH\",  # Must be UTAH (all caps)\n    \"zip\": \"84111\",  # Use 'zip' not 'zipCode'\n    \"county\": \"Salt Lake\",\n    \"yearBuilt\": 2018,\n    \"mlsNumber\": \"COM456\",\n    \"escrowNumber\": \"\",\n    \"building_name\": \"Commerce Center\",\n    \"floor\": \"15th Floor\"\n}\nclient.transaction_builder.update_location_info(transaction_id, location_data)\n</code></pre>"},{"location":"api/transaction-builder/#pricing-dates","title":"Pricing &amp; Dates","text":"<p>Update price and date information.</p> <p>\u26a0\ufe0f CRITICAL REQUIREMENT \u26a0\ufe0f Basic price/date fields alone will FAIL with \"Bad request: Invalid request\". The API requires BOTH commission objects for successful price/date updates.</p> REQUIRED COMMISSION FIELDS <p>Both listingCommission AND saleCommission objects are REQUIRED together. You cannot provide just one - the API needs both.</p> Field Structure Requirements <ul> <li>salePrice MUST be an object with 'amount' and 'currency', NOT a simple number</li> <li>All dates use camelCase format: acceptanceDate, closingDate, etc.</li> <li>representationType determines valid agent roles (BUYER \u2192 BUYERS_AGENT, SELLER \u2192 SELLERS_AGENT)</li> </ul> Required Fields for Success <ul> <li>dealType (str): \"COMPENSATING\" or \"NON_COMPENSATING\"</li> <li>propertyType (str): \"RESIDENTIAL\", \"COMMERCIAL\", etc.</li> <li>salePrice (dict): {\"amount\": 500000, \"currency\": \"USD\"}</li> <li>representationType (str): \"BUYER\" or \"SELLER\" - affects owner agent role</li> <li>listingCommission (dict): Commission object - REQUIRED</li> <li>saleCommission (dict): Commission object - REQUIRED</li> </ul> Optional Fields <ul> <li>acceptanceDate (str): Date in \"YYYY-MM-DD\" format</li> <li>closingDate (str): Date in \"YYYY-MM-DD\" format</li> <li>earnestMoney (float): Earnest money amount</li> <li>downPayment (float): Down payment amount</li> <li>loanAmount (float): Loan amount</li> </ul> Working Example <pre><code># \u2705 This WORKS (includes both required commission objects)\nprice_date_info = {\n    \"dealType\": \"COMPENSATING\",\n    \"propertyType\": \"RESIDENTIAL\",\n    \"salePrice\": {\n        \"amount\": 565000,\n        \"currency\": \"USD\"\n    },\n    \"representationType\": \"BUYER\",\n    \"listingCommission\": {       # REQUIRED\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    },\n    \"saleCommission\": {          # REQUIRED\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    },\n    \"acceptanceDate\": \"2024-01-15\",\n    \"closingDate\": \"2024-02-28\"\n}\n\n# \u274c This FAILS (missing commission objects)\nprice_date_info = {\n    \"dealType\": \"COMPENSATING\",\n    \"propertyType\": \"RESIDENTIAL\",\n    \"salePrice\": {\"amount\": 500000, \"currency\": \"USD\"},\n    \"representationType\": \"BUYER\"\n    # Missing both commission objects - API returns \"Bad request: Invalid request\"\n}\n\n# \u274c This ALSO FAILS (only one commission object)\nprice_date_info = {\n    \"dealType\": \"COMPENSATING\",\n    \"propertyType\": \"RESIDENTIAL\",\n    \"salePrice\": {\"amount\": 500000, \"currency\": \"USD\"},\n    \"representationType\": \"BUYER\",\n    \"listingCommission\": {       # Only one commission\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    }\n    # Missing saleCommission - API still returns \"Bad request: Invalid request\"\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>price_date_info</code> <code>Dict[str, Any]</code> <p>Price and date information data with BOTH commission objects</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If missing required fields or commission objects</p> <code>InvalidFieldValueError</code> <p>If salePrice format is incorrect or representationType invalid</p> <p>Backward Compatibility</p> <p>You can also use <code>put_price_and_date_to_draft()</code> which is an alias for <code>update_price_and_date_info()</code>.</p> <p>Key Date Fields:</p> Field Format Description <code>contractDate</code> <code>YYYY-MM-DD</code> Date contract was signed (camelCase) <code>closingDate</code> <code>YYYY-MM-DD</code> Expected closing date (camelCase) <code>inspectionDate</code> <code>YYYY-MM-DD</code> Property inspection date (camelCase) <code>appraisalDate</code> <code>YYYY-MM-DD</code> Appraisal completion date (camelCase) <code>acceptanceDate</code> <code>YYYY-MM-DD</code> Offer acceptance date (camelCase) <p>Pricing Information</p> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\nprice_date_data: Dict[str, Any] = {\n    \"salePrice\": {  # Use camelCase and object structure\n        \"amount\": 750000,\n        \"currency\": \"USD\"\n    },\n    \"earnestMoney\": 15000,  # Use camelCase\n    \"downPayment\": 150000,  # Use camelCase\n    \"loanAmount\": 600000,  # Use camelCase\n    \"contractDate\": \"2024-02-01\",  # Use camelCase\n    \"closingDate\": \"2024-03-15\",  # Use camelCase\n    \"inspectionDate\": \"2024-02-10\",  # Use camelCase\n    \"appraisalDate\": \"2024-02-20\"  # Use camelCase\n}\n\nclient.transaction_builder.update_price_and_date_info(\n    transaction_id,\n    price_date_data\n)\n</code></pre>"},{"location":"api/transaction-builder/#title-information","title":"Title Information","text":"<p>Update title details for a transaction builder.</p> <p>Important: Use camelCase for field names: - firstName (not first_name) - lastName (not last_name) - phoneNumber (not phone_number)</p> Example <p>title_info = {     \"company\": \"Premier Title Company\",     \"firstName\": \"Sarah\",     \"lastName\": \"Johnson\",     \"email\": \"sarah@premiertitle.com\",     \"phoneNumber\": \"(555) 555-5555\" }</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>title_info</code> <code>Dict[str, Any]</code> <p>Title information data with camelCase fields</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data</p>"},{"location":"api/transaction-builder/#update-real-title","title":"Update Real Title","text":"<p>Update real title (alias for update_title_info).</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>title_info</code> <code>Dict[str, Any]</code> <p>Title information data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data</p> <p>Alias Method</p> <p>This is an alias for <code>update_title_info()</code> provided for backward compatibility.</p> <p>Title Company Details</p> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\ntitle_data: Dict[str, Any] = {\n    \"company\": \"Premier Title Co\",  # Use 'company' not 'title_company'\n    \"firstName\": \"Sarah\",  # Use camelCase\n    \"lastName\": \"Johnson\",  # Use camelCase\n    \"phoneNumber\": \"+1-555-789-0123\",  # Use camelCase\n    \"email\": \"sarah@premiertitle.com\",\n    \"address\": \"789 Title Lane, Title City, TC 54321\",\n    \"policyNumber\": \"PT-2024-001234\"  # Use camelCase\n}\n\n# Using either method works the same\nclient.transaction_builder.update_title_info(transaction_id, title_data)\n# or\nclient.transaction_builder.update_real_title(transaction_id, title_data)\n</code></pre>"},{"location":"api/transaction-builder/#personal-deal-information","title":"Personal Deal Information","text":"<p>Update personal deal information.</p> <p>Sets whether this transaction is a personal deal (agent buying/selling own property).</p> Required Fields <ul> <li>isPersonalDeal (bool): Whether this is a personal deal</li> </ul> Example <pre><code>deal_info = {\n    \"isPersonalDeal\": True  # Agent is buying/selling their own property\n}\nclient.update_personal_deal_info(transaction_id, deal_info)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>deal_info</code> <code>Dict[str, Any]</code> <p>Personal deal information data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data</p>"},{"location":"api/transaction-builder/#update-personal-deal","title":"Update Personal Deal","text":"<p>Update personal deal (alias for update_personal_deal_info).</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>deal_info</code> <code>Dict[str, Any]</code> <p>Personal deal information data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data</p> <p>Alias Method</p> <p>This is an alias for <code>update_personal_deal_info()</code> provided for backward compatibility.</p>"},{"location":"api/transaction-builder/#financial-management","title":"Financial Management","text":""},{"location":"api/transaction-builder/#commission-splits","title":"Commission Splits","text":"<p>Update commission splits information.</p> <p>IMPORTANT: Pass a LIST of commission split objects, even for a single split.</p> Commission Split Structure <p>Each split in the list should contain: - agentId (str): UUID of the agent receiving the split - receivesInvoice (bool): Whether this agent receives an invoice - splitPercent (float): Percentage of commission (e.g., 50.0 for 50%) - opCityReferral (bool): Whether this is an OpCity referral (optional) - optedInForEcp (bool): Whether opted in for ECP (optional)</p> Example <pre><code>commission_splits = [\n    {\n        \"agentId\": \"agent-uuid-1\",\n        \"receivesInvoice\": True,\n        \"splitPercent\": 50.0,\n        \"opCityReferral\": False,\n        \"optedInForEcp\": False\n    },\n    {\n        \"agentId\": \"agent-uuid-2\",\n        \"receivesInvoice\": False,\n        \"splitPercent\": 50.0,\n        \"opCityReferral\": False,\n        \"optedInForEcp\": False\n    }\n]\nclient.update_commission_splits(transaction_id, commission_splits)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>commission_splits</code> <code>List[Dict[str, Any]]</code> <p>List of commission split data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data</p> <p>Commission Split Examples</p> Equal SplitUnequal Split <pre><code>from typing import Dict, List, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\ncommission_data: List[Dict[str, Any]] = [\n    {\n        \"agentId\": \"buyer-agent-uuid\",  # Use camelCase\n        \"splitPercentage\": 50.0,  # Use camelCase\n        \"commissionAmount\": 15000  # Use camelCase\n    },\n    {\n        \"agentId\": \"seller-agent-uuid\",  # Use camelCase\n        \"splitPercentage\": 50.0,  # Use camelCase\n        \"commissionAmount\": 15000  # Use camelCase\n    }\n]\n\nclient.transaction_builder.update_commission_splits(\n    transaction_id,\n    commission_data\n)\n</code></pre> <pre><code>from typing import Dict, List, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\ncommission_data: List[Dict[str, Any]] = [\n    {\n        \"agentId\": \"listing-agent-uuid\",  # Use camelCase\n        \"splitPercentage\": 60.0,  # Use camelCase\n        \"commissionAmount\": 18000  # Use camelCase\n    },\n    {\n        \"agentId\": \"buyer-agent-uuid\",  # Use camelCase\n        \"splitPercentage\": 40.0,  # Use camelCase\n        \"commissionAmount\": 12000  # Use camelCase\n    }\n]\n\nclient.transaction_builder.update_commission_splits(\n    transaction_id,\n    commission_data\n)\n</code></pre>"},{"location":"api/transaction-builder/#commission-payers","title":"Commission Payers","text":"<p>Add commission payer information.</p> <p>IMPORTANT: This endpoint requires multipart/form-data format. The method automatically handles the conversion for you.</p> Required Fields <ul> <li>role (str): Commission payer role. Valid values from get_commission_payer_roles():<ul> <li>\"TITLE\" - Title company</li> <li>\"SELLER\" - Seller pays commission</li> <li>\"LANDLORD\" - Landlord (for rental transactions)</li> <li>\"OTHER_AGENT\" - Another agent pays</li> <li>\"REAL\" - Real (company) pays</li> </ul> </li> <li>firstName (str): First name of the commission payer</li> <li>lastName (str): Last name of the commission payer</li> <li>email (str): Email address of the commission payer</li> <li>phoneNumber (str): Phone number (e.g., \"(555) 123-4567\")</li> <li>companyName (str): Company name of the commission payer</li> </ul> Optional Fields <ul> <li>receivesInvoice (bool): Whether the payer receives invoice (default: False)</li> <li>opCityReferral (bool): Whether this is an OpCity referral (default: False)</li> <li>optedInForEcp (bool): Whether opted in for ECP (default: False)</li> <li>participantId (str): If provided, validation for other fields is bypassed</li> <li>address (str): Address of the commission payer</li> <li>ein (str): Employer Identification Number</li> </ul> Special Notes <ol> <li>If you provide a participantId, the validation for other required fields is ignored.    This is useful when referencing an existing participant.</li> <li>The role \"REAL\" is commonly used for standard commission payers.</li> <li>Some role values like \"NA\", \"LISTING_AGENT\", \"BUYERS_AGENT\" may not work as    they are not valid enum values for commission payer roles.</li> </ol> Example <pre><code># Standard commission payer with all required fields\ncommission_info = {\n    \"role\": \"REAL\",\n    \"firstName\": \"Commission\",\n    \"lastName\": \"Payer\",\n    \"email\": \"commission@example.com\",\n    \"phoneNumber\": \"(555) 111-2222\",\n    \"companyName\": \"Commission Company LLC\",\n    \"receivesInvoice\": True,\n    \"opCityReferral\": False,\n    \"optedInForEcp\": False\n}\nresult = client.add_commission_payer(transaction_id, commission_info)\n\n# Using existing participant ID (bypasses validation)\ncommission_info = {\n    \"role\": \"REAL\",\n    \"participantId\": \"existing-participant-uuid\",\n    \"receivesInvoice\": True\n}\nresult = client.add_commission_payer(transaction_id, commission_info)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>commission_info</code> <code>Dict[str, Any]</code> <p>Commission payer information data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data with commissionPayerInfo populated</p>"},{"location":"api/transaction-builder/#update-commission-payer","title":"Update Commission Payer","text":"<p>Update commission payer information (alias for add_commission_payer).</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction builder ID</p> required <code>commission_info</code> <code>Dict[str, Any]</code> <p>Commission payer information data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction builder response data</p> <p>Alias Method</p> <p>This is an alias for <code>add_commission_payer()</code> provided for backward compatibility.</p> <p>Payer Types:</p> Type Description <code>SELLER</code> Seller pays commission <code>BUYER</code> Buyer pays commission <code>BOTH</code> Split between buyer and seller <p>Commission Payer Configuration</p> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\npayer_data: Dict[str, Any] = {\n    \"payerType\": \"SELLER\",  # Use camelCase\n    \"commissionRate\": 6.0,  # 6% commission, use camelCase\n    \"flatFee\": False  # Percentage-based, not flat fee, use camelCase\n}\n\n# Using either method works the same\nclient.transaction_builder.add_commission_payer(transaction_id, payer_data)\n# or\nclient.transaction_builder.update_commission_payer(transaction_id, payer_data)\n</code></pre>"},{"location":"api/transaction-builder/#field-name-requirements","title":"Field Name Requirements","text":"<p>Critical Field Name Requirements</p> <p>The ReZEN API has specific field name requirements that must be followed exactly:</p> <p>Location Fields: - \u2705 Use <code>street</code> NOT <code>address</code> - \u2705 Use <code>zip</code> NOT <code>zipCode</code> - \u2705 State must be <code>UTAH</code> (all caps) - \u2705 Use camelCase: <code>yearBuilt</code>, <code>mlsNumber</code>, <code>escrowNumber</code></p> <p>Contact Fields: - \u2705 Use <code>firstName</code> NOT <code>first_name</code> - \u2705 Use <code>lastName</code> NOT <code>last_name</code> - \u2705 Use <code>phoneNumber</code> NOT <code>phone</code></p> <p>Price Fields: - \u2705 <code>salePrice</code> must be an object with <code>amount</code> and <code>currency</code> - \u2705 Use camelCase: <code>earnestMoney</code>, <code>downPayment</code>, <code>loanAmount</code></p> <p>Date Fields: - \u2705 Use camelCase: <code>contractDate</code>, <code>closingDate</code>, <code>acceptanceDate</code> - \u2705 Format: <code>YYYY-MM-DD</code></p> <p>Commission Fields: - \u2705 Use camelCase: <code>agentId</code>, <code>splitPercentage</code>, <code>commissionAmount</code></p>"},{"location":"api/transaction-builder/#backward-compatibility","title":"Backward Compatibility","text":"<p>Legacy Method Names</p> <p>The library provides backward compatibility aliases for users migrating from older versions:</p> Old Method Name New Method Name <code>put_buyer_to_draft()</code> <code>add_buyer()</code> <code>put_seller_to_draft()</code> <code>add_seller()</code> <code>put_location_to_draft()</code> <code>update_location_info()</code> <code>put_price_and_date_to_draft()</code> <code>update_price_and_date_info()</code> <code>update_commission_payer()</code> <code>add_commission_payer()</code> <code>update_personal_deal()</code> <code>update_personal_deal_info()</code> <code>update_real_title()</code> <code>update_title_info()</code> <p>Using Backward Compatibility</p> <pre><code>from rezen import RezenClient\n\nclient = RezenClient()\ntransaction_id = \"your-transaction-id\"\n\n# These method pairs do the same thing:\n\n# Add buyer\nclient.transaction_builder.add_buyer(transaction_id, buyer_data)\nclient.transaction_builder.put_buyer_to_draft(transaction_id, buyer_data)\n\n# Add seller\nclient.transaction_builder.add_seller(transaction_id, seller_data)\nclient.transaction_builder.put_seller_to_draft(transaction_id, seller_data)\n\n# Update location\nclient.transaction_builder.update_location_info(transaction_id, location_data)\nclient.transaction_builder.put_location_to_draft(transaction_id, location_data)\n\n# Update price and date\nclient.transaction_builder.update_price_and_date_info(transaction_id, price_data)\nclient.transaction_builder.put_price_and_date_to_draft(transaction_id, price_data)\n</code></pre>"},{"location":"api/transaction-builder/#query-search-operations","title":"Query &amp; Search Operations","text":""},{"location":"api/transaction-builder/#list-transaction-builders","title":"List Transaction Builders","text":"<p>Get a paginated list of transaction builders.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>Maximum number of results to return</p> required <code>from_offset</code> <code>int</code> <p>Starting offset for pagination</p> required <code>yenta_id</code> <code>str</code> <p>User ID</p> required <code>builder_type</code> <code>str</code> <p>Type of builder ('TRANSACTION' or 'LISTING')</p> <code>'TRANSACTION'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Paginated list of transaction builders</p> <p>Advanced Filtering</p> Basic PaginationUser-Specific SearchListing Builders Only <pre><code>builders = client.transaction_builder.get_transaction_builders(\n    limit=20,\n    from_offset=0\n)\n\nprint(f\"Found {len(builders)} transaction builders\")\nfor builder in builders:\n    print(f\"ID: {builder['id']}, Status: {builder['status']}\")\n</code></pre> <pre><code># Get builders for specific user\nuser_builders = client.transaction_builder.get_transaction_builders(\n    limit=50,\n    from_offset=0,\n    yenta_id=\"user-uuid-here\",\n    builder_type=\"TRANSACTION\"\n)\n</code></pre> <pre><code># Get only listing builders\nlistings = client.transaction_builder.get_transaction_builders(\n    limit=25,\n    from_offset=0,\n    builder_type=\"LISTING\"\n)\n</code></pre>"},{"location":"api/transaction-builder/#error-handling","title":"Error Handling","text":""},{"location":"api/transaction-builder/#enhanced-error-messages","title":"Enhanced Error Messages","text":"<p>The Transaction Builder now includes enhanced error handling that catches common mistakes before they reach the API.</p> <p>New Error Types</p> <ul> <li><code>InvalidFieldNameError</code>: Catches incorrect field names (e.g., <code>address</code> instead of <code>street</code>)</li> <li><code>InvalidFieldValueError</code>: Validates field formats (e.g., state must be uppercase)</li> <li><code>TransactionSequenceError</code>: Identifies when operations are called in wrong order</li> <li><code>ValidationError</code>: General validation failures with detailed messages</li> </ul>"},{"location":"api/transaction-builder/#common-field-name-errors","title":"Common Field Name Errors","text":"<p>Field Name Validation</p> <pre><code>from rezen.exceptions import InvalidFieldNameError\n\ntry:\n    # Using wrong field name\n    location_data = {\n        \"address\": \"123 Main St\",  # \u274c Wrong! Should be 'street'\n        \"city\": \"Salt Lake City\",\n        \"state\": \"UTAH\",\n        \"zipCode\": \"84101\"  # \u274c Wrong! Should be 'zip'\n    }\n    client.transaction_builder.update_location_info(transaction_id, location_data)\nexcept InvalidFieldNameError as e:\n    print(f\"Field name error: {e}\")\n    print(f\"Use '{e.correct_name}' instead of '{e.field_name}'\")\n</code></pre>"},{"location":"api/transaction-builder/#field-value-validation","title":"Field Value Validation","text":"<p>Field Value Validation</p> <pre><code>from rezen.exceptions import InvalidFieldValueError\n\ntry:\n    # Wrong state format\n    location_data = {\n        \"street\": \"123 Main St\",\n        \"city\": \"Salt Lake City\",\n        \"state\": \"utah\",  # \u274c Wrong! Must be uppercase\n        \"zip\": \"84101\"\n    }\n    client.transaction_builder.update_location_info(transaction_id, location_data)\nexcept InvalidFieldValueError as e:\n    print(f\"Invalid value for '{e.field_name}': {e.value}\")\n    print(f\"Expected: {e.expected_format}\")\n</code></pre>"},{"location":"api/transaction-builder/#transaction-sequence-errors","title":"Transaction Sequence Errors","text":"<p>Sequence Requirements</p> <p>The owner agent endpoint requires specific setup steps in order:</p> <pre><code>from rezen.exceptions import TransactionSequenceError\n\ntry:\n    # Trying to add owner agent without proper setup\n    client.transaction_builder.update_owner_agent_info(builder_id, owner_data)\nexcept TransactionSequenceError as e:\n    print(f\"Sequence error: {e}\")\n    # Error message includes required steps:\n    # 1. Create transaction (create_transaction_builder)\n    # 2. Add location info (update_location_info) - REQUIRED FIRST\n    # 3. Add price/date info (update_price_and_date_info) - REQUIRED SECOND\n    # 4. Add buyers/sellers (add_buyer/add_seller) - REQUIRED THIRD\n    # 5. THEN add owner agent (update_owner_agent_info)\n</code></pre>"},{"location":"api/transaction-builder/#price-structure-validation","title":"Price Structure Validation","text":"<p>Price Field Validation</p> <pre><code>from rezen.exceptions import InvalidFieldValueError, ValidationError\n\ntry:\n    price_data = {\n        \"dealType\": \"COMPENSATING\",\n        \"propertyType\": \"RESIDENTIAL\",\n        \"salePrice\": 500000,  # \u274c Wrong! Must be object\n        \"representationType\": \"BUYERS_AGENT\"  # \u274c Wrong! Should be 'BUYER'\n    }\n    client.transaction_builder.update_price_and_date_info(transaction_id, price_data)\nexcept InvalidFieldValueError as e:\n    # Catches: \"Invalid value for 'salePrice': 500000. \n    # Expected: Object with 'amount' and 'currency' fields\"\n    print(f\"Error: {e}\")\nexcept ValidationError as e:\n    # Catches missing required fields\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"api/transaction-builder/#best-practices","title":"Best Practices","text":"<p>Error Handling Best Practices</p> <ul> <li>Catch Specific Exceptions: Use specific exception types for better error handling</li> <li>Check Field Names: The enhanced validation catches common camelCase vs snake_case errors</li> <li>Validate Before Submission: Required fields are now validated before API calls</li> <li>Follow Sequence Requirements: Especially important for owner agent endpoints</li> <li>Use Error Details: Exception objects contain helpful properties like <code>field_name</code> and <code>correct_name</code></li> </ul>"},{"location":"api/transaction-builder/#complete-workflow-example","title":"Complete Workflow Example","text":"<p>End-to-End Transaction Creation</p> <pre><code>from rezen import RezenClient\nfrom rezen.exceptions import RezenError\nimport logging\n\ndef create_complete_transaction():\n    \"\"\"Create a complete transaction with all participants and details.\"\"\"\n\n    try:\n        client = RezenClient()\n\n        # Step 1: Create transaction builder\n        print(\"Creating transaction builder...\")\n        response = client.transaction_builder.create_transaction_builder()\n        transaction_id = response['id']\n        print(f\"\u2705 Created transaction: {transaction_id}\")\n\n        # Step 2: Add buyer\n        print(\"Adding buyer...\")\n        buyer_data = {\n            \"firstName\": \"John\",  # Use camelCase\n            \"lastName\": \"Doe\",  # Use camelCase\n            \"email\": \"john.doe@email.com\",\n            \"phoneNumber\": \"+1-555-123-4567\"  # Use camelCase\n        }\n        client.transaction_builder.add_buyer(transaction_id, buyer_data)\n        print(\"\u2705 Added buyer\")\n\n        # Step 3: Add seller\n        print(\"Adding seller...\")\n        seller_data = {\n            \"firstName\": \"Jane\",  # Use camelCase\n            \"lastName\": \"Smith\",  # Use camelCase\n            \"email\": \"jane.smith@email.com\",\n            \"phoneNumber\": \"+1-555-987-6543\"  # Use camelCase\n        }\n        client.transaction_builder.add_seller(transaction_id, seller_data)\n        print(\"\u2705 Added seller\")\n\n        # Step 4: Add property location\n        print(\"Setting property location...\")\n        location_data = {\n            \"street\": \"123 Dream House Lane\",  # Use 'street' not 'address'\n            \"street2\": \"\",\n            \"city\": \"Salt Lake City\",\n            \"state\": \"UTAH\",  # Must be UTAH (all caps)\n            \"zip\": \"84101\",  # Use 'zip' not 'zipCode'\n            \"county\": \"Salt Lake\",\n            \"unit\": \"\",\n            \"yearBuilt\": 2020,  # Use camelCase\n            \"mlsNumber\": \"MLS123456\",  # Use camelCase\n            \"escrowNumber\": \"\"\n        }\n        client.transaction_builder.update_location_info(transaction_id, location_data)\n        print(\"\u2705 Set property location\")\n\n        # Step 5: Set pricing and dates\n        print(\"Setting pricing and dates...\")\n        price_data = {\n            \"salePrice\": {  # Use camelCase and object structure\n                \"amount\": 850000,\n                \"currency\": \"USD\"\n            },\n            \"earnestMoney\": 17000,  # Use camelCase\n            \"acceptanceDate\": \"2024-02-01\",  # Use camelCase\n            \"closingDate\": \"2024-03-15\"  # Use camelCase\n        }\n        client.transaction_builder.update_price_and_date_info(transaction_id, price_data)\n        print(\"\u2705 Set pricing and dates\")\n\n        # Step 6: Add service providers\n        print(\"Adding service providers...\")\n        inspector_data = {\n            \"type\": \"INSPECTOR\",\n            \"firstName\": \"Mike\",  # Use camelCase\n            \"lastName\": \"Inspector\",  # Use camelCase\n            \"company\": \"Quality Inspections Inc\",\n            \"phoneNumber\": \"+1-555-INSPECT\",  # Use camelCase\n            \"email\": \"mike@qualityinspections.com\"\n        }\n        client.transaction_builder.add_participant(transaction_id, inspector_data)\n        print(\"\u2705 Added inspector\")\n\n        # Step 7: Submit transaction\n        print(\"Submitting transaction...\")\n        submit_response = client.transaction_builder.submit_transaction(transaction_id)\n        print(\"\u2705 Transaction submitted successfully!\")\n\n        return {\n            \"success\": True,\n            \"transaction_id\": transaction_id,\n            \"submit_response\": submit_response\n        }\n\n    except RezenError as e:\n        logging.error(f\"ReZEN API error: {e}\")\n        return {\n            \"success\": False,\n            \"error\": str(e),\n            \"transaction_id\": transaction_id if 'transaction_id' in locals() else None\n        }\n    except Exception as e:\n        logging.error(f\"Unexpected error: {e}\")\n        return {\n            \"success\": False,\n            \"error\": str(e)\n        }\n\n# Run the example\nresult = create_complete_transaction()\nif result[\"success\"]:\n    print(f\"\ud83c\udf89 Transaction {result['transaction_id']} created successfully!\")\nelse:\n    print(f\"\u274c Failed to create transaction: {result['error']}\")\n</code></pre>"},{"location":"api/transaction-builder/#next-steps","title":"Next Steps","text":"<ul> <li> <p>\ud83e\udd1d Transactions API</p> <p>Work with live transactions and manage ongoing deals</p> </li> <li> <p>\ud83d\udc65 Teams API</p> <p>Search and manage team information</p> </li> <li> <p>\ud83d\udc54 Agents API</p> <p>Find and manage agent information</p> </li> <li> <p>\ud83d\udcc4 Examples</p> <p>See more practical usage examples</p> </li> </ul>"},{"location":"api/transactions/","title":"Transactions API","text":"<p>Work with live transactions, manage participants, and handle financial operations.</p>"},{"location":"api/transactions/#overview","title":"Overview","text":"<p>Transactions API Features</p> <ul> <li>Transaction Management: Get and update live transactions</li> <li>Participant Management: Add and modify transaction participants</li> <li>Financial Operations: Process payments and commission splits</li> <li>Document Management: Generate reports and handle transaction documents</li> <li>Agent Transactions: Retrieve agent-specific transaction lists</li> <li>Termination: Request transaction termination</li> </ul>"},{"location":"api/transactions/#quick-start","title":"Quick Start","text":"<pre><code>from rezen import RezenClient\n\nclient = RezenClient()\n\n# Get transaction details\ntransaction = client.transactions.get_transaction(\"tx-12345\")\n\n# Get agent's current transactions\nagent_transactions = client.transactions.get_agent_current_transactions(\"agent-uuid\")\n\n# Add participant to existing transaction\nparticipant = {\n    \"type\": \"LENDER\",\n    \"first_name\": \"Bank\",\n    \"last_name\": \"Officer\",\n    \"company\": \"First National Bank\"\n}\nclient.transactions.create_participant(transaction_id, participant)\n</code></pre>"},{"location":"api/transactions/#core-methods","title":"Core Methods","text":""},{"location":"api/transactions/#transaction-operations","title":"Transaction Operations","text":"<p>Get a specific transaction by ID.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transaction data</p>"},{"location":"api/transactions/#agent-transaction-methods","title":"Agent Transaction Methods","text":"<p>Get agent's transactions (wrapper for get_participant_transactions).</p> <p>Parameters:</p> Name Type Description Default <code>yenta_id</code> <code>str</code> <p>Agent's user ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Agent's transactions data</p> <p>Get agent's current transactions (wrapper for get_participant_current_transactions).</p> <p>Parameters:</p> Name Type Description Default <code>yenta_id</code> <code>str</code> <p>Agent's user ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Agent's current transactions data</p> <p>Get agent's current listings.</p> <p>Parameters:</p> Name Type Description Default <code>yenta_id</code> <code>str</code> <p>Agent's user ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Agent's current listings data</p> <p>Wrapper Methods</p> <p>The agent transaction methods are convenience wrappers around the participant transaction methods for backward compatibility.</p>"},{"location":"api/transactions/#transaction-termination","title":"Transaction Termination","text":"<p>Request termination for a transaction.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Termination request response data</p>"},{"location":"api/transactions/#participant-management","title":"Participant Management","text":"<p>Create transaction participant.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction ID</p> required <code>participant_data</code> <code>Dict[str, Any]</code> <p>Participant creation data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created participant data</p> <p>Get transactions for participant.</p> <p>Parameters:</p> Name Type Description Default <code>yenta_id</code> <code>str</code> <p>Participant (user) ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Participant transactions data</p> <p>Get participant's current transactions.</p> <p>Parameters:</p> Name Type Description Default <code>yenta_id</code> <code>str</code> <p>User/participant ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Current transactions data</p>"},{"location":"api/transactions/#financial-operations","title":"Financial Operations","text":"<p>Get payment information for agent.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction ID</p> required <code>agent_id</code> <code>str</code> <p>Agent ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Payment information data</p> <p>Get money transfers for transaction.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Money transfers data</p>"},{"location":"api/transactions/#document-operations","title":"Document Operations","text":"<p>Get transaction summary PDF.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_id</code> <code>str</code> <p>Transaction ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>PDF download information</p>"},{"location":"api/transactions/#usage-examples","title":"Usage Examples","text":"<p>Transaction Management</p> Get TransactionAgent TransactionsAdd ParticipantGet Payment InfoRequest Termination <pre><code>transaction = client.transactions.get_transaction(\"tx-12345\")\nprint(f\"Status: {transaction['status']}\")\nprint(f\"Property: {transaction['property']['address']}\")\n</code></pre> <pre><code># Get all agent transactions\nall_transactions = client.transactions.get_agent_transactions(\"agent-uuid\")\n\n# Get current active transactions\ncurrent_transactions = client.transactions.get_agent_current_transactions(\"agent-uuid\")\n\n# Get current listings only\ncurrent_listings = client.transactions.get_agent_current_listings(\"agent-uuid\")\n\nfor listing in current_listings:\n    print(f\"Listing: {listing['address']} - Status: {listing['status']}\")\n</code></pre> <pre><code>lender = {\n    \"type\": \"LENDER\",\n    \"first_name\": \"Sarah\",\n    \"last_name\": \"Banker\",\n    \"company\": \"Community Bank\",\n    \"email\": \"sarah@communitybank.com\"\n}\n\nresponse = client.transactions.create_participant(\n    transaction_id,\n    lender\n)\n</code></pre> <pre><code># Get payment information for an agent\npayment_info = client.transactions.get_payment_info(\n    transaction_id,\n    agent_id\n)\n\nprint(f\"Payment amount: {payment_info['amount']}\")\nprint(f\"Payment status: {payment_info['status']}\")\n</code></pre> <pre><code># Request to terminate a transaction\ntermination_response = client.transactions.request_termination(\"tx-12345\")\nprint(f\"Termination status: {termination_response['status']}\")\n</code></pre>"},{"location":"api/transactions/#agent-transaction-retrieval","title":"Agent Transaction Retrieval","text":"<p>Transaction Filtering</p> <p>The library provides several methods to retrieve agent-specific transactions:</p> <ul> <li>All Transactions: Get complete transaction history</li> <li>Current Transactions: Get only active/current transactions</li> <li>Current Listings: Get only listing-type transactions that are current</li> </ul> <p>Agent Transaction Examples</p> <pre><code>from rezen import RezenClient\n\nclient = RezenClient()\nagent_id = \"agent-uuid-here\"\n\n# Get all transactions for an agent\nall_transactions = client.transactions.get_agent_transactions(agent_id)\nprint(f\"Total transactions: {len(all_transactions)}\")\n\n# Get only current/active transactions\ncurrent = client.transactions.get_agent_current_transactions(agent_id)\nprint(f\"Active transactions: {len(current)}\")\n\n# Get only current listings\nlistings = client.transactions.get_agent_current_listings(agent_id)\nfor listing in listings:\n    print(f\"Property: {listing['property']['address']}\")\n    print(f\"List price: ${listing['listPrice']:,}\")\n</code></pre>"},{"location":"api/transactions/#document-management","title":"Document Management","text":"<p>Document Types</p> <p>Available document operations include:</p> <ul> <li>Summary PDFs: Generate transaction summary reports</li> <li>Document Lists: Get all transaction-related documents</li> <li>Status Reports: Track transaction progress</li> </ul> <p>Document Operations</p> <pre><code># Generate summary PDF\npdf_data = client.transactions.get_transaction_summary_pdf(transaction_id)\n\n# Get money transfers\ntransfers = client.transactions.get_money_transfers(transaction_id)\nfor transfer in transfers:\n    print(f\"Transfer: {transfer['amount']} - Status: {transfer['status']}\")\n</code></pre>"},{"location":"api/transactions/#next-steps","title":"Next Steps","text":"<ul> <li> <p>\ud83d\udd27 Transaction Builder</p> <p>Create new transactions from scratch</p> </li> <li> <p>\ud83d\udc54 Agents API</p> <p>Find agents to add to transactions</p> </li> <li> <p>\u2705\ud83d\udcc4 Checklist API</p> <p>Manage transaction checklists and documents</p> </li> <li> <p>\u26a0\ufe0f Exceptions</p> <p>Handle transaction-related errors</p> </li> </ul>"},{"location":"api/users/","title":"Users API","text":"<p>Access user information, team membership, and office details.</p>"},{"location":"api/users/#overview","title":"Overview","text":"<p>Users API Features</p> <ul> <li>Current User Info: Get authenticated user's profile and details</li> <li>User Lookup: Find users by ID</li> <li>Team Information: Access user's team and office membership</li> <li>Keymaker IDs: Retrieve associated agent IDs for users</li> <li>Office Details: Get user's office information</li> </ul> <p>New API Addition</p> <p>The Users API was added to support owner agent functionality in transactions.</p>"},{"location":"api/users/#quick-start","title":"Quick Start","text":"<pre><code>from rezen import RezenClient\n\nclient = RezenClient()\n\n# Get current authenticated user\ncurrent_user = client.users.get_current_user()\nprint(f\"User: {current_user['firstName']} {current_user['lastName']}\")\nprint(f\"Team ID: {current_user['team']['id']}\")\nprint(f\"Office ID: {current_user['office']['id']}\")\n\n# Get keymaker IDs for transaction owner setup\nkeymaker_ids = client.users.get_keymaker_ids(current_user['id'])\nprint(f\"Agent ID: {keymaker_ids['id']}\")\n</code></pre>"},{"location":"api/users/#core-methods","title":"Core Methods","text":""},{"location":"api/users/#get-current-user","title":"Get Current User","text":"<p>Get current authenticated user information from Yenta.</p> <p>This returns more detailed user information than the keymaker endpoint, including team and office details.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing current user's agent information including:</p> <code>Dict[str, Any]</code> <ul> <li>Basic user info (id, name, email, etc.)</li> </ul> <code>Dict[str, Any]</code> <ul> <li>Team information (teamId, teamName, etc.)</li> </ul> <code>Dict[str, Any]</code> <ul> <li>Office information (officeId, officeName, etc.)</li> </ul> <code>Dict[str, Any]</code> <ul> <li>License details</li> </ul> <code>Dict[str, Any]</code> <ul> <li>And more agent-specific fields</li> </ul> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If not authenticated</p> <code>RezenError</code> <p>If the API request fails</p> Example <pre><code># Get current user with full agent details\nuser = client.users.get_current_user()\nprint(f\"User ID: {user.get('id')}\")\nprint(f\"Name: {user.get('firstName')} {user.get('lastName')}\")\nprint(f\"Team ID: {user.get('teamId')}\")\nprint(f\"Office ID: {user.get('officeId')}\")\n</code></pre> <p>Current User Information</p> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Get current authenticated user details\nuser: Dict[str, Any] = client.users.get_current_user()\n\nprint(f\"Name: {user['firstName']} {user['lastName']}\")\nprint(f\"Email: {user['email']}\")\nprint(f\"User ID: {user['id']}\")\n\n# Access team information\nif 'team' in user:\n    print(f\"Team: {user['team']['name']}\")\n    print(f\"Team ID: {user['team']['id']}\")\n\n# Access office information\nif 'office' in user:\n    print(f\"Office: {user['office']['name']}\")\n    print(f\"Office ID: {user['office']['id']}\")\n</code></pre>"},{"location":"api/users/#get-user-by-id","title":"Get User by ID","text":"<p>Get user information by ID.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>UUID of the user to retrieve</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing user's agent information</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If user not found</p> <code>RezenError</code> <p>If the API request fails</p> Example <pre><code># Get user by ID\nuser = client.users.get_user_by_id(\"550e8400-e29b-41d4-a716-446655440000\")\nprint(f\"Name: {user.get('firstName')} {user.get('lastName')}\")\n</code></pre>"},{"location":"api/users/#get-keymaker-ids","title":"Get Keymaker IDs","text":"<p>Get keymaker IDs for the given Yenta IDs.</p> <p>Note: For owner agent setup in transactions, you typically don't need this method. The user ID from get_current_user() can be used directly as the agent ID.</p> <p>Parameters:</p> Name Type Description Default <code>yenta_ids</code> <code>List[str]</code> <p>List of Yenta user IDs (UUIDs)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing keymaker IDs or list of keymaker IDs</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If yenta_ids is empty or invalid</p> <code>RezenError</code> <p>If the API request fails</p> Example <pre><code># Get keymaker IDs for Yenta users\nyenta_ids = [\"id1\", \"id2\", \"id3\"]\nkeymaker_ids = client.users.get_keymaker_ids(yenta_ids)\n</code></pre> <p>Agent ID for Transactions</p> <p>The <code>get_keymaker_ids()</code> method returns the agent ID needed for owner agent operations in transactions.</p>"},{"location":"api/users/#working-with-owner-agents","title":"Working with Owner Agents","text":"<p>Owner Agent Integration</p> <p>The Users API is essential for setting up owner agents in transactions. Here's the complete workflow:</p>"},{"location":"api/users/#get-required-ids-for-owner-agent","title":"Get Required IDs for Owner Agent","text":"<pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Step 1: Get current user info\nuser: Dict[str, Any] = client.users.get_current_user()\nteam_id: str = user['team']['id']\noffice_id: str = user['office']['id']\n\n# Step 2: Get agent ID from keymaker\nkeymaker: Dict[str, Any] = client.users.get_keymaker_ids(user['id'])\nagent_id: str = keymaker['id']\n\n# Step 3: Use in transaction owner agent setup\nowner_data: Dict[str, Any] = {\n    \"ownerAgent\": {\n        \"agentId\": agent_id,\n        \"role\": \"BUYERS_AGENT\"  # or \"SELLERS_AGENT\"\n    },\n    \"officeId\": office_id,\n    \"teamId\": team_id\n}\n\n# Apply to transaction (after required setup steps)\nclient.transaction_builder.update_owner_agent_info(builder_id, owner_data)\n</code></pre>"},{"location":"api/users/#convenience-method","title":"Convenience Method","text":"<p>Simplified Approach</p> <p>The Transaction Builder provides a convenience method that handles all the Users API calls for you:</p> <pre><code># Instead of manual steps above, use:\nclient.transaction_builder.set_current_user_as_owner_agent(\n    builder_id,\n    role=\"BUYERS_AGENT\"\n)\n</code></pre>"},{"location":"api/users/#response-structures","title":"Response Structures","text":""},{"location":"api/users/#user-object","title":"User Object","text":"<pre><code>{\n    \"id\": \"user-uuid\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+1234567890\",\n    \"team\": {\n        \"id\": \"team-uuid\",\n        \"name\": \"Team Excellence\",\n        \"status\": \"ACTIVE\"\n    },\n    \"office\": {\n        \"id\": \"office-uuid\", \n        \"name\": \"Main Office\",\n        \"address\": \"123 Main St\",\n        \"city\": \"Salt Lake City\",\n        \"state\": \"UT\"\n    },\n    \"role\": \"AGENT\",\n    \"status\": \"ACTIVE\"\n}\n</code></pre>"},{"location":"api/users/#keymaker-response","title":"Keymaker Response","text":"<pre><code>{\n    \"id\": \"agent-uuid\",  # This is the agent ID for transactions\n    \"userId\": \"user-uuid\",\n    \"agentStatus\": \"ACTIVE\",\n    \"licenseNumber\": \"123456\",\n    \"licenseState\": \"UT\"\n}\n</code></pre>"},{"location":"api/users/#common-use-cases","title":"Common Use Cases","text":"<p>User Information Workflows</p> Owner Agent SetupTeam Member Lookup <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Get all required info for owner agent\nuser: Dict[str, Any] = client.users.get_current_user()\nkeymaker: Dict[str, Any] = client.users.get_keymaker_ids(user['id'])\n\nowner_info = {\n    \"agent_id\": keymaker['id'],\n    \"team_id\": user['team']['id'],\n    \"office_id\": user['office']['id'],\n    \"user_name\": f\"{user['firstName']} {user['lastName']}\"\n}\n\nprint(\"Owner agent info collected:\")\nprint(f\"  Agent: {owner_info['user_name']}\")\nprint(f\"  Agent ID: {owner_info['agent_id']}\")\nprint(f\"  Team ID: {owner_info['team_id']}\")\nprint(f\"  Office ID: {owner_info['office_id']}\")\n</code></pre> <pre><code># Get team member details\nteam_member_id = \"member-user-uuid\"\nmember = client.users.get_user_by_id(team_member_id)\n\n# Get their agent ID if needed\nmember_keymaker = client.users.get_keymaker_ids(team_member_id)\n\nprint(f\"Team member: {member['firstName']} {member['lastName']}\")\nprint(f\"Agent ID: {member_keymaker['id']}\")\n</code></pre>"},{"location":"api/users/#error-handling","title":"Error Handling","text":"<p>Common Errors</p> <pre><code>from rezen import RezenClient\nfrom rezen.exceptions import NotFoundError, UnauthorizedError\n\nclient = RezenClient()\n\ntry:\n    user = client.users.get_current_user()\nexcept UnauthorizedError:\n    print(\"Invalid or missing API key\")\nexcept Exception as e:\n    print(f\"Error getting user info: {e}\")\n\n# Handle missing keymaker data\ntry:\n    keymaker = client.users.get_keymaker_ids(user_id)\nexcept NotFoundError:\n    print(\"User does not have associated agent ID\")\n</code></pre>"},{"location":"api/users/#integration-with-transaction-builder","title":"Integration with Transaction Builder","text":"<p>Critical Sequence for Owner Agents</p> <p>When using Users API data for owner agents, you MUST follow this sequence:</p> <ol> <li>Create transaction (<code>create_transaction_builder</code>)</li> <li>Add location info (<code>update_location_info</code>) </li> <li>Add price/date info (<code>update_price_and_date_info</code>)</li> <li>Add buyers/sellers (<code>add_buyer</code>/<code>add_seller</code>)</li> <li>THEN add owner agent using Users API data</li> </ol> <p>See Transaction Builder - Owner Agents for complete details.</p>"},{"location":"api/users/#next-steps","title":"Next Steps","text":"<ul> <li> <p>\ud83d\udd27 Transaction Builder</p> <p>Use user data to set up owner agents in transactions</p> </li> <li> <p>\ud83d\udc65 Teams API</p> <p>Access more detailed team information</p> </li> <li> <p>\ud83d\udc54 Agents API</p> <p>Search for agents beyond current user</p> </li> </ul>"},{"location":"development/","title":"Development Guide","text":"<p>This guide covers setting up the development environment, code quality standards, and contribution workflow for the ReZEN Python client.</p>"},{"location":"development/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ (recommended: Python 3.12)</li> <li>pip or poetry for dependency management</li> <li>Git</li> </ul>"},{"location":"development/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/theperrygroup/rezen.git\ncd rezen\n</code></pre></p> </li> <li> <p>Set up virtual environment:    <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install development dependencies:    <pre><code>pip install -r requirements-dev.txt\n</code></pre></p> </li> <li> <p>Install pre-commit hooks (recommended):    <pre><code>pip install pre-commit\npre-commit install\n</code></pre></p> </li> <li> <p>Set up environment variables:    <pre><code>echo \"REZEN_API_KEY=your_api_key_here\" &gt; .env\n</code></pre></p> </li> </ol>"},{"location":"development/#code-quality-standards","title":"\ud83d\udd27 Code Quality Standards","text":""},{"location":"development/#formatting-and-linting","title":"Formatting and Linting","text":"<p>This project enforces strict code quality standards:</p> <ul> <li>Black: Code formatting (line length: 88)</li> <li>isort: Import sorting (compatible with Black)</li> <li>flake8: Linting and style checking</li> <li>mypy: Static type checking</li> <li>pytest: Testing framework</li> </ul>"},{"location":"development/#running-quality-checks","title":"Running Quality Checks","text":"<pre><code># Format code\nblack rezen tests\nisort rezen tests\n\n# Lint code\nflake8 rezen tests\n\n# Type checking\nmypy rezen\n\n# Run tests with coverage\npytest --cov=rezen --cov-report=html\n</code></pre>"},{"location":"development/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Pre-commit hooks automatically run on every commit:</p> <pre><code># Install pre-commit\npip install pre-commit\npre-commit install\n\n# Run manually on all files\npre-commit run --all-files\n</code></pre>"},{"location":"development/#documentation-standards","title":"\ud83d\udcdd Documentation Standards","text":""},{"location":"development/#docstring-requirements","title":"Docstring Requirements","text":"<p>All public functions, methods, and classes must have Google-style docstrings:</p> <pre><code>def search_active_agents(\n    self,\n    page_number: int = 0,\n    page_size: int = 50,\n    name: Optional[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"Search for active agents with filtering options.\n\n    Args:\n        page_number: Zero-based page number for pagination\n        page_size: Number of results per page (max 100)\n        name: Filter by agent name (partial match)\n\n    Returns:\n        Dictionary containing search results and pagination info\n\n    Raises:\n        ValidationError: If parameters are invalid\n        AuthenticationError: If API key is invalid\n\n    Example:\n        &gt;&gt;&gt; client = AgentsClient(api_key=\"your_key\")\n        &gt;&gt;&gt; results = client.search_active_agents(\n        ...     page_size=10,\n        ...     name=\"Smith\"\n        ... )\n        &gt;&gt;&gt; print(f\"Found {results['totalCount']} agents\")\n    \"\"\"\n</code></pre>"},{"location":"development/#type-hints","title":"Type Hints","text":"<ul> <li>All function parameters must have type hints</li> <li>All return values must have type hints</li> <li>Use <code>Optional[T]</code> for nullable parameters</li> <li>Use <code>Union[T, U]</code> sparingly; prefer overloads</li> <li>Import types from <code>typing</code> module as needed</li> </ul>"},{"location":"development/#documentation-updates","title":"Documentation Updates","text":"<p>When making code changes, always update:</p> <ol> <li>Function docstrings - Keep examples current</li> <li>API reference - Update <code>docs/api/index.md</code></li> <li>Examples - Update <code>docs/guides/examples.md</code></li> <li>Changelog - Add entry to <code>docs/changelog.md</code></li> </ol>"},{"location":"development/#testing-guidelines","title":"\ud83e\uddea Testing Guidelines","text":""},{"location":"development/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 test_agents.py          # Agent API tests\n\u251c\u2500\u2500 test_client.py          # Main client tests\n\u251c\u2500\u2500 test_directory.py       # Directory API tests\n\u251c\u2500\u2500 test_exceptions.py      # Exception handling tests\n\u251c\u2500\u2500 test_teams.py          # Teams API tests\n\u2514\u2500\u2500 test_transactions.py   # Transaction API tests\n</code></pre>"},{"location":"development/#test-requirements","title":"Test Requirements","text":"<ul> <li>100% test coverage for all new code</li> <li>Descriptive test names explaining what is tested</li> <li>Mock external API calls using <code>responses</code> library</li> <li>Test error conditions not just happy paths</li> </ul>"},{"location":"development/#writing-tests","title":"Writing Tests","text":"<pre><code>@responses.activate\ndef test_search_agents_with_filters(self, client: AgentsClient) -&gt; None:\n    \"\"\"Test agent search with multiple filter parameters.\"\"\"\n    # Arrange\n    mock_response = {\n        \"agents\": [{\"id\": \"agent-123\", \"name\": \"John Smith\"}],\n        \"totalCount\": 1\n    }\n    responses.add(\n        responses.GET,\n        \"https://yenta.therealbrokerage.com/api/v1/agents/search/active\",\n        json=mock_response,\n        status=200,\n    )\n\n    # Act\n    result = client.search_active_agents(\n        name=\"Smith\",\n        page_size=10\n    )\n\n    # Assert\n    assert result == mock_response\n    assert len(responses.calls) == 1\n\n    # Verify request parameters\n    request_url = responses.calls[0].request.url\n    assert \"name=Smith\" in request_url\n    assert \"pageSize=10\" in request_url\n</code></pre>"},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/test_agents.py\n\n# Run with coverage\npytest --cov=rezen --cov-report=html\n\n# Run tests in parallel\npytest -n auto\n\n# Run tests with verbose output\npytest -v\n</code></pre>"},{"location":"development/#development-workflow","title":"\ud83d\udd04 Development Workflow","text":""},{"location":"development/#branch-strategy","title":"Branch Strategy","text":"<ul> <li><code>main</code> - Production-ready code</li> <li><code>develop</code> - Integration branch for features</li> <li><code>feature/feature-name</code> - Individual features</li> <li><code>bugfix/issue-description</code> - Bug fixes</li> <li><code>hotfix/critical-fix</code> - Emergency fixes</li> </ul>"},{"location":"development/#contribution-process","title":"Contribution Process","text":"<ol> <li> <p>Create feature branch:    <pre><code>git checkout -b feature/new-endpoint\n</code></pre></p> </li> <li> <p>Make changes following code quality standards</p> </li> <li> <p>Run quality checks:    <pre><code>pre-commit run --all-files\npytest --cov=rezen\n</code></pre></p> </li> <li> <p>Update documentation as needed</p> </li> <li> <p>Commit with descriptive message:    <pre><code>git commit -m \"feat: add search_transactions endpoint\n\n- Add new endpoint for transaction search\n- Include pagination and filtering options\n- Add comprehensive tests with 100% coverage\n- Update API reference documentation\"\n</code></pre></p> </li> <li> <p>Push and create pull request:    <pre><code>git push origin feature/new-endpoint\n</code></pre></p> </li> </ol>"},{"location":"development/#commit-message-format","title":"Commit Message Format","text":"<p>Follow conventional commits:</p> <ul> <li><code>feat:</code> - New features</li> <li><code>fix:</code> - Bug fixes</li> <li><code>docs:</code> - Documentation updates</li> <li><code>style:</code> - Code style changes</li> <li><code>refactor:</code> - Code refactoring</li> <li><code>test:</code> - Test additions/updates</li> <li><code>chore:</code> - Maintenance tasks</li> </ul>"},{"location":"development/#debugging","title":"\ud83d\udc1b Debugging","text":""},{"location":"development/#common-issues","title":"Common Issues","text":"<ol> <li>Import errors: Ensure you're in the virtual environment</li> <li>API errors: Check your API key in <code>.env</code></li> <li>Test failures: Run <code>pytest -v</code> for detailed output</li> <li>Type errors: Run <code>mypy rezen</code> to identify issues</li> </ol>"},{"location":"development/#debugging-tools","title":"Debugging Tools","text":"<pre><code># Debug specific test\npytest tests/test_agents.py::TestAgentsClient::test_search_agents -v -s\n\n# Debug with pdb\npytest --pdb tests/test_agents.py\n\n# Generate coverage report\npytest --cov=rezen --cov-report=html\nopen htmlcov/index.html\n</code></pre>"},{"location":"development/#release-process","title":"\ud83d\udce6 Release Process","text":""},{"location":"development/#version-management","title":"Version Management","text":"<ol> <li>Update version in <code>rezen/__init__.py</code></li> <li>Update version in <code>pyproject.toml</code></li> <li>Update <code>docs/changelog.md</code></li> <li>Create git tag: <code>git tag v1.2.0</code></li> </ol>"},{"location":"development/#publishing","title":"Publishing","text":"<pre><code># Build package\npython -m build\n\n# Upload to PyPI (maintainers only)\ntwine upload dist/*\n</code></pre>"},{"location":"development/#resources","title":"\ud83d\udd17 Resources","text":"<ul> <li>ReZEN API Documentation</li> <li>Python Type Hints Guide</li> <li>Google Python Style Guide</li> <li>Conventional Commits</li> <li>pytest Documentation</li> </ul>"},{"location":"development/#getting-help","title":"\ud83c\udd98 Getting Help","text":"<ul> <li>Documentation: Check the full documentation site</li> <li>Issues: Open a GitHub issue for bugs or questions</li> <li>Discussions: Use GitHub Discussions for general questions</li> <li>Email: Contact the maintainers at dev@theperrygroup.com</li> </ul>"},{"location":"development/contributing/","title":"Contributing Guide","text":"<p>Thank you for your interest in contributing to the ReZEN Python API client! This guide will help you get started with contributing code, documentation, and improvements.</p>"},{"location":"development/contributing/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Getting Started</li> <li>Development Setup</li> <li>Code Standards</li> <li>Testing Guidelines</li> <li>Documentation</li> <li>Pull Request Process</li> <li>Issue Reporting</li> <li>Release Process</li> </ul>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python: 3.7 or higher</li> <li>Git: For version control</li> <li>GitHub account: For submitting contributions</li> <li>ReZEN API key: For testing (contact support if needed)</li> </ul>"},{"location":"development/contributing/#ways-to-contribute","title":"Ways to Contribute","text":"<ul> <li>\ud83d\udc1b Bug fixes - Fix issues found in the codebase</li> <li>\ud83d\ude80 New features - Add new API endpoints or functionality</li> <li>\ud83d\udcd6 Documentation - Improve docs, examples, or guides</li> <li>\ud83e\uddea Tests - Add test coverage or improve existing tests</li> <li>\ud83d\udd27 Performance - Optimize code for better performance</li> <li>\ud83d\udca1 Examples - Create real-world usage examples</li> </ul>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":""},{"location":"development/contributing/#1-fork-and-clone","title":"1. Fork and Clone","text":"<pre><code># Fork the repository on GitHub, then clone your fork\ngit clone https://github.com/YOUR_USERNAME/rezen-python-client.git\ncd rezen-python-client\n\n# Add upstream remote\ngit remote add upstream https://github.com/original-org/rezen-python-client.git\n</code></pre>"},{"location":"development/contributing/#2-set-up-development-environment","title":"2. Set Up Development Environment","text":"<pre><code># Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\nsource venv/bin/activate  # Linux/macOS\n# or venv\\Scripts\\activate  # Windows\n\n# Install development dependencies\npip install -r requirements-dev.txt\n\n# Install package in development mode\npip install -e .\n</code></pre>"},{"location":"development/contributing/#3-verify-setup","title":"3. Verify Setup","text":"<pre><code># Run tests to ensure everything works\npytest\n\n# Check code formatting\nblack --check rezen tests\nisort --check-only rezen tests\n\n# Run type checking\nmypy rezen\n\n# Check test coverage\npytest --cov=rezen --cov-report=html\n</code></pre>"},{"location":"development/contributing/#4-set-up-pre-commit-hooks-recommended","title":"4. Set Up Pre-commit Hooks (Recommended)","text":"<pre><code># Install pre-commit\npip install pre-commit\n\n# Install hooks\npre-commit install\n\n# Test hooks\npre-commit run --all-files\n</code></pre>"},{"location":"development/contributing/#code-standards","title":"Code Standards","text":""},{"location":"development/contributing/#python-style","title":"Python Style","text":"<p>We follow PEP 8 with some specific guidelines:</p> <pre><code># \u2705 Good: Clear function names with type hints\ndef get_agent_by_email(email_address: str) -&gt; Dict[str, Any]:\n    \"\"\"Get agent information by email address.\n\n    Args:\n        email_address: The agent's email address\n\n    Returns:\n        Agent data dictionary\n\n    Raises:\n        NotFoundError: If agent is not found\n        ValidationError: If email format is invalid\n    \"\"\"\n    if '@' not in email_address:\n        raise ValidationError(f\"Invalid email format: {email_address}\")\n\n    return self.get(\"agents\", params={\"email\": email_address})\n\n# \u274c Bad: No type hints, unclear naming\ndef get_agent(email):\n    return self.get(\"agents\", params={\"email\": email})\n</code></pre>"},{"location":"development/contributing/#code-formatting","title":"Code Formatting","text":"<p>We use automated tools for consistent formatting:</p> <pre><code># Format code with Black\nblack rezen tests\n\n# Sort imports with isort\nisort rezen tests\n\n# Check with flake8\nflake8 rezen tests\n</code></pre>"},{"location":"development/contributing/#type-hints","title":"Type Hints","text":"<p>All public methods must have complete type hints:</p> <pre><code>from typing import Dict, List, Optional, Any, Union\n\n# \u2705 Complete type hints\ndef search_teams(\n    self,\n    status: Optional[Union[TeamStatus, str]] = None,\n    page_size: Optional[int] = None\n) -&gt; Dict[str, Any]:\n    pass\n\n# \u274c Missing type hints\ndef search_teams(self, status=None, page_size=None):\n    pass\n</code></pre>"},{"location":"development/contributing/#docstrings","title":"Docstrings","text":"<p>Use Google-style docstrings for all public methods:</p> <pre><code>def create_transaction_builder(self, builder_type: str = \"TRANSACTION\") -&gt; Dict[str, Any]:\n    \"\"\"Create a new transaction builder.\n\n    Creates a new transaction builder instance that can be used to construct\n    real estate transactions with participants, property details, and financial information.\n\n    Args:\n        builder_type: Type of builder to create. Must be \"TRANSACTION\" or \"LISTING\".\n                     Defaults to \"TRANSACTION\".\n\n    Returns:\n        Dictionary containing the created transaction builder data with at least:\n        - id: Unique identifier for the transaction builder\n        - type: The builder type that was created\n        - status: Current status of the builder\n\n    Raises:\n        ValidationError: If builder_type is not valid\n        AuthenticationError: If API key is invalid\n        ServerError: If the API server encounters an error\n\n    Example:\n        Create a basic transaction builder:\n\n        &gt;&gt;&gt; client = RezenClient()\n        &gt;&gt;&gt; response = client.transaction_builder.create_transaction_builder()\n        &gt;&gt;&gt; transaction_id = response['id']\n\n        Create a listing builder:\n\n        &gt;&gt;&gt; response = client.transaction_builder.create_transaction_builder(\"LISTING\")\n    \"\"\"\n</code></pre>"},{"location":"development/contributing/#error-handling","title":"Error Handling","text":"<p>Use specific exceptions and provide helpful error messages:</p> <pre><code>from .exceptions import ValidationError, NotFoundError\n\ndef get_transaction(self, transaction_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Get transaction details.\"\"\"\n    if not transaction_id:\n        raise ValidationError(\"Transaction ID cannot be empty\")\n\n    if not isinstance(transaction_id, str):\n        raise ValidationError(f\"Transaction ID must be string, got {type(transaction_id)}\")\n\n    try:\n        return self.get(f\"transactions/{transaction_id}\")\n    except NotFoundError:\n        raise NotFoundError(\n            f\"Transaction '{transaction_id}' not found. \"\n            f\"Verify the ID is correct and the transaction exists.\"\n        )\n</code></pre>"},{"location":"development/contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development/contributing/#test-structure","title":"Test Structure","text":"<p>We use pytest with a specific structure:</p> <pre><code>tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 conftest.py                 # Shared fixtures\n\u251c\u2500\u2500 test_client.py             # Main client tests\n\u251c\u2500\u2500 test_transaction_builder.py # Transaction builder tests\n\u251c\u2500\u2500 test_transactions.py       # Transactions API tests\n\u251c\u2500\u2500 test_teams.py              # Teams API tests\n\u251c\u2500\u2500 test_agents.py             # Agents API tests\n\u251c\u2500\u2500 test_exceptions.py         # Exception handling tests\n\u2514\u2500\u2500 test_integration.py        # Integration tests\n</code></pre>"},{"location":"development/contributing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/contributing/#unit-tests","title":"Unit Tests","text":"<pre><code>import pytest\nfrom unittest.mock import Mock, patch\nfrom rezen import RezenClient\nfrom rezen.exceptions import ValidationError, NotFoundError\n\nclass TestTransactionBuilder:\n\n    def setup_method(self):\n        \"\"\"Set up test fixtures before each test method.\"\"\"\n        self.client = RezenClient(api_key=\"test_key\")\n\n    @patch('rezen.transaction_builder.TransactionBuilderClient._request')\n    def test_create_transaction_builder_success(self, mock_request):\n        \"\"\"Test successful transaction builder creation.\"\"\"\n        # Arrange\n        expected_response = {\"id\": \"tx-12345\", \"type\": \"TRANSACTION\"}\n        mock_request.return_value = expected_response\n\n        # Act\n        result = self.client.transaction_builder.create_transaction_builder()\n\n        # Assert\n        assert result == expected_response\n        mock_request.assert_called_once_with(\n            \"POST\", \"transaction-builder\",\n            params={\"type\": \"TRANSACTION\"}\n        )\n\n    def test_create_transaction_builder_invalid_type(self):\n        \"\"\"Test transaction builder creation with invalid type.\"\"\"\n        with pytest.raises(ValidationError, match=\"Invalid builder type\"):\n            self.client.transaction_builder.create_transaction_builder(\"INVALID\")\n\n    @pytest.mark.parametrize(\"builder_type,expected_params\", [\n        (\"TRANSACTION\", {\"type\": \"TRANSACTION\"}),\n        (\"LISTING\", {\"type\": \"LISTING\"}),\n    ])\n    def test_create_transaction_builder_types(self, builder_type, expected_params):\n        \"\"\"Test transaction builder creation with different types.\"\"\"\n        with patch.object(self.client.transaction_builder, '_request') as mock_request:\n            mock_request.return_value = {\"id\": \"test\"}\n\n            self.client.transaction_builder.create_transaction_builder(builder_type)\n\n            mock_request.assert_called_once_with(\n                \"POST\", \"transaction-builder\", params=expected_params\n            )\n</code></pre>"},{"location":"development/contributing/#integration-tests","title":"Integration Tests","text":"<pre><code>import pytest\nfrom rezen import RezenClient\n\nclass TestIntegration:\n    \"\"\"Integration tests that hit real API endpoints.\"\"\"\n\n    @pytest.mark.integration\n    def test_teams_search_integration(self):\n        \"\"\"Test actual teams search API call.\"\"\"\n        client = RezenClient()  # Uses real API key from environment\n\n        teams = client.teams.search_teams(status=\"ACTIVE\", page_size=5)\n\n        assert isinstance(teams, list)\n        assert len(teams) &lt;= 5\n\n        if teams:\n            team = teams[0]\n            assert 'id' in team\n            assert 'name' in team\n            assert team.get('status') == 'ACTIVE'\n</code></pre>"},{"location":"development/contributing/#test-configuration","title":"Test Configuration","text":"<p>Add to <code>conftest.py</code>:</p> <pre><code>import pytest\nimport os\n\ndef pytest_configure(config):\n    \"\"\"Configure pytest with custom markers.\"\"\"\n    config.addinivalue_line(\n        \"markers\", \"integration: marks tests as integration tests\"\n    )\n\n@pytest.fixture\ndef mock_api_key():\n    \"\"\"Provide a test API key.\"\"\"\n    return \"test_api_key_12345\"\n\n@pytest.fixture\ndef sample_transaction_data():\n    \"\"\"Provide sample transaction data for tests.\"\"\"\n    return {\n        \"type\": \"PURCHASE\",\n        \"property\": {\n            \"address\": \"123 Test St\",\n            \"city\": \"Test City\",\n            \"state\": \"CA\",\n            \"zipCode\": \"90210\"\n        },\n        \"purchase_price\": 500000\n    }\n</code></pre>"},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/test_teams.py\n\n# Run tests with coverage\npytest --cov=rezen --cov-report=html\n\n# Run only unit tests (skip integration)\npytest -m \"not integration\"\n\n# Run only integration tests\npytest -m integration\n\n# Run tests in parallel\npytest -n auto\n\n# Run tests with verbose output\npytest -v\n</code></pre>"},{"location":"development/contributing/#test-coverage-requirements","title":"Test Coverage Requirements","text":"<ul> <li>Minimum coverage: 95% overall</li> <li>New code: 100% coverage required</li> <li>Critical paths: Authentication, API calls, error handling must have 100% coverage</li> </ul> <p>Check coverage:</p> <pre><code># Generate coverage report\npytest --cov=rezen --cov-report=html\nopen htmlcov/index.html  # View in browser\n\n# Check coverage for specific module\npytest --cov=rezen.teams --cov-report=term-missing\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":""},{"location":"development/contributing/#code-documentation","title":"Code Documentation","text":"<p>All public methods require docstrings:</p> <pre><code>def search_active_agents(\n    self,\n    page_number: Optional[int] = None,\n    page_size: Optional[int] = None,\n    name: Optional[str] = None\n) -&gt; Dict[str, Any]:\n    \"\"\"Search for active agents with filtering options.\n\n    Searches the agent database for active agents matching the specified\n    criteria. Results are paginated and can be filtered by various attributes.\n\n    Args:\n        page_number: Page number for pagination (0-based). Defaults to 0.\n        page_size: Number of results per page (1-200). Defaults to 20.\n        name: Filter agents by name (partial match, case-insensitive).\n              Searches both first and last names.\n\n    Returns:\n        Dictionary containing:\n        - content: List of agent dictionaries\n        - page: Current page information\n        - total: Total number of matching agents\n\n    Raises:\n        ValidationError: If page_size is outside valid range (1-200)\n        AuthenticationError: If API key is invalid or missing\n        RateLimitError: If too many requests made in short time\n\n    Example:\n        Search for agents named \"John\":\n\n        &gt;&gt;&gt; client = RezenClient()\n        &gt;&gt;&gt; agents = client.agents.search_active_agents(name=\"John\", page_size=10)\n        &gt;&gt;&gt; print(f\"Found {len(agents['content'])} agents\")\n\n        Paginate through all agents:\n\n        &gt;&gt;&gt; page = 0\n        &gt;&gt;&gt; all_agents = []\n        &gt;&gt;&gt; while True:\n        ...     result = client.agents.search_active_agents(page_number=page)\n        ...     if not result['content']:\n        ...         break\n        ...     all_agents.extend(result['content'])\n        ...     page += 1\n    \"\"\"\n</code></pre>"},{"location":"development/contributing/#user-documentation","title":"User Documentation","text":"<p>When adding new features, update relevant documentation:</p> <ol> <li>API Reference (<code>docs/api/index.md</code>)</li> <li>Examples (<code>docs/guides/examples.md</code>)</li> <li>README (if major feature)</li> <li>Changelog (<code>docs/changelog.md</code>)</li> </ol>"},{"location":"development/contributing/#documentation-style","title":"Documentation Style","text":"<ul> <li>Use clear, concise language</li> <li>Include working code examples</li> <li>Add parameter descriptions and return value info</li> <li>Note any breaking changes</li> <li>Use emoji for visual organization (sparingly)</li> </ul>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":""},{"location":"development/contributing/#1-create-feature-branch","title":"1. Create Feature Branch","text":"<pre><code># Update main branch\ngit checkout main\ngit pull upstream main\n\n# Create feature branch\ngit checkout -b feature/add-agent-search\n# or\ngit checkout -b fix/transaction-validation-error\n</code></pre>"},{"location":"development/contributing/#2-make-changes","title":"2. Make Changes","text":"<ul> <li>Write code following our standards</li> <li>Add/update tests for all changes</li> <li>Update documentation if needed</li> <li>Ensure all tests pass locally</li> </ul>"},{"location":"development/contributing/#3-commit-changes","title":"3. Commit Changes","text":"<p>Use conventional commit messages:</p> <pre><code># Feature additions\ngit commit -m \"feat: add agent search by location endpoint\"\n\n# Bug fixes\ngit commit -m \"fix: handle empty response in transaction search\"\n\n# Documentation\ngit commit -m \"docs: add examples for team management\"\n\n# Tests\ngit commit -m \"test: add coverage for error handling paths\"\n\n# Refactoring\ngit commit -m \"refactor: simplify exception handling logic\"\n</code></pre>"},{"location":"development/contributing/#4-push-and-create-pull-request","title":"4. Push and Create Pull Request","text":"<pre><code># Push to your fork\ngit push origin feature/add-agent-search\n\n# Create pull request on GitHub\n# Use the PR template provided\n</code></pre>"},{"location":"development/contributing/#pull-request-template","title":"Pull Request Template","text":"<pre><code>## Description\nBrief description of changes made.\n\n## Type of Change\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] Documentation update\n\n## Testing\n- [ ] All existing tests pass\n- [ ] New tests added for new functionality\n- [ ] Manual testing performed\n- [ ] Integration tests updated if needed\n\n## Documentation\n- [ ] Code documentation updated (docstrings)\n- [ ] User documentation updated\n- [ ] Examples updated/added\n- [ ] Changelog updated\n\n## Checklist\n- [ ] Code follows project style guidelines\n- [ ] Self-review completed\n- [ ] Breaking changes documented\n- [ ] Tests provide adequate coverage\n</code></pre>"},{"location":"development/contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks: CI/CD runs tests, linting, type checking</li> <li>Code review: Maintainers review code for quality and standards</li> <li>Testing: Verify functionality works as expected</li> <li>Documentation: Ensure docs are complete and accurate</li> <li>Approval: At least one maintainer approval required</li> <li>Merge: Squash and merge to main branch</li> </ol>"},{"location":"development/contributing/#issue-reporting","title":"Issue Reporting","text":""},{"location":"development/contributing/#bug-reports","title":"Bug Reports","text":"<p>Use the bug report template:</p> <pre><code>**Bug Description**\nClear description of what the bug is.\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. Create client with '...'\n2. Call method '....'\n3. Pass parameters '....'\n4. See error\n\n**Expected Behavior**\nWhat you expected to happen.\n\n**Actual Behavior**\nWhat actually happened.\n\n**Environment**\n- OS: [e.g. macOS 12.0]\n- Python version: [e.g. 3.9.0]\n- ReZEN client version: [e.g. 1.0.7]\n\n**Code Sample**\n```python\n# Minimal code sample that reproduces the issue\nclient = RezenClient()\n# ... rest of code\n</code></pre> <p>Error Output <pre><code>Full error traceback here\n</code></pre></p> <p>Additional Context Any other context about the problem. <pre><code>### Feature Requests\n\nUse the feature request template:\n\n```markdown\n**Feature Description**\nClear description of the feature you'd like to see.\n\n**Use Case**\nExplain why this feature would be useful.\n\n**Proposed Solution**\nHow you think this should work.\n\n**Alternative Solutions**\nAny alternative approaches you've considered.\n\n**Additional Context**\nAny other context or screenshots about the feature request.\n</code></pre></p>"},{"location":"development/contributing/#release-process","title":"Release Process","text":""},{"location":"development/contributing/#version-numbering","title":"Version Numbering","text":"<p>We use Semantic Versioning:</p> <ul> <li>MAJOR (1.0.0 \u2192 2.0.0): Breaking changes</li> <li>MINOR (1.0.0 \u2192 1.1.0): New features, backwards compatible</li> <li>PATCH (1.0.0 \u2192 1.0.1): Bug fixes, backwards compatible</li> </ul>"},{"location":"development/contributing/#release-checklist","title":"Release Checklist","text":"<ol> <li> <p>Update version numbers:    <pre><code># Update version in pyproject.toml and __init__.py\npython scripts/bump_version.py 1.2.0\n</code></pre></p> </li> <li> <p>Update changelog:    <pre><code>## [1.2.0] - 2024-01-15\n\n### Added\n- New agent search by location endpoint\n- Support for team member management\n\n### Fixed\n- Transaction validation error handling\n- Memory leak in batch operations\n\n### Changed\n- Improved error messages for authentication failures\n</code></pre></p> </li> <li> <p>Run full test suite:    <pre><code>pytest --cov=rezen --cov-report=html\nmypy rezen\nblack --check rezen tests\n</code></pre></p> </li> <li> <p>Build and test package:    <pre><code>python -m build\npip install dist/rezen-1.2.0.tar.gz\n# Test installation works\n</code></pre></p> </li> <li> <p>Create release PR:</p> </li> <li>Include version bump and changelog</li> <li> <p>Get approval from maintainers</p> </li> <li> <p>Tag and release:    <pre><code>git tag v1.2.0\ngit push origin v1.2.0\n# GitHub Actions handles PyPI publishing\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":""},{"location":"development/contributing/#development-questions","title":"Development Questions","text":"<ul> <li>GitHub Discussions: For general questions about contributing</li> <li>Discord/Slack: For real-time development chat (if available)</li> <li>Email: support@rezen.com for private questions</li> </ul>"},{"location":"development/contributing/#resources","title":"Resources","text":"<ul> <li>Style Guide: Follow PEP 8 and project conventions above</li> <li>API Documentation: docs/api/index.md</li> <li>Examples: docs/guides/examples.md</li> <li>Python Docs: docs.python.org</li> </ul>"},{"location":"development/contributing/#recognition","title":"Recognition","text":"<p>Contributors will be:</p> <ul> <li>Listed in the project contributors</li> <li>Mentioned in release notes for significant contributions</li> <li>Invited to the contributors' Discord/Slack channel (if available)</li> </ul> <p>Thank you for contributing to the ReZEN Python client! \ud83c\udf89</p> <p>Your contributions help make real estate technology more accessible to developers worldwide.</p>"},{"location":"development/deployment/","title":"Deployment Guide","text":"<p>This guide covers all deployment processes for the ReZEN Python client, consolidated into GitHub Actions workflows.</p>"},{"location":"development/deployment/#quick-overview","title":"\ud83d\ude80 Quick Overview","text":"<p>All deployments are handled automatically through GitHub Actions:</p> <ul> <li>Code Quality: Automatic on every push/PR</li> <li>Testing: Automatic on every push/PR  </li> <li>Documentation: Automatic on docs changes</li> <li>Releases: Manual trigger or tag-based</li> </ul>"},{"location":"development/deployment/#prerequisites","title":"\ud83d\udccb Prerequisites","text":""},{"location":"development/deployment/#github-secrets","title":"GitHub Secrets","text":"<p>Ensure these secrets are configured in your repository:</p> <pre><code># Required for all deployments\nREZEN_API_KEY                 # For running tests\nGITHUB_TOKEN                  # Auto-provided\n\n# Required for PyPI publishing\nPYPI_API_TOKEN               # PyPI API token\n</code></pre>"},{"location":"development/deployment/#automated-workflows","title":"\ud83d\udd04 Automated Workflows","text":""},{"location":"development/deployment/#1-continuous-integration-ciyml","title":"1. Continuous Integration (<code>ci.yml</code>)","text":"<p>Triggers: Every push/PR to <code>main</code> or <code>develop</code></p> <p>What it does: - \u2705 Code quality checks (Black, isort, flake8, mypy) - \ud83d\udd12 Security scanning (Bandit, Safety) - \ud83d\udcdd Config validation (YAML, TOML) - \ud83e\uddea Test suite across Python 3.8-3.12 - \ud83d\udce6 Package build verification</p>"},{"location":"development/deployment/#2-documentation-docsyml","title":"2. Documentation (<code>docs.yml</code>)","text":"<p>Triggers: Changes to <code>docs/</code>, <code>mkdocs.yml</code>, or code</p> <p>What it does: - \ud83d\udd04 Auto-sync API coverage - \ud83d\udcda Build documentation with MkDocs - \ud83d\ude80 Deploy to GitHub Pages - \ud83d\udcac PR comments with build status</p>"},{"location":"development/deployment/#3-release-releaseyml","title":"3. Release (<code>release.yml</code>)","text":"<p>Triggers:  - Tag push (<code>v*</code>) - Manual workflow dispatch</p> <p>What it does: - \ud83c\udff7\ufe0f Version bumping (manual releases) - \u2705 Full test suite - \ud83d\udce6 Package building - \ud83d\ude80 PyPI publishing - \ud83d\udccb GitHub release creation - \ud83d\udcdd Automatic changelog generation</p>"},{"location":"development/deployment/#manual-operations","title":"\ud83d\udee0\ufe0f Manual Operations","text":""},{"location":"development/deployment/#creating-a-release","title":"Creating a Release","text":""},{"location":"development/deployment/#option-1-manual-release-recommended","title":"Option 1: Manual Release (Recommended)","text":"<ol> <li>Go to Actions \u2192 Release \u2192 Run workflow</li> <li>Enter version (e.g., <code>1.2.3</code>)</li> <li>Optionally mark as prerelease</li> <li>Click Run workflow</li> </ol> <p>The workflow will: - Validate version format - Update <code>pyproject.toml</code> and <code>rezen/__init__.py</code> - Create and push the git tag - Run tests and build - Publish to PyPI - Create GitHub release</p>"},{"location":"development/deployment/#option-2-tag-based-release","title":"Option 2: Tag-based Release","text":"<pre><code># Update versions manually\nvim pyproject.toml      # Update version = \"1.2.3\"\nvim rezen/__init__.py   # Update __version__ = \"1.2.3\"\n\n# Commit and tag\ngit add pyproject.toml rezen/__init__.py\ngit commit -m \"Bump version to 1.2.3\"\ngit tag -a v1.2.3 -m \"Release v1.2.3\"\ngit push origin main --tags\n</code></pre>"},{"location":"development/deployment/#local-development","title":"Local Development","text":""},{"location":"development/deployment/#documentation","title":"Documentation","text":"<pre><code># Install dependencies\npip install -r docs/requirements.txt\n\n# Serve locally  \nmkdocs serve\n\n# Build for testing\nmkdocs build\n</code></pre>"},{"location":"development/deployment/#testing","title":"Testing","text":"<pre><code># Install dev dependencies\npip install -e \".[dev]\"\n\n# Run tests\npytest --cov=rezen\n\n# Run quality checks\nblack --check .\nisort --check .\nflake8 .\nmypy rezen/\n</code></pre>"},{"location":"development/deployment/#configuration-files","title":"\ud83d\udd27 Configuration Files","text":""},{"location":"development/deployment/#minimal-configuration","title":"Minimal Configuration","text":"<p>The following files are no longer needed and have been consolidated into GitHub Actions:</p> <ul> <li>\u274c <code>.pre-commit-config.yaml</code> \u2192 Integrated into CI workflow</li> <li>\u274c <code>scripts/bump_version.py</code> \u2192 Integrated into release workflow</li> <li>\u274c <code>scripts/sync_docs.py</code> \u2192 Integrated into docs workflow</li> <li>\u26a0\ufe0f <code>.readthedocs.yml</code> \u2192 Optional (if using RTD alongside GitHub Pages)</li> </ul>"},{"location":"development/deployment/#required-files","title":"Required Files","text":"<ul> <li>\u2705 <code>.github/workflows/</code> \u2192 All automation</li> <li>\u2705 <code>mkdocs.yml</code> \u2192 Documentation config</li> <li>\u2705 <code>pyproject.toml</code> \u2192 Package config</li> <li>\u2705 <code>requirements.txt</code> &amp; <code>requirements-dev.txt</code> \u2192 Dependencies</li> </ul>"},{"location":"development/deployment/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"development/deployment/#release-issues","title":"Release Issues","text":"<p>Version mismatch errors: <pre><code># Check current versions\ngrep version pyproject.toml\ngrep __version__ rezen/__init__.py\n\n# Ensure they match your intended version\n</code></pre></p> <p>PyPI publishing fails: - Verify <code>PYPI_API_TOKEN</code> secret is set - Check if version already exists on PyPI - Ensure package builds successfully</p>"},{"location":"development/deployment/#documentation-issues","title":"Documentation Issues","text":"<p>Build failures: - Check MkDocs configuration in <code>mkdocs.yml</code> - Verify all referenced files exist - Check for syntax errors in markdown</p>"},{"location":"development/deployment/#ci-issues","title":"CI Issues","text":"<p>Code quality failures: <pre><code># Fix formatting\nblack .\nisort .\n\n# Check for issues\nflake8 .\nmypy rezen/\n</code></pre></p> <p>Test failures: - Ensure <code>REZEN_API_KEY</code> is set in secrets - Check for environment-specific issues - Verify all dependencies are installed</p>"},{"location":"development/deployment/#monitoring","title":"\ud83d\udcca Monitoring","text":""},{"location":"development/deployment/#workflow-status","title":"Workflow Status","text":"<p>Monitor deployments at: - GitHub Actions: Repository \u2192 Actions tab - PyPI: https://pypi.org/project/rezen/ - GitHub Pages: https://theperrygroup.github.io/rezen/</p>"},{"location":"development/deployment/#coverage-reports","title":"Coverage Reports","text":"<ul> <li>Codecov: Automatic uploads from CI</li> <li>Security: Bandit reports in CI artifacts</li> <li>Dependencies: Dependabot PRs for updates</li> </ul>"},{"location":"development/deployment/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ol> <li>Always test locally before pushing</li> <li>Use manual releases for better control</li> <li>Write descriptive commit messages for better changelogs</li> <li>Keep dependencies updated via Dependabot</li> <li>Monitor workflow runs for issues</li> <li>Use semantic versioning (e.g., 1.2.3)</li> </ol>"},{"location":"development/deployment/#support","title":"\ud83d\udcde Support","text":"<p>If workflows fail or you need help:</p> <ol> <li>Check workflow logs in GitHub Actions</li> <li>Review this guide for common issues</li> <li>Check repository Issues for known problems</li> <li>Create a new issue with workflow logs attached</li> </ol>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to the ReZEN Python API client! This section will help you get up and running quickly with the ReZEN API.</p>"},{"location":"getting-started/#quick-navigation","title":"\ud83d\ude80 Quick Navigation","text":"<ul> <li> <p>:material-download:{ .lg .middle } Installation</p> <p>Install the ReZEN Python client and set up your development environment</p> <p>:octicons-arrow-right-24: Install Now</p> </li> <li> <p>:material-key:{ .lg .middle } Authentication</p> <p>Configure your API key and set up client authentication</p> <p>:octicons-arrow-right-24: Setup Authentication</p> </li> <li> <p>\ud83d\ude80 Quick Start</p> <p>Make your first API call and explore basic functionality in 5 minutes</p> <p>:octicons-arrow-right-24: Start Tutorial</p> </li> </ul>"},{"location":"getting-started/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>What you'll need</p> <ul> <li>Python 3.8+ installed on your system</li> <li>ReZEN API key (contact your administrator)</li> <li>Basic Python knowledge (we'll guide you through the rest!)</li> </ul>"},{"location":"getting-started/#learning-path","title":"\ud83c\udfaf Learning Path","text":"<p>For the best experience, follow this recommended order:</p>"},{"location":"getting-started/#1-install-the-client-installation-guide","title":"1. Install the Client \u2192 Installation Guide","text":"<p>Get the ReZEN client installed in your Python environment.</p>"},{"location":"getting-started/#2-set-up-authentication-authentication-guide","title":"2. Set Up Authentication \u2192 Authentication Guide","text":"<p>Configure your API key and test your connection.</p>"},{"location":"getting-started/#3-follow-quick-start-quick-start-tutorial","title":"3. Follow Quick Start \u2192 Quick Start Tutorial","text":"<p>Build your first working example with real API calls.</p>"},{"location":"getting-started/#4-explore-examples-examples-guides","title":"4. Explore Examples \u2192 Examples &amp; Guides","text":"<p>See practical examples and common use cases.</p>"},{"location":"getting-started/#what-youll-learn","title":"\ud83d\udca1 What You'll Learn","text":"<p>By the end of this section, you'll be able to:</p> <ul> <li>\u2705 Install and configure the ReZEN Python client</li> <li>\u2705 Authenticate with the ReZEN API</li> <li>\u2705 Make your first successful API calls</li> <li>\u2705 Handle basic errors and responses</li> <li>\u2705 Understand the client structure and organization</li> </ul>"},{"location":"getting-started/#need-help","title":"\ud83c\udd98 Need Help?","text":"<p>Stuck on something?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Review Common Examples</li> <li>See the API Reference for detailed method documentation</li> </ul>"},{"location":"getting-started/#already-experienced","title":"\u26a1 Already Experienced?","text":"<p>If you're already familiar with Python API clients, you might want to jump directly to:</p> <ul> <li>Quick Start - Skip the basics and see real examples</li> <li>API Reference - Dive into the method documentation</li> <li>Examples - See advanced usage patterns</li> </ul> <p>Let's get started! \ud83c\udf89</p>"},{"location":"getting-started/authentication/","title":"Client Setup","text":"<p>The ReZEN Python API client provides multiple ways to authenticate and configure your connection to the ReZEN API platform.</p>"},{"location":"getting-started/authentication/#installation","title":"Installation","text":"<p>Python Package Index</p> <p>Install the ReZEN client using pip:</p> <pre><code>pip install rezen\n</code></pre> <p>Development Installation</p> <p>For development or contributing:</p> <pre><code>git clone https://github.com/theperrygroup/rezen.git\ncd rezen\npip install -e \".[dev]\"\n</code></pre>"},{"location":"getting-started/authentication/#authentication","title":"Authentication","text":""},{"location":"getting-started/authentication/#api-key-configuration","title":"API Key Configuration","text":"\ud83d\udd27 Automatic (Recommended):material-key-variant: Explicit\u2699\ufe0f Custom Configuration <p>The client automatically reads from the <code>REZEN_API_KEY</code> environment variable:</p> <pre><code>import os\nfrom typing import Optional\n\nfrom rezen import RezenClient\n\n# Set environment variable (in your shell or .env file)\nos.environ['REZEN_API_KEY'] = 'your_api_key_here'\n\n# Client automatically uses the environment variable\nclient: RezenClient = RezenClient()\n</code></pre> <p>Environment Files</p> <p>Use a <code>.env</code> file with python-dotenv for local development:</p> .env<pre><code>REZEN_API_KEY=your_api_key_here\n</code></pre> <pre><code>from dotenv import load_dotenv\n\nfrom rezen import RezenClient\n\nload_dotenv()  # Load .env file\nclient: RezenClient = RezenClient()  # Uses REZEN_API_KEY from .env\n</code></pre> <p>Pass the API key directly to the client:</p> <pre><code>from rezen import RezenClient\n\nclient: RezenClient = RezenClient(api_key=\"your_api_key_here\")\n</code></pre> <p>Security Best Practice</p> <p>Never hardcode API keys in your source code. Use environment variables or secure configuration management.</p> <p>Configure both API key and base URL:</p> <pre><code>from rezen import RezenClient\n\nclient: RezenClient = RezenClient(\n    api_key=\"your_api_key_here\",\n    base_url=\"https://custom.api.endpoint.com\"\n)\n</code></pre>"},{"location":"getting-started/authentication/#client-initialization","title":"Client Initialization","text":""},{"location":"getting-started/authentication/#main-rezenclient","title":"Main RezenClient","text":"<p>The primary client provides access to all API modules:</p> Basic Setup<pre><code>from rezen import RezenClient\n\n# Initialize with default settings\nclient: RezenClient = RezenClient()\n\n# Access specialized API modules\ntransaction_builder = client.transaction_builder\ntransactions = client.transactions\nteams = client.teams\nagents = client.agents\n</code></pre> <p>Available Modules</p> Module Purpose <code>client.transaction_builder</code> Create and configure new transactions <code>client.transactions</code> Manage live transactions and participants <code>client.teams</code> Search and filter team information <code>client.agents</code> Agent search and network management"},{"location":"getting-started/authentication/#directory-client","title":"Directory Client","text":"<p>The Directory API uses a separate client with its own endpoint:</p> :material-database: Dedicated Client:material-connection: Unified Access <pre><code>from rezen import DirectoryClient\n\n# Directory client with separate authentication\ndirectory: DirectoryClient = DirectoryClient()\n\n# Or with explicit configuration\ndirectory: DirectoryClient = DirectoryClient(\n    api_key=\"your_api_key_here\",\n    base_url=\"https://yenta.therealbrokerage.com/api/v1\"\n)\n</code></pre> <pre><code>from typing import Dict, List, Any\n\nfrom rezen import RezenClient, DirectoryClient\n\n# Main client for core APIs\nclient: RezenClient = RezenClient()\n\n# Separate directory client\ndirectory: DirectoryClient = DirectoryClient()\n\n# Use both in your application\nteams: List[Dict[str, Any]] = client.teams.search_teams(status=\"ACTIVE\")\ncontacts: List[Dict[str, Any]] = directory.search_contacts(name=\"John Doe\")\n</code></pre>"},{"location":"getting-started/authentication/#configuration-options","title":"Configuration Options","text":""},{"location":"getting-started/authentication/#base-client-parameters","title":"Base Client Parameters","text":"Parameter Type Default Description <code>api_key</code> <code>Optional[str]</code> <code>None</code> API authentication key <code>base_url</code> <code>Optional[str]</code> API default Custom API endpoint URL <code>timeout</code> <code>Optional[int]</code> <code>30</code> Request timeout in seconds <code>retry_attempts</code> <code>Optional[int]</code> <code>3</code> Number of retry attempts"},{"location":"getting-started/authentication/#advanced-configuration","title":"Advanced Configuration","text":":material-timer: Timeouts &amp; Retries\ud83d\udd12 SSL &amp; Headers <pre><code>from rezen import RezenClient\n\nclient: RezenClient = RezenClient(\n    api_key=\"your_api_key_here\",\n    timeout=60,  # 60 second timeout\n    retry_attempts=5  # 5 retry attempts\n)\n</code></pre> <pre><code>from typing import Dict, str\n\nfrom rezen import RezenClient\n\n# Custom headers and SSL verification\ncustom_headers: Dict[str, str] = {\n    \"User-Agent\": \"MyApp/1.0\",\n    \"X-Custom-Header\": \"custom-value\"\n}\n\nclient: RezenClient = RezenClient(\n    api_key=\"your_api_key_here\",\n    verify_ssl=True,  # Verify SSL certificates\n    custom_headers=custom_headers\n)\n</code></pre>"},{"location":"getting-started/authentication/#error-handling","title":"Error Handling","text":"<p>Common Authentication Errors</p> <pre><code>from typing import List, Dict, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import AuthenticationError, RezenError\n\ntry:\n    client: RezenClient = RezenClient(api_key=\"invalid_key\")\n    teams: List[Dict[str, Any]] = client.teams.search_teams()\nexcept AuthenticationError as e:\n    print(f\"Invalid API key provided: {e}\")\nexcept RezenError as e:\n    print(f\"API error: {e}\")\n</code></pre> <p>Connection Troubleshooting</p> <ul> <li>401 Unauthorized: Check your API key</li> <li>403 Forbidden: Verify API key permissions</li> <li>429 Rate Limited: Implement retry logic with backoff</li> <li>500 Server Error: Check API status or contact support</li> </ul>"},{"location":"getting-started/authentication/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/authentication/#security","title":"\ud83d\udee1\ufe0f Security","text":"<p>API Key Security</p> <ul> <li>Store API keys in environment variables</li> <li>Use secrets management in production</li> <li>Never commit API keys to version control</li> <li>Rotate API keys regularly</li> </ul>"},{"location":"getting-started/authentication/#performance","title":"\u23f1\ufe0f Performance","text":"<p>Optimization Tips</p> <ul> <li>Reuse client instances across requests</li> <li>Implement connection pooling for high-volume applications</li> <li>Use appropriate timeouts for your use case</li> <li>Handle rate limiting with exponential backoff</li> </ul>"},{"location":"getting-started/authentication/#debugging","title":"\ud83d\udc1b Debugging","text":"<p>Logging Configuration</p> <pre><code>import logging\n\nfrom rezen import RezenClient\n\n# Enable debug logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Client will log request/response details\nclient: RezenClient = RezenClient()\n</code></pre>"},{"location":"getting-started/authentication/#quick-verification","title":"Quick Verification","text":"<p>Test your client setup with a simple API call:</p> \u2705 Test Connection:material-information: Environment Check <pre><code>from typing import List, Dict, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError\n\ndef test_connection() -&gt; bool:\n    \"\"\"Test connection to the ReZEN API.\n\n    Returns:\n        True if connection successful, False otherwise\n\n    Raises:\n        RezenError: If API request fails\n    \"\"\"\n    try:\n        client: RezenClient = RezenClient()\n        teams: List[Dict[str, Any]] = client.teams.search_teams(page_size=1)\n        print(\"\u2705 Connection successful!\")\n        return True\n    except RezenError as e:\n        print(f\"\u274c Connection failed: {e}\")\n        return False\n\n# Run the test\ntest_connection()\n</code></pre> <pre><code>import os\nfrom typing import Optional\n\nfrom rezen import RezenClient\n\ndef check_environment() -&gt; bool:\n    \"\"\"Check environment configuration for ReZEN API.\n\n    Returns:\n        True if environment is properly configured, False otherwise\n\n    Raises:\n        Exception: If client initialization fails\n    \"\"\"\n    api_key: Optional[str] = os.getenv('REZEN_API_KEY')\n\n    if not api_key:\n        print(\"\u274c REZEN_API_KEY environment variable not set\")\n        return False\n\n    print(f\"\u2705 API key found: {api_key[:8]}...\")\n\n    try:\n        client: RezenClient = RezenClient()\n        print(\"\u2705 Client initialized successfully\")\n        return True\n    except Exception as e:\n        print(f\"\u274c Client initialization failed: {e}\")\n        return False\n\n# Check your environment\ncheck_environment()\n</code></pre>"},{"location":"getting-started/authentication/#next-steps","title":"Next Steps","text":"<ul> <li> <p>\ud83d\udd27 Transaction Builder</p> <p>Start creating transactions with the Transaction Builder API</p> </li> <li> <p>\ud83d\udc65 Teams API</p> <p>Search and manage team information</p> </li> <li> <p>\ud83d\udc54 Agents API</p> <p>Access comprehensive agent search and management</p> </li> <li> <p>\ud83d\udcc4 Examples</p> <p>See practical examples and use cases</p> </li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide covers installation and setup of the ReZEN Python API client.</p>"},{"location":"getting-started/installation/#requirements","title":"\ud83d\udccb Requirements","text":"<ul> <li>Python: 3.7 or higher</li> <li>Operating Systems: Windows, macOS, Linux</li> <li>Internet connection for package installation and API access</li> </ul>"},{"location":"getting-started/installation/#quick-installation","title":"\ud83d\ude80 Quick Installation","text":""},{"location":"getting-started/installation/#from-pypi-recommended","title":"From PyPI (Recommended)","text":"<pre><code>pip install rezen\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<pre><code>git clone https://github.com/theperrygroup/rezen.git\ncd rezen\npip install .\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<pre><code>git clone https://github.com/theperrygroup/rezen.git\ncd rezen\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#environment-setup","title":"\ud83d\udd27 Environment Setup","text":""},{"location":"getting-started/installation/#1-api-key-configuration","title":"1. API Key Configuration","text":"<p>You'll need a ReZEN API key. Get one from the ReZEN platform dashboard.</p>"},{"location":"getting-started/installation/#option-a-environment-variable-recommended","title":"Option A: Environment Variable (Recommended)","text":"<p>Linux/macOS: <pre><code>export REZEN_API_KEY=\"your_api_key_here\"\n</code></pre></p> <p>Windows Command Prompt: <pre><code>set REZEN_API_KEY=your_api_key_here\n</code></pre></p> <p>Windows PowerShell: <pre><code>$env:REZEN_API_KEY=\"your_api_key_here\"\n</code></pre></p>"},{"location":"getting-started/installation/#option-b-env-file","title":"Option B: <code>.env</code> File","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>REZEN_API_KEY=your_api_key_here\n</code></pre> <p>Then load it in your Python code:</p> <pre><code>from dotenv import load_dotenv\nload_dotenv()\n\nfrom rezen import RezenClient\nclient = RezenClient()  # Will automatically use the API key from .env\n</code></pre>"},{"location":"getting-started/installation/#option-c-direct-initialization","title":"Option C: Direct Initialization","text":"<pre><code>from rezen import RezenClient\n\nclient = RezenClient(api_key=\"your_api_key_here\")\n</code></pre>"},{"location":"getting-started/installation/#2-virtual-environment-setup-recommended","title":"2. Virtual Environment Setup (Recommended)","text":"<p>Create an isolated environment for your project:</p> <pre><code># Create virtual environment\npython -m venv rezen-env\n\n# Activate (Linux/macOS)\nsource rezen-env/bin/activate\n\n# Activate (Windows)\nrezen-env\\Scripts\\activate\n\n# Install rezen\npip install rezen\n</code></pre>"},{"location":"getting-started/installation/#dependencies","title":"\ud83d\udce6 Dependencies","text":"<p>The ReZEN client automatically installs these dependencies:</p> <ul> <li>requests - HTTP client for API calls</li> <li>typing-extensions - Enhanced type hints (Python &lt; 3.8)</li> </ul>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>For development and testing:</p> <pre><code>pip install rezen[dev]\n</code></pre> <p>This includes: - pytest - Testing framework - pytest-cov - Coverage reporting - black - Code formatting - isort - Import sorting - mypy - Type checking - python-dotenv - Environment variable loading</p>"},{"location":"getting-started/installation/#verify-installation","title":"\u2705 Verify Installation","text":"<p>Test your installation with this simple script:</p> <pre><code>from rezen import RezenClient\n\n# Initialize client\nclient = RezenClient()\n\n# Test connection (this will validate your API key)\ntry:\n    # Simple API call to verify connection\n    teams = client.teams.search_teams(limit=1)\n    print(\"\u2705 Installation successful!\")\n    print(f\"Connected to ReZEN API\")\nexcept Exception as e:\n    print(f\"\u274c Installation issue: {e}\")\n    print(\"Check your API key and internet connection\")\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"getting-started/installation/#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"getting-started/installation/#1-permission-errors","title":"1. Permission Errors","text":"<pre><code># Use --user flag\npip install --user rezen\n\n# Or use virtual environment (recommended)\npython -m venv venv\nsource venv/bin/activate  # Linux/macOS\npip install rezen\n</code></pre>"},{"location":"getting-started/installation/#2-python-version-issues","title":"2. Python Version Issues","text":"<pre><code># Check Python version\npython --version\n\n# Use specific Python version\npython3.8 -m pip install rezen\n</code></pre>"},{"location":"getting-started/installation/#3-networkproxy-issues","title":"3. Network/Proxy Issues","text":"<pre><code># Behind corporate firewall\npip install --trusted-host pypi.org --trusted-host pypi.python.org rezen\n\n# Using proxy\npip install --proxy http://proxy.company.com:8080 rezen\n</code></pre>"},{"location":"getting-started/installation/#4-ssl-certificate-issues","title":"4. SSL Certificate Issues","text":"<pre><code># Disable SSL verification (not recommended for production)\npip install --trusted-host pypi.org rezen\n</code></pre>"},{"location":"getting-started/installation/#api-key-issues","title":"API Key Issues","text":""},{"location":"getting-started/installation/#invalid-api-key-error","title":"Invalid API Key Error","text":"<pre><code>from rezen.exceptions import AuthenticationError\n\ntry:\n    client = RezenClient(api_key=\"invalid_key\")\n    teams = client.teams.search_teams()\nexcept AuthenticationError as e:\n    print(f\"Authentication failed: {e}\")\n    print(\"Check your API key\")\n</code></pre>"},{"location":"getting-started/installation/#environment-variable-not-found","title":"Environment Variable Not Found","text":"<pre><code>import os\n\n# Check if API key is set\napi_key = os.getenv('REZEN_API_KEY')\nif not api_key:\n    print(\"\u274c REZEN_API_KEY environment variable not set\")\n    print(\"Set it with: export REZEN_API_KEY='your_key_here'\")\nelse:\n    print(f\"\u2705 API key found: {api_key[:10]}...\")\n</code></pre>"},{"location":"getting-started/installation/#advanced-configuration","title":"\ud83d\udd27 Advanced Configuration","text":""},{"location":"getting-started/installation/#custom-base-urls","title":"Custom Base URLs","text":"<p>For enterprise or testing environments:</p> <pre><code>from rezen import RezenClient\n\n# Custom API base URL\nclient = RezenClient(\n    api_key=\"your_key\",\n    base_url=\"https://api-staging.rezen.com\"\n)\n</code></pre>"},{"location":"getting-started/installation/#timeout-configuration","title":"Timeout Configuration","text":"<p>Configure request timeouts for your environment:</p> <pre><code>from rezen.base_client import BaseClient\n\n# Configure global timeout (affects all clients)\nBaseClient.DEFAULT_TIMEOUT = 30  # 30 seconds\n</code></pre>"},{"location":"getting-started/installation/#request-debugging","title":"Request Debugging","text":"<p>Enable request/response logging:</p> <pre><code>import logging\n\n# Enable debug logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Your ReZEN client calls will now show detailed request/response info\nfrom rezen import RezenClient\nclient = RezenClient()\n</code></pre>"},{"location":"getting-started/installation/#upgrading","title":"\ud83d\udd04 Upgrading","text":""},{"location":"getting-started/installation/#check-current-version","title":"Check Current Version","text":"<pre><code>import rezen\nprint(f\"Current version: {rezen.__version__}\")\n</code></pre>"},{"location":"getting-started/installation/#upgrade-to-latest","title":"Upgrade to Latest","text":"<pre><code>pip install --upgrade rezen\n</code></pre>"},{"location":"getting-started/installation/#specific-version","title":"Specific Version","text":"<pre><code>pip install rezen==1.0.7\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"\ud83d\udccb Next Steps","text":"<p>After successful installation:</p> <ol> <li>Quick Start Guide - Your first API calls</li> <li>API Reference - Complete endpoint documentation</li> <li>Examples - Real-world usage patterns</li> <li>Error Handling - Handle edge cases</li> </ol>"},{"location":"getting-started/installation/#tips","title":"\ud83d\udca1 Tips","text":""},{"location":"getting-started/installation/#production-deployments","title":"Production Deployments","text":"<ol> <li> <p>Pin versions in requirements.txt:    <pre><code>rezen==1.0.7\n</code></pre></p> </li> <li> <p>Use environment variables for API keys (never commit keys to source control)</p> </li> <li> <p>Set up monitoring for API rate limits and errors</p> </li> <li> <p>Consider caching for frequently accessed data</p> </li> </ol>"},{"location":"getting-started/installation/#development-best-practices","title":"Development Best Practices","text":"<ol> <li>Use virtual environments to isolate dependencies</li> <li>Add <code>.env</code> to `.gitignore to avoid committing secrets</li> <li>Use type hints for better IDE support</li> <li>Write tests for your integration code</li> </ol> <p>\ud83c\udf89 Ready to start building with ReZEN! Continue to the Quick Start Guide for your first API calls.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with the ReZEN API in 5 minutes! This guide walks you through your first API calls.</p>"},{"location":"getting-started/quickstart/#goal","title":"\ud83c\udfaf Goal","text":"<p>By the end of this guide, you'll: - \u2705 Set up authentication - \u2705 Make your first API call - \u2705 Search for teams and agents - \u2705 Create a simple transaction</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>Python 3.7+ installed</li> <li>ReZEN API key (get one here)</li> <li>5 minutes \u23f1\ufe0f</li> </ul>"},{"location":"getting-started/quickstart/#step-1-install-setup","title":"\ud83d\ude80 Step 1: Install &amp; Setup","text":""},{"location":"getting-started/quickstart/#install-the-package","title":"Install the Package","text":"<pre><code>pip install rezen\n</code></pre>"},{"location":"getting-started/quickstart/#set-your-api-key","title":"Set Your API Key","text":"<pre><code># Set environment variable (recommended)\nexport REZEN_API_KEY=\"your_api_key_here\"\n</code></pre>"},{"location":"getting-started/quickstart/#step-2-first-connection","title":"\ud83d\udd0c Step 2: First Connection","text":"<p>Create a file called <code>quickstart.py</code>:</p> <pre><code>from typing import Optional\n\nfrom rezen import RezenClient\n\n# Initialize client (uses REZEN_API_KEY environment variable)\nclient: RezenClient = RezenClient()\n\nprint(\"\ud83d\ude80 ReZEN Client initialized!\")\nprint(f\"\ud83d\udce6 Version: {client.__module__}\")\n</code></pre> <p>Run it: <pre><code>python quickstart.py\n</code></pre></p>"},{"location":"getting-started/quickstart/#step-3-search-for-teams","title":"\ud83d\udc65 Step 3: Search for Teams","text":"<p>Let's find some teams to work with:</p> <pre><code>from typing import Dict, List, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError, ValidationError, AuthenticationError\n\nclient: RezenClient = RezenClient()\n\n# Search for active teams\ntry:\n    teams: List[Dict[str, Any]] = client.teams.search_teams(\n        status=\"ACTIVE\",\n        limit=5\n    )\n\n    print(f\"\u2705 Found {len(teams)} teams\")\n\n    for team in teams:\n        print(f\"\ud83c\udfe2 Team: {team.get('name', 'N/A')}\")\n        print(f\"   ID: {team.get('id')}\")\n        print(f\"   Type: {team.get('type', 'N/A')}\")\n        print()\n\nexcept AuthenticationError as e:\n    print(f\"\u274c Authentication error: {e}\")\nexcept ValidationError as e:\n    print(f\"\u274c Validation error: {e}\")\nexcept RezenError as e:\n    print(f\"\u274c API error: {e}\")\nexcept Exception as e:\n    print(f\"\u274c Unexpected error: {e}\")\n</code></pre> <p>Expected Output: <pre><code>\u2705 Found 3 teams\n\ud83c\udfe2 Team: Downtown Realty\n   ID: team-12345\n   Type: NORMAL\n\n\ud83c\udfe2 Team: Premier Properties\n   ID: team-67890\n   Type: PLATINUM\n</code></pre></p>"},{"location":"getting-started/quickstart/#step-4-search-for-agents","title":"\ud83e\udd1d Step 4: Search for Agents","text":"<p>Now let's find some agents:</p> <pre><code>from typing import Dict, List, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError, ValidationError, AuthenticationError\n\nclient: RezenClient = RezenClient()\n\n# Search for active agents\ntry:\n    agents: List[Dict[str, Any]] = client.agents.search_active_agents(\n        name=\"John\",  # Search by name\n        limit=3\n    )\n\n    print(f\"\u2705 Found {len(agents)} agents\")\n\n    for agent in agents:\n        print(f\"\ud83d\udc64 Agent: {agent.get('first_name', '')} {agent.get('last_name', '')}\")\n        print(f\"   ID: {agent.get('id')}\")\n        print(f\"   Email: {agent.get('email', 'N/A')}\")\n        print()\n\nexcept AuthenticationError as e:\n    print(f\"\u274c Authentication error: {e}\")\nexcept ValidationError as e:\n    print(f\"\u274c Validation error: {e}\")\nexcept RezenError as e:\n    print(f\"\u274c API error: {e}\")\nexcept Exception as e:\n    print(f\"\u274c Unexpected error: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#step-5-create-a-transaction-builder","title":"\ud83c\udfd7\ufe0f Step 5: Create a Transaction Builder","text":"<p>Let's create your first transaction:</p> <pre><code>from typing import Dict, Any, Optional\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError, ValidationError, AuthenticationError\n\nclient: RezenClient = RezenClient()\n\n# Create a simple purchase transaction\ntransaction_data: Dict[str, Any] = {\n    \"type\": \"PURCHASE\",\n    \"property\": {\n        \"address\": \"123 Main Street\",\n        \"city\": \"Anytown\",\n        \"state\": \"CA\",\n        \"zipCode\": \"90210\"\n    },\n    \"purchase_price\": 500000\n}\n\ntry:\n    # Create transaction builder\n    response: Dict[str, Any] = client.transaction_builder.create_transaction_builder(transaction_data)\n\n    transaction_id: str = response.get('id')\n    print(f\"\u2705 Transaction created!\")\n    print(f\"\ud83c\udd94 Transaction ID: {transaction_id}\")\n    print(f\"\ud83c\udfe0 Property: {transaction_data['property']['address']}\")\n    print(f\"\ud83d\udcb0 Price: ${transaction_data['purchase_price']:,}\")\n\nexcept AuthenticationError as e:\n    print(f\"\u274c Authentication error: {e}\")\nexcept ValidationError as e:\n    print(f\"\u274c Validation error: {e}\")\nexcept RezenError as e:\n    print(f\"\u274c API error: {e}\")\nexcept Exception as e:\n    print(f\"\u274c Unexpected error creating transaction: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#step-6-add-participants","title":"\ud83d\udccb Step 6: Add Participants","text":"<p>Let's add a buyer to our transaction:</p> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError, ValidationError, AuthenticationError\n\nclient: RezenClient = RezenClient()\n\n# Assuming you have a transaction_id from Step 5\ntransaction_id: str = \"your-transaction-id-here\"\n\nbuyer_data: Dict[str, Any] = {\n    \"type\": \"BUYER\",\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Smith\",\n    \"email\": \"jane.smith@email.com\",\n    \"phone\": \"+1-555-123-4567\"\n}\n\ntry:\n    # Add buyer to transaction\n    buyer_response: Dict[str, Any] = client.transaction_builder.add_buyer(\n        transaction_id=transaction_id,\n        buyer_data=buyer_data\n    )\n\n    print(f\"\u2705 Buyer added!\")\n    print(f\"\ud83d\udc64 Name: {buyer_data['first_name']} {buyer_data['last_name']}\")\n    print(f\"\ud83d\udce7 Email: {buyer_data['email']}\")\n\nexcept AuthenticationError as e:\n    print(f\"\u274c Authentication error: {e}\")\nexcept ValidationError as e:\n    print(f\"\u274c Validation error: {e}\")\nexcept RezenError as e:\n    print(f\"\u274c API error: {e}\")\nexcept Exception as e:\n    print(f\"\u274c Unexpected error adding buyer: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#step-7-get-transaction-status","title":"\ud83d\udcca Step 7: Get Transaction Status","text":"<p>Check your transaction:</p> <pre><code>from typing import Dict, List, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError, ValidationError, AuthenticationError, NotFoundError\n\nclient: RezenClient = RezenClient()\ntransaction_id: str = \"your-transaction-id-here\"\n\ntry:\n    # Get transaction details\n    transaction: Dict[str, Any] = client.transactions.get_transaction(transaction_id)\n\n    print(f\"\u2705 Transaction Details:\")\n    print(f\"\ud83c\udd94 ID: {transaction.get('id')}\")\n    print(f\"\ud83d\udccd Status: {transaction.get('status', 'N/A')}\")\n    print(f\"\ud83c\udfe0 Property: {transaction.get('property', {}).get('address', 'N/A')}\")\n\n    # Show participants\n    participants: List[Dict[str, Any]] = transaction.get('participants', [])\n    print(f\"\ud83d\udc65 Participants: {len(participants)}\")\n\n    for participant in participants:\n        print(f\"   - {participant.get('type')}: {participant.get('first_name')} {participant.get('last_name')}\")\n\nexcept AuthenticationError as e:\n    print(f\"\u274c Authentication error: {e}\")\nexcept NotFoundError as e:\n    print(f\"\u274c Transaction not found: {e}\")\nexcept ValidationError as e:\n    print(f\"\u274c Validation error: {e}\")\nexcept RezenError as e:\n    print(f\"\u274c API error: {e}\")\nexcept Exception as e:\n    print(f\"\u274c Unexpected error getting transaction: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#complete-example","title":"\ud83c\udfaf Complete Example","text":"<p>Here's everything together in one script:</p> <pre><code>import time\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Any, Optional\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError, ValidationError, AuthenticationError, NotFoundError\n\n\ndef main() -&gt; None:\n    \"\"\"Main function demonstrating ReZEN API usage.\n\n    This function shows a complete workflow including:\n    - Searching for teams and agents\n    - Creating a transaction\n    - Adding participants\n    - Checking transaction status\n\n    Raises:\n        RezenError: If API requests fail\n        AuthenticationError: If API key is invalid\n        ValidationError: If request data is invalid\n    \"\"\"\n    # Initialize client\n    print(\"\ud83d\ude80 Initializing ReZEN client...\")\n    client: RezenClient = RezenClient()\n\n    # 1. Search for teams\n    print(\"\\n1\ufe0f\u20e3 Searching for teams...\")\n    try:\n        teams: List[Dict[str, Any]] = client.teams.search_teams(status=\"ACTIVE\", limit=2)\n        print(f\"\u2705 Found {len(teams)} teams\")\n        for team in teams[:1]:  # Show first team\n            print(f\"   \ud83c\udfe2 {team.get('name', 'N/A')} (ID: {team.get('id')})\")\n    except (AuthenticationError, ValidationError, RezenError) as e:\n        print(f\"\u274c Teams error: {e}\")\n\n    # 2. Search for agents\n    print(\"\\n2\ufe0f\u20e3 Searching for agents...\")\n    try:\n        agents: List[Dict[str, Any]] = client.agents.search_active_agents(limit=2)\n        print(f\"\u2705 Found {len(agents)} agents\")\n        for agent in agents[:1]:  # Show first agent\n            name: str = f\"{agent.get('first_name', '')} {agent.get('last_name', '')}\"\n            print(f\"   \ud83d\udc64 {name} (ID: {agent.get('id')})\")\n    except (AuthenticationError, ValidationError, RezenError) as e:\n        print(f\"\u274c Agents error: {e}\")\n\n    # 3. Create transaction\n    print(\"\\n3\ufe0f\u20e3 Creating transaction...\")\n    transaction_data: Dict[str, Any] = {\n        \"type\": \"PURCHASE\",\n        \"property\": {\n            \"address\": \"123 Quick Start Ave\",\n            \"city\": \"Demo City\",\n            \"state\": \"CA\",\n            \"zipCode\": \"90210\"\n        },\n        \"purchase_price\": 750000\n    }\n\n    try:\n        response: Dict[str, Any] = client.transaction_builder.create_transaction_builder(transaction_data)\n        transaction_id: str = response.get('id')\n        print(f\"\u2705 Transaction created: {transaction_id}\")\n    except (AuthenticationError, ValidationError, RezenError) as e:\n        print(f\"\u274c Transaction error: {e}\")\n        return\n\n    # 4. Add buyer\n    print(\"\\n4\ufe0f\u20e3 Adding buyer...\")\n    buyer_data: Dict[str, Any] = {\n        \"type\": \"BUYER\",\n        \"first_name\": \"Quick\",\n        \"last_name\": \"Start\",\n        \"email\": \"quickstart@demo.com\",\n        \"phone\": \"+1-555-DEMO-123\"\n    }\n\n    try:\n        client.transaction_builder.add_buyer(\n            transaction_id=transaction_id,\n            buyer_data=buyer_data\n        )\n        print(f\"\u2705 Buyer added: {buyer_data['first_name']} {buyer_data['last_name']}\")\n    except (AuthenticationError, ValidationError, RezenError) as e:\n        print(f\"\u274c Buyer error: {e}\")\n\n    # 5. Get final status\n    print(\"\\n5\ufe0f\u20e3 Checking transaction status...\")\n    try:\n        transaction: Dict[str, Any] = client.transactions.get_transaction(transaction_id)\n        print(f\"\u2705 Transaction Status: {transaction.get('status', 'N/A')}\")\n        print(f\"\ud83d\udc65 Participants: {len(transaction.get('participants', []))}\")\n    except (AuthenticationError, NotFoundError, ValidationError, RezenError) as e:\n        print(f\"\u274c Status error: {e}\")\n\n    print(\"\\n\ud83c\udf89 Quick start complete!\")\n    print(f\"\ud83c\udd94 Your transaction ID: {transaction_id}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"getting-started/quickstart/#error-handling","title":"\ud83d\udea8 Error Handling","text":"<p>Add proper error handling for production code:</p> <pre><code>from typing import List, Dict, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import (\n    AuthenticationError,\n    ValidationError,\n    NotFoundError,\n    RateLimitError,\n    RezenError\n)\n\nclient: RezenClient = RezenClient()\n\ntry:\n    teams: List[Dict[str, Any]] = client.teams.search_teams()\n    print(f\"Success: {len(teams)} teams found\")\n\nexcept AuthenticationError as e:\n    print(f\"\u274c Check your API key: {e}\")\n\nexcept ValidationError as e:\n    print(f\"\u274c Invalid request: {e}\")\n\nexcept NotFoundError as e:\n    print(f\"\u274c Resource not found: {e}\")\n\nexcept RateLimitError as e:\n    print(f\"\u274c Rate limit exceeded - wait and retry: {e}\")\n\nexcept RezenError as e:\n    print(f\"\u274c API error: {e}\")\n\nexcept Exception as e:\n    print(f\"\u274c Unexpected error: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#whats-next","title":"\ud83c\udfaf What's Next?","text":"<p>Now that you've completed the quick start:</p>"},{"location":"getting-started/quickstart/#learn-more","title":"\ud83d\udcda Learn More","text":"<ul> <li>API Reference - Complete endpoint documentation</li> <li>Examples - Real-world usage patterns</li> <li>Error Handling - Robust error handling</li> </ul>"},{"location":"getting-started/quickstart/#common-tasks","title":"\ud83d\udd27 Common Tasks","text":"<ul> <li>Transaction Management - Work with existing transactions</li> <li>Batch Operations - Process multiple items efficiently</li> <li>Advanced Queries - Complex search and filtering</li> </ul>"},{"location":"getting-started/quickstart/#production-ready","title":"\ud83c\udfd7\ufe0f Production Ready","text":"<ul> <li>Environment Configuration - Staging vs production</li> <li>Logging &amp; Monitoring - Track API usage</li> <li>Testing Strategies - Unit and integration tests</li> </ul>"},{"location":"getting-started/quickstart/#tips-for-success","title":"\ud83d\udca1 Tips for Success","text":""},{"location":"getting-started/quickstart/#explore-the-api","title":"\ud83d\udd0d Explore the API","text":"<pre><code>from rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Get help on any client\nhelp(client.transaction_builder)\nhelp(client.transactions)\nhelp(client.teams)\nhelp(client.agents)\n</code></pre>"},{"location":"getting-started/quickstart/#keep-transaction-ids","title":"\ud83d\udcdd Keep Transaction IDs","text":"<p>Save transaction IDs for later operations: <pre><code>from typing import List\n\n# Store important IDs\nimportant_transactions: List[str] = []\nresponse = client.transaction_builder.create_transaction_builder(data)\nimportant_transactions.append(response['id'])\n</code></pre></p>"},{"location":"getting-started/quickstart/#use-type-hints","title":"\u26a1 Use Type Hints","text":"<p>Get better IDE support: <pre><code>from typing import List, Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\nteams: List[Dict[str, Any]] = client.teams.search_teams()\n</code></pre></p>"},{"location":"getting-started/quickstart/#need-help","title":"\ud83c\udd98 Need Help?","text":"<ul> <li>\ud83d\udcd6 Documentation: Full API Reference</li> <li>\ud83d\udca1 Examples: Common Patterns</li> <li>\ud83d\udc1b Issues: Troubleshooting Guide</li> <li>\ud83d\udcac Support: Contact Support</li> </ul> <p>\ud83c\udf89 Congratulations! You've successfully: - \u2705 Connected to the ReZEN API - \u2705 Searched teams and agents - \u2705 Created a transaction - \u2705 Added participants - \u2705 Retrieved transaction status</p> <p>Ready for more? Continue to the API Reference for complete documentation.</p>"},{"location":"guides/","title":"Guides &amp; Examples","text":"<p>Practical guides, tutorials, and real-world examples to help you master the ReZEN API client.</p>"},{"location":"guides/#available-guides","title":"\ud83c\udfaf Available Guides","text":"<ul> <li> <p>\ud83d\udcdd Examples &amp; Tutorials</p> <p>Comprehensive code examples and step-by-step tutorials for common tasks</p> <p>:octicons-arrow-right-24: View Examples</p> </li> <li> <p>\ud83e\udd1d Transaction Workflows</p> <p>End-to-end guides for managing real estate transactions</p> <p>:octicons-arrow-right-24: Transaction Guide</p> </li> <li> <p>\ud83d\udc65 Working with People</p> <p>Managing agents, teams, and contacts in your applications</p> <p>:octicons-arrow-right-24: People Guide</p> </li> <li> <p>\u2753 Troubleshooting</p> <p>Common issues, solutions, and debugging techniques</p> <p>:octicons-arrow-right-24: Get Help</p> </li> </ul>"},{"location":"guides/#popular-use-cases","title":"\ud83d\ude80 Popular Use Cases","text":""},{"location":"guides/#real-estate-transaction-management","title":"Real Estate Transaction Management","text":"<ul> <li>Creating transaction builders</li> <li>Managing participants and documents</li> <li>Handling commission splits</li> <li>Processing payments</li> </ul>"},{"location":"guides/#team-agent-management","title":"Team &amp; Agent Management","text":"<ul> <li>Searching for agents by location</li> <li>Managing team hierarchies</li> <li>Tracking agent networks</li> <li>Directory integration</li> </ul>"},{"location":"guides/#data-integration","title":"Data Integration","text":"<ul> <li>Bulk data operations</li> <li>Error handling patterns</li> <li>Rate limiting strategies</li> <li>Authentication best practices</li> </ul>"},{"location":"guides/#guide-categories","title":"\ud83d\udcda Guide Categories","text":""},{"location":"guides/#getting-started","title":"\ud83c\udfc1 Getting Started","text":"<p>Perfect for developers new to the ReZEN API:</p> <ul> <li>Basic Examples - Simple API calls to get you started</li> <li>Authentication Setup - Configure your API key</li> <li>Transaction Workflows - Create your first transaction</li> </ul>"},{"location":"guides/#business-workflows","title":"\ud83d\udcbc Business Workflows","text":"<p>Real-world business scenarios:</p> <ul> <li>Complete Transaction Flow - End-to-end transaction management</li> <li>Agent Onboarding - Adding new agents to your system</li> <li>Financial Configuration - Handle commission splits</li> </ul>"},{"location":"guides/#advanced-techniques","title":"\ud83d\udd27 Advanced Techniques","text":"<p>For experienced developers:</p> <ul> <li>API Errors - Robust error management</li> <li>Performance Optimization - Handle large datasets</li> <li>Integration Patterns - Common integration scenarios</li> </ul>"},{"location":"guides/#code-examples","title":"\ud83c\udfa8 Code Examples","text":"<p>All guides include:</p> <ul> <li>\u2705 Complete, runnable code that you can copy and modify</li> <li>\u2705 Error handling examples for robust applications</li> <li>\u2705 Best practices and security considerations</li> <li>\u2705 Performance tips for production use</li> <li>\u2705 Real-world scenarios based on actual use cases</li> </ul>"},{"location":"guides/#need-specific-help","title":"\ud83c\udd98 Need Specific Help?","text":"<p>Looking for something specific?</p> <p>Transaction Management \u2192 Transaction Workflows</p> <p>People &amp; Teams \u2192 Agents &amp; Teams Guide</p> <p>Code Examples \u2192 Examples &amp; Tutorials</p> <p>Problems &amp; Solutions \u2192 Troubleshooting Guide</p>"},{"location":"guides/#quick-links","title":"\ud83d\udd17 Quick Links","text":"<ul> <li>API Reference - Complete method documentation</li> <li>Data Types - Enums and data structures</li> <li>Error Reference - Exception handling</li> <li>Contributing - Help improve the docs</li> </ul>"},{"location":"guides/agents-and-teams/","title":"Working with Agents &amp; Teams","text":"<p>Comprehensive guide to managing agents, teams, and professional networks using the ReZEN API.</p>"},{"location":"guides/agents-and-teams/#overview","title":"\ud83c\udfaf Overview","text":"<p>The ReZEN API provides powerful tools for working with real estate professionals:</p> <ul> <li>Agent Search &amp; Discovery - Find agents by location, specialization, or network</li> <li>Team Management - Search and organize team structures</li> <li>Network Mapping - Track agent relationships and hierarchies</li> <li>Directory Services - Access professional contact information</li> </ul>"},{"location":"guides/agents-and-teams/#agent-management","title":"\ud83d\udc64 Agent Management","text":""},{"location":"guides/agents-and-teams/#basic-agent-search","title":"Basic Agent Search","text":"<pre><code>from rezen import RezenClient\nfrom rezen.exceptions import RezenError\n\ndef search_active_agents():\n    \"\"\"Find active agents with basic search.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Search for active agents\n        agents = client.agents.search_active_agents(\n            name=\"John\",\n            limit=20\n        )\n\n        print(f\"Found {len(agents)} active agents:\")\n        for agent in agents:\n            print(f\"  - {agent['first_name']} {agent['last_name']}\")\n            print(f\"    Email: {agent.get('email', 'N/A')}\")\n            print(f\"    Phone: {agent.get('phone', 'N/A')}\")\n            print(f\"    Location: {agent.get('city', 'N/A')}, {agent.get('state', 'N/A')}\")\n            print()\n\n        return agents\n\n    except RezenError as e:\n        print(f\"\u274c Agent search failed: {e}\")\n        return []\n</code></pre>"},{"location":"guides/agents-and-teams/#team-management","title":"\ud83d\udc65 Team Management","text":""},{"location":"guides/agents-and-teams/#team-search-discovery","title":"Team Search &amp; Discovery","text":"<pre><code>from rezen.enums import TeamStatus\n\ndef search_teams():\n    \"\"\"Search for teams with basic criteria.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Search active teams\n        teams = client.teams.search_teams(\n            status=TeamStatus.ACTIVE,\n            limit=25\n        )\n\n        print(f\"Found {len(teams)} active teams:\")\n        for team in teams:\n            print(f\"  \ud83d\udccb {team['team_name']}\")\n            print(f\"     Leader: {team.get('team_lead', 'N/A')}\")\n            print(f\"     Members: {team.get('member_count', 'N/A')}\")\n            print(f\"     Location: {team.get('city', 'N/A')}, {team.get('state', 'N/A')}\")\n            print()\n\n        return teams\n\n    except RezenError as e:\n        print(f\"\u274c Team search failed: {e}\")\n        return []\n</code></pre>"},{"location":"guides/agents-and-teams/#directory-services","title":"\ud83d\udcd6 Directory Services","text":""},{"location":"guides/agents-and-teams/#contact-information-management","title":"Contact Information Management","text":"<pre><code>def search_directory():\n    \"\"\"Search the professional directory.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Search directory\n        contacts = client.directory.search_directory(\n            name=\"Johnson\",\n            email=\"@remax.com\",  # Email domain search\n            limit=30\n        )\n\n        print(f\"\ud83d\udcde Directory Search Results ({len(contacts)} contacts)\")\n\n        # Group by organization\n        by_org = {}\n        for contact in contacts:\n            org = contact.get('organization', 'Independent')\n            if org not in by_org:\n                by_org[org] = []\n            by_org[org].append(contact)\n\n        # Display by organization\n        for org, org_contacts in by_org.items():\n            print(f\"\\n\ud83c\udfe2 {org} ({len(org_contacts)} contacts):\")\n            for contact in org_contacts:\n                print(f\"  - {contact['name']}\")\n                print(f\"    \ud83d\udce7 {contact.get('email', 'N/A')}\")\n                print(f\"    \ud83d\udcf1 {contact.get('phone', 'N/A')}\")\n\n        return contacts\n\n    except RezenError as e:\n        print(f\"\u274c Directory search failed: {e}\")\n        return []\n</code></pre>"},{"location":"guides/agents-and-teams/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Agents API Reference - Complete agents API documentation</li> <li>Teams API Reference - Detailed teams API reference</li> <li>Directory API Reference - Directory services documentation</li> <li>Error Handling - Comprehensive error handling guide</li> <li>Examples - Additional code examples and patterns</li> </ul>"},{"location":"guides/examples/","title":"Examples &amp; Patterns","text":"<p>Real-world usage examples for the ReZEN Python API client. These examples demonstrate common patterns and best practices.</p>"},{"location":"guides/examples/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Basic Examples</li> <li>Transaction Workflows</li> <li>Agent Management</li> <li>Team Operations</li> <li>Error Handling Patterns</li> <li>Batch Operations</li> <li>Integration Patterns</li> </ul>"},{"location":"guides/examples/#basic-examples","title":"Basic Examples","text":""},{"location":"guides/examples/#simple-client-setup","title":"Simple Client Setup","text":"<pre><code>import os\nfrom typing import Optional\n\nfrom rezen import RezenClient\n\n# Environment variable setup\nclient: RezenClient = RezenClient()\n\n# Direct API key\nclient: RezenClient = RezenClient(api_key=\"your_api_key\")\n\n# Custom environment\napi_key: Optional[str] = os.getenv('REZEN_API_KEY')\nclient: RezenClient = RezenClient(\n    api_key=api_key,\n    base_url=\"https://staging-api.rezen.com\"\n)\n</code></pre>"},{"location":"guides/examples/#basic-search-operations","title":"Basic Search Operations","text":"<pre><code>from typing import List, Dict, Any\n\nfrom rezen import RezenClient, TeamStatus, AgentStatus\n\nclient: RezenClient = RezenClient()\n\n# Quick team search\nteams: List[Dict[str, Any]] = client.teams.search_teams(status=TeamStatus.ACTIVE, page_size=10)\nprint(f\"Found {len(teams)} active teams\")\n\n# Quick agent search\nagents: List[Dict[str, Any]] = client.agents.search_active_agents(name=\"John\", page_size=5)\nprint(f\"Found {len(agents)} agents named John\")\n</code></pre>"},{"location":"guides/examples/#transaction-workflows","title":"Transaction Workflows","text":""},{"location":"guides/examples/#complete-purchase-transaction","title":"Complete Purchase Transaction","text":"<pre><code>from datetime import datetime, timedelta\nfrom typing import Dict, Any\n\nfrom rezen import RezenClient\n\ndef create_purchase_transaction() -&gt; str:\n    \"\"\"Create a complete purchase transaction with all participants.\n\n    Returns:\n        Transaction ID of the created transaction\n\n    Raises:\n        RezenError: If API requests fail\n        ValidationError: If transaction data is invalid\n    \"\"\"\n    client: RezenClient = RezenClient()\n\n    # 1. Create transaction builder\n    response: Dict[str, Any] = client.transaction_builder.create_transaction_builder(\"TRANSACTION\")\n    transaction_id: str = response['id']\n    print(f\"Created transaction: {transaction_id}\")\n\n    # 2. Set property details\n    location_data: Dict[str, Any] = {\n        \"address\": \"1234 Elm Street\",\n        \"city\": \"San Francisco\",\n        \"state\": \"CA\",\n        \"zipCode\": \"94102\",\n        \"county\": \"San Francisco\"\n    }\n    client.transaction_builder.update_location_info(transaction_id, location_data)\n\n    # 3. Set pricing and dates\n    closing_date: str = (datetime.now() + timedelta(days=45)).strftime(\"%Y-%m-%d\")\n    price_data: Dict[str, Any] = {\n        \"purchase_price\": 850000,\n        \"closing_date\": closing_date,\n        \"contract_date\": datetime.now().strftime(\"%Y-%m-%d\")\n    }\n    client.transaction_builder.update_price_and_date_info(transaction_id, price_data)\n\n    # 4. Add buyer\n    buyer_data: Dict[str, Any] = {\n        \"first_name\": \"Alice\",\n        \"last_name\": \"Johnson\",\n        \"email\": \"alice.johnson@email.com\",\n        \"phone\": \"+1-415-555-0123\"\n    }\n    client.transaction_builder.add_buyer(transaction_id, buyer_data)\n\n    # 5. Add seller\n    seller_data: Dict[str, Any] = {\n        \"first_name\": \"Bob\",\n        \"last_name\": \"Smith\",\n        \"email\": \"bob.smith@email.com\",\n        \"phone\": \"+1-415-555-0456\"\n    }\n    client.transaction_builder.add_seller(transaction_id, seller_data)\n\n    # 6. Add title company\n    title_data: Dict[str, Any] = {\n        \"title_company\": \"Bay Area Title Company\",\n        \"title_contact\": \"Sarah Wilson\",\n        \"title_phone\": \"+1-415-555-0789\",\n        \"title_email\": \"sarah@bayareatitle.com\"\n    }\n    client.transaction_builder.update_title_info(transaction_id, title_data)\n\n    # 7. Submit transaction\n    result: Dict[str, Any] = client.transaction_builder.submit_transaction(transaction_id)\n    print(f\"Transaction submitted: {result}\")\n\n    return transaction_id\n\n# Run example\ntransaction_id: str = create_purchase_transaction()\n</code></pre>"},{"location":"guides/examples/#adding-multiple-participants","title":"Adding Multiple Participants","text":"<pre><code>from typing import List, Dict, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError\n\ndef add_transaction_participants(transaction_id: str) -&gt; None:\n    \"\"\"Add multiple participants to a transaction.\n\n    Args:\n        transaction_id: ID of the transaction to add participants to\n\n    Raises:\n        RezenError: If API requests fail\n    \"\"\"\n    client: RezenClient = RezenClient()\n\n    # Add various participants\n    participants: List[Dict[str, Any]] = [\n        {\n            \"type\": \"INSPECTOR\",\n            \"first_name\": \"Mike\",\n            \"last_name\": \"Inspector\",\n            \"company\": \"Quality Home Inspections\",\n            \"phone\": \"+1-415-555-1000\"\n        },\n        {\n            \"type\": \"APPRAISER\",\n            \"first_name\": \"Lisa\",\n            \"last_name\": \"Appraiser\",\n            \"company\": \"Bay Area Appraisals\",\n            \"phone\": \"+1-415-555-2000\"\n        },\n        {\n            \"type\": \"LENDER\",\n            \"first_name\": \"David\",\n            \"last_name\": \"Banker\",\n            \"company\": \"First National Bank\",\n            \"phone\": \"+1-415-555-3000\"\n        }\n    ]\n\n    for participant in participants:\n        try:\n            response: Dict[str, Any] = client.transaction_builder.add_participant(\n                transaction_id, participant\n            )\n            print(f\"Added {participant['type']}: {participant['first_name']} {participant['last_name']}\")\n        except RezenError as e:\n            print(f\"Failed to add {participant['type']}: {e}\")\n\n# Usage\nadd_transaction_participants(\"your-transaction-id\")\n</code></pre>"},{"location":"guides/examples/#commission-setup","title":"Commission Setup","text":"<pre><code>from typing import Dict, Any, Optional\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError\n\ndef setup_commission_splits(transaction_id: str, agent_info: Dict[str, str]) -&gt; Optional[Dict[str, Any]]:\n    \"\"\"Setup commission splits for a transaction.\n\n    Args:\n        transaction_id: ID of the transaction\n        agent_info: Dictionary containing agent IDs\n\n    Returns:\n        Response from API if successful, None if failed\n\n    Raises:\n        RezenError: If API request fails\n    \"\"\"\n    client: RezenClient = RezenClient()\n\n    # Set commission splits\n    commission_splits: List[Dict[str, Any]] = [\n        {\n            \"agent_id\": agent_info[\"listing_agent_id\"],\n            \"role\": \"LISTING_AGENT\",\n            \"split_percentage\": 50.0,\n            \"commission_amount\": 25500  # 3% of $850k\n        },\n        {\n            \"agent_id\": agent_info[\"buyers_agent_id\"],\n            \"role\": \"BUYERS_AGENT\",\n            \"split_percentage\": 50.0,\n            \"commission_amount\": 25500  # 3% of $850k\n        }\n    ]\n\n    try:\n        response: Dict[str, Any] = client.transaction_builder.update_commission_splits(\n            transaction_id, commission_splits\n        )\n        print(\"Commission splits updated successfully\")\n        return response\n    except RezenError as e:\n        print(f\"Failed to update commission splits: {e}\")\n        return None\n\n# Usage\nagent_data: Dict[str, str] = {\n    \"listing_agent_id\": \"agent-uuid-1\",\n    \"buyers_agent_id\": \"agent-uuid-2\"\n}\nsetup_commission_splits(\"transaction-id\", agent_data)\n</code></pre>"},{"location":"guides/examples/#owner-agent-setup","title":"Owner Agent Setup","text":"<pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError\n\ndef add_owner_agent_to_transaction(transaction_id: str) -&gt; bool:\n    \"\"\"Add owner agent to a transaction using the proper sequence.\n\n    \u26a0\ufe0f CRITICAL: Owner agent endpoint requires the transaction to be set up in this exact order:\n    1. Location info (update_location_info)\n    2. Price/date info (update_price_and_date_info)\n    3. Buyers/Sellers (add_buyer/add_seller)\n    4. THEN owner agent can be added\n\n    Args:\n        transaction_id: ID of an already setup transaction\n\n    Returns:\n        True if owner agent was added successfully\n\n    Raises:\n        RezenError: If API request fails\n    \"\"\"\n    client: RezenClient = RezenClient()\n\n    try:\n        # Method 1: Manual owner agent setup\n        # Get current user info\n        user: Dict[str, Any] = client.users.get_current_user()\n        team_id: str = user['team']['id']\n        office_id: str = user['office']['id']\n\n        # Get agent ID from keymaker\n        keymaker: Dict[str, Any] = client.users.get_keymaker_ids(user['id'])\n        agent_id: str = keymaker['id']\n\n        # Create owner data structure\n        owner_data: Dict[str, Any] = {\n            \"ownerAgent\": {\n                \"agentId\": agent_id,\n                \"role\": \"BUYERS_AGENT\"  # Must match representationType in price/date info\n            },\n            \"officeId\": office_id,\n            \"teamId\": team_id\n        }\n\n        # Add owner agent\n        response: Dict[str, Any] = client.transaction_builder.update_owner_agent_info(\n            transaction_id, \n            owner_data\n        )\n\n        print(f\"\u2705 Owner agent added: {user['firstName']} {user['lastName']}\")\n        print(f\"   Agent ID: {agent_id}\")\n        print(f\"   Team: {user['team']['name']}\")\n        print(f\"   Office: {user['office']['name']}\")\n\n        return True\n\n    except RezenError as e:\n        print(f\"\u274c Failed to add owner agent: {e}\")\n        return False\n\ndef create_transaction_with_owner_agent() -&gt; str:\n    \"\"\"Create a complete transaction with owner agent following the proper sequence.\n\n    Returns:\n        Transaction ID if successful\n\n    Raises:\n        RezenError: If any step fails\n    \"\"\"\n    client: RezenClient = RezenClient()\n\n    # Step 1: Create transaction\n    response: Dict[str, Any] = client.transaction_builder.create_transaction_builder()\n    transaction_id: str = response['id']\n    print(f\"1\ufe0f\u20e3 Created transaction: {transaction_id}\")\n\n    try:\n        # Step 2: Add location (REQUIRED FIRST)\n        location_data: Dict[str, Any] = {\n            \"street\": \"2158 E Wilson Ave\",\n            \"city\": \"Salt Lake City\",\n            \"state\": \"UTAH\",  # Must be all caps\n            \"zip\": \"84108\",  # Use 'zip' not 'zipCode'\n            \"yearBuilt\": 2020,\n            \"mlsNumber\": \"MLS123456\"\n        }\n        client.transaction_builder.update_location_info(transaction_id, location_data)\n        print(\"2\ufe0f\u20e3 Added location info\")\n\n        # Step 3: Add price/date (REQUIRED SECOND)\n        price_data: Dict[str, Any] = {\n            \"dealType\": \"COMPENSATING\",\n            \"propertyType\": \"RESIDENTIAL\",\n            \"salePrice\": {\n                \"amount\": 565000,\n                \"currency\": \"USD\"\n            },\n            \"acceptanceDate\": \"2024-01-15\",\n            \"closingDate\": \"2024-02-28\",\n            \"representationType\": \"BUYER\"  # This determines owner agent role\n        }\n        client.transaction_builder.update_price_and_date_info(transaction_id, price_data)\n        print(\"3\ufe0f\u20e3 Added price and dates\")\n\n        # Step 4: Add buyer (REQUIRED THIRD)\n        buyer_data: Dict[str, Any] = {\n            \"firstName\": \"John\",  # Use camelCase\n            \"lastName\": \"Doe\",\n            \"email\": \"john.doe@example.com\",\n            \"phoneNumber\": \"(801) 555-1234\"  # Use camelCase\n        }\n        client.transaction_builder.add_buyer(transaction_id, buyer_data)\n        print(\"4\ufe0f\u20e3 Added buyer\")\n\n        # Step 5: NOW add owner agent using convenience method\n        client.transaction_builder.set_current_user_as_owner_agent(\n            transaction_id,\n            role=\"BUYERS_AGENT\"  # Must match representationType\n        )\n        print(\"5\ufe0f\u20e3 Added owner agent - SUCCESS! \ud83c\udf89\")\n\n        # Verify owner agent was added\n        transaction: Dict[str, Any] = client.transaction_builder.get_transaction_builder(transaction_id)\n        owner_agents: List[Dict[str, Any]] = transaction.get('agentsInfo', {}).get('ownerAgent', [])\n\n        if owner_agents:\n            agent: Dict[str, Any] = owner_agents[0]\n            print(f\"\\n\u2705 Owner Agent Verified:\")\n            print(f\"   Agent ID: {agent.get('agentId')}\")\n            print(f\"   Role: {agent.get('role')}\")\n            print(f\"   Office ID: {transaction['agentsInfo'].get('officeId')}\")\n            print(f\"   Team ID: {transaction['agentsInfo'].get('teamId')}\")\n\n        return transaction_id\n\n    except RezenError as e:\n        print(f\"\u274c Transaction creation failed: {e}\")\n        # Clean up\n        client.transaction_builder.delete_transaction_builder(transaction_id)\n        raise\n\n# Usage examples\n# Example 1: Add owner to existing transaction\nadd_owner_agent_to_transaction(\"existing-transaction-id\")\n\n# Example 2: Create new transaction with owner\ntransaction_id: str = create_transaction_with_owner_agent()\n</code></pre>"},{"location":"guides/examples/#agent-management","title":"Agent Management","text":""},{"location":"guides/examples/#agent-search-and-analysis","title":"Agent Search and Analysis","text":"<pre><code>from typing import List, Dict, Any\n\nfrom rezen import RezenClient, AgentSortField, AgentSortDirection, StateOrProvince\nfrom rezen.exceptions import RezenError\n\ndef find_and_analyze_agents() -&gt; None:\n    \"\"\"Find and analyze agents in California.\n\n    Raises:\n        RezenError: If API requests fail\n    \"\"\"\n    client: RezenClient = RezenClient()\n\n    # Search for agents in California\n    california_agents: List[Dict[str, Any]] = client.agents.search_active_agents(\n        state_or_province=[StateOrProvince.CALIFORNIA],\n        sort_by=[AgentSortField.LAST_NAME, AgentSortField.FIRST_NAME],\n        sort_direction=AgentSortDirection.ASC,\n        page_size=50\n    )\n\n    print(f\"Found {len(california_agents)} agents in California\")\n\n    # Analyze each agent's network\n    for agent in california_agents[:5]:  # Analyze first 5\n        agent_id: str = agent['id']\n        agent_name: str = f\"{agent.get('first_name', '')} {agent.get('last_name', '')}\"\n\n        try:\n            # Get network size\n            network_stats: List[Dict[str, Any]] = client.agents.get_network_size_by_tier(agent_id)\n\n            # Get front line agents\n            front_line: List[Dict[str, Any]] = client.agents.get_front_line_agents_info(agent_id)\n\n            print(f\"\\n{agent_name}:\")\n            print(f\"  Network tiers: {len(network_stats)}\")\n            print(f\"  Front line agents: {len(front_line)}\")\n\n        except RezenError as e:\n            print(f\"  Could not analyze {agent_name}: {e}\")\n\nfind_and_analyze_agents()\n</code></pre>"},{"location":"guides/examples/#agent-network-mapping","title":"Agent Network Mapping","text":"<pre><code>from typing import Dict, List, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError\n\ndef map_agent_downline(agent_id: str, max_tier: int = 3) -&gt; Dict[str, Any]:\n    \"\"\"Map an agent's downline network by tier.\n\n    Args:\n        agent_id: ID of the agent to map\n        max_tier: Maximum tier depth to map\n\n    Returns:\n        Dictionary containing network mapping by tier\n\n    Raises:\n        RezenError: If API requests fail\n    \"\"\"\n    client: RezenClient = RezenClient()\n\n    network_map: Dict[str, Any] = {}\n\n    for tier in range(1, max_tier + 1):\n        try:\n            downline: List[Dict[str, Any]] = client.agents.get_down_line_agents(\n                agent_id=agent_id,\n                tier=tier,\n                status_in=[\"ACTIVE\"],\n                page_size=100\n            )\n\n            network_map[f\"tier_{tier}\"] = {\n                \"count\": len(downline),\n                \"agents\": [\n                    {\n                        \"id\": agent[\"id\"],\n                        \"name\": f\"{agent.get('first_name', '')} {agent.get('last_name', '')}\",\n                        \"email\": agent.get(\"email\", \"\")\n                    }\n                    for agent in downline\n                ]\n            }\n\n            print(f\"Tier {tier}: {len(downline)} agents\")\n\n        except RezenError as e:\n            print(f\"Error getting tier {tier}: {e}\")\n            break\n\n    return network_map\n\n# Usage\nagent_network: Dict[str, Any] = map_agent_downline(\"agent-uuid-here\", max_tier=2)\n</code></pre>"},{"location":"guides/examples/#team-operations","title":"Team Operations","text":""},{"location":"guides/examples/#team-discovery-and-management","title":"Team Discovery and Management","text":"<pre><code>from typing import Dict, List, Any\n\nfrom rezen import RezenClient, TeamType, SortField, SortDirection\nfrom rezen.exceptions import RezenError\n\ndef discover_teams() -&gt; Dict[str, List[Dict[str, Any]]]:\n    \"\"\"Discover teams by type and analyze them.\n\n    Returns:\n        Dictionary of teams organized by type\n\n    Raises:\n        RezenError: If API requests fail\n    \"\"\"\n    client: RezenClient = RezenClient()\n\n    # Find all team types\n    team_types: List[TeamType] = [TeamType.NORMAL, TeamType.PLATINUM, TeamType.GROUP]\n\n    all_teams: Dict[str, List[Dict[str, Any]]] = {}\n\n    for team_type in team_types:\n        try:\n            teams: List[Dict[str, Any]] = client.teams.search_teams(\n                team_type=team_type,\n                status=\"ACTIVE\",\n                sort_by=[SortField.NAME],\n                sort_direction=SortDirection.ASC,\n                page_size=100\n            )\n\n            all_teams[team_type.value] = teams\n            print(f\"{team_type.value}: {len(teams)} teams\")\n\n            # Show top 3 teams for each type\n            for team in teams[:3]:\n                print(f\"  - {team.get('name', 'N/A')} (ID: {team.get('id')})\")\n\n        except RezenError as e:\n            print(f\"Error getting {team_type.value} teams: {e}\")\n\n    return all_teams\n\nteams_by_type: Dict[str, List[Dict[str, Any]]] = discover_teams()\n</code></pre>"},{"location":"guides/examples/#team-details-analysis","title":"Team Details Analysis","text":"<pre><code>from typing import List, Dict, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError\n\ndef analyze_team_details(team_ids: List[str]) -&gt; List[Dict[str, Any]]:\n    \"\"\"Analyze details for multiple teams.\n\n    Args:\n        team_ids: List of team IDs to analyze\n\n    Returns:\n        List of team analysis data\n\n    Raises:\n        RezenError: If API requests fail\n    \"\"\"\n    client: RezenClient = RezenClient()\n\n    team_analysis: List[Dict[str, Any]] = []\n\n    for team_id in team_ids:\n        try:\n            team: Dict[str, Any] = client.teams.get_team_without_agents(team_id)\n\n            analysis: Dict[str, Any] = {\n                \"id\": team.get(\"id\"),\n                \"name\": team.get(\"name\"),\n                \"type\": team.get(\"type\"),\n                \"status\": team.get(\"status\"),\n                \"created_at\": team.get(\"created_at\"),\n                \"leader_name\": team.get(\"leader_name\")\n            }\n\n            team_analysis.append(analysis)\n\n            print(f\"\u2705 {team.get('name')} - {team.get('type')} ({team.get('status')})\")\n\n        except RezenError as e:\n            print(f\"\u274c Error analyzing team {team_id}: {e}\")\n\n    return team_analysis\n\n# Usage\nteam_ids: List[str] = [\"team-1\", \"team-2\", \"team-3\"]\nanalysis: List[Dict[str, Any]] = analyze_team_details(team_ids)\n</code></pre>"},{"location":"guides/examples/#error-handling-patterns","title":"Error Handling Patterns","text":""},{"location":"guides/examples/#robust-api-calls","title":"Robust API Calls","text":"<pre><code>import time\nfrom typing import Callable, Any, TypeVar\n\nfrom rezen.exceptions import (\n    AuthenticationError,\n    ValidationError,\n    NotFoundError,\n    RateLimitError,\n    ServerError,\n    NetworkError\n)\n\nT = TypeVar('T')\n\ndef robust_api_call(func: Callable[..., T], *args: Any, max_retries: int = 3, **kwargs: Any) -&gt; T:\n    \"\"\"Make a robust API call with retries and error handling.\n\n    Args:\n        func: Function to call\n        *args: Positional arguments for the function\n        max_retries: Maximum number of retry attempts\n        **kwargs: Keyword arguments for the function\n\n    Returns:\n        Result from the function call\n\n    Raises:\n        AuthenticationError: If authentication fails (not retried)\n        ValidationError: If validation fails (not retried)\n        NotFoundError: If resource not found (not retried)\n        RateLimitError: If rate limited after all retries\n        ServerError: If server error after all retries\n        NetworkError: If network error after all retries\n        Exception: For unexpected errors\n    \"\"\"\n    for attempt in range(max_retries):\n        try:\n            return func(*args, **kwargs)\n\n        except AuthenticationError as e:\n            print(f\"\u274c Authentication failed: {e}\")\n            raise  # Don't retry auth errors\n\n        except ValidationError as e:\n            print(f\"\u274c Validation error: {e}\")\n            raise  # Don't retry validation errors\n\n        except NotFoundError as e:\n            print(f\"\u274c Resource not found: {e}\")\n            raise  # Don't retry not found errors\n\n        except RateLimitError as e:\n            if attempt &lt; max_retries - 1:\n                wait_time: int = 2 ** attempt  # Exponential backoff\n                print(f\"\u26a0\ufe0f Rate limited. Waiting {wait_time}s before retry...\")\n                time.sleep(wait_time)\n                continue\n            raise\n\n        except (ServerError, NetworkError) as e:\n            if attempt &lt; max_retries - 1:\n                wait_time: int = 2 ** attempt\n                print(f\"\u26a0\ufe0f Server/Network error. Retrying in {wait_time}s...\")\n                time.sleep(wait_time)\n                continue\n            print(f\"\u274c Failed after {max_retries} attempts: {e}\")\n            raise\n\n        except Exception as e:\n            print(f\"\u274c Unexpected error: {e}\")\n            raise\n\n# Usage examples\nfrom typing import List, Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Robust team search\nteams: List[Dict[str, Any]] = robust_api_call(\n    client.teams.search_teams,\n    status=\"ACTIVE\",\n    page_size=50\n)\n\n# Robust transaction creation\ntransaction: Dict[str, Any] = robust_api_call(\n    client.transaction_builder.create_transaction_builder,\n    \"TRANSACTION\"\n)\n</code></pre>"},{"location":"guides/examples/#validation-helper","title":"Validation Helper","text":"<pre><code>from typing import Dict, List, Any\n\nfrom rezen.exceptions import ValidationError\n\ndef validate_transaction_data(transaction_data: Dict[str, Any]) -&gt; bool:\n    \"\"\"Validate transaction data before API calls.\n\n    Args:\n        transaction_data: Dictionary containing transaction information\n\n    Returns:\n        True if validation passes\n\n    Raises:\n        ValidationError: If validation fails with detailed error messages\n    \"\"\"\n    errors: List[str] = []\n\n    # Required fields\n    required_fields: List[str] = ['address', 'city', 'state', 'zipCode']\n    property_data: Dict[str, Any] = transaction_data.get('property', {})\n\n    for field in required_fields:\n        if not property_data.get(field):\n            errors.append(f\"Missing required property field: {field}\")\n\n    # Price validation\n    price = transaction_data.get('purchase_price')\n    if price and (not isinstance(price, (int, float)) or price &lt;= 0):\n        errors.append(\"Purchase price must be a positive number\")\n\n    # Email validation (basic)\n    participants: List[Dict[str, Any]] = transaction_data.get('participants', [])\n    for participant in participants:\n        email: str = participant.get('email', '')\n        if email and '@' not in email:\n            errors.append(f\"Invalid email for {participant.get('first_name', 'participant')}: {email}\")\n\n    if errors:\n        raise ValidationError(f\"Transaction validation failed: {'; '.join(errors)}\")\n\n    return True\n\n# Usage\ntransaction_data: Dict[str, Any] = {\n    \"property\": {\n        \"address\": \"123 Main St\",\n        \"city\": \"Anytown\",\n        \"state\": \"CA\",\n        \"zipCode\": \"90210\"\n    },\n    \"purchase_price\": 500000,\n    \"participants\": [\n        {\"first_name\": \"John\", \"email\": \"john@email.com\"}\n    ]\n}\n\ntry:\n    validate_transaction_data(transaction_data)\n    print(\"\u2705 Transaction data is valid\")\nexcept ValidationError as e:\n    print(f\"\u274c Validation failed: {e}\")\n</code></pre>"},{"location":"guides/examples/#batch-operations","title":"Batch Operations","text":""},{"location":"guides/examples/#batch-agent-lookup","title":"Batch Agent Lookup","text":"<pre><code>def batch_agent_lookup(agent_identifiers, lookup_type=\"email\"):\n    \"\"\"Look up multiple agents by email or ID.\"\"\"\n    client = RezenClient()\n\n    results = {\n        \"found\": [],\n        \"not_found\": [],\n        \"errors\": []\n    }\n\n    for identifier in agent_identifiers:\n        try:\n            if lookup_type == \"email\":\n                agents = client.agents.get_agents_by_email(identifier)\n            elif lookup_type == \"id\":\n                agents = client.agents.get_agents_by_ids([identifier])\n            else:\n                raise ValueError(f\"Unknown lookup_type: {lookup_type}\")\n\n            if agents:\n                results[\"found\"].extend(agents)\n                print(f\"\u2705 Found agent(s) for {identifier}\")\n            else:\n                results[\"not_found\"].append(identifier)\n                print(f\"\u274c No agent found for {identifier}\")\n\n        except Exception as e:\n            results[\"errors\"].append({\"identifier\": identifier, \"error\": str(e)})\n            print(f\"\u274c Error looking up {identifier}: {e}\")\n\n    return results\n\n# Usage\nemails = [\"agent1@email.com\", \"agent2@email.com\", \"nonexistent@email.com\"]\nresults = batch_agent_lookup(emails, lookup_type=\"email\")\n\nprint(f\"\\nResults: {len(results['found'])} found, {len(results['not_found'])} not found, {len(results['errors'])} errors\")\n</code></pre>"},{"location":"guides/examples/#bulk-team-analysis","title":"Bulk Team Analysis","text":"<pre><code>def bulk_team_analysis(team_search_criteria):\n    \"\"\"Analyze multiple teams based on search criteria.\"\"\"\n    client = RezenClient()\n\n    all_teams = []\n    analysis_results = []\n\n    # Get teams for each criteria\n    for criteria in team_search_criteria:\n        try:\n            teams = client.teams.search_teams(**criteria)\n            all_teams.extend(teams)\n            print(f\"Found {len(teams)} teams for criteria: {criteria}\")\n        except Exception as e:\n            print(f\"Error searching teams with {criteria}: {e}\")\n\n    # Analyze each team\n    for team in all_teams:\n        team_id = team.get('id')\n        try:\n            team_details = client.teams.get_team_without_agents(team_id)\n\n            analysis = {\n                \"id\": team_id,\n                \"name\": team_details.get(\"name\"),\n                \"type\": team_details.get(\"type\"),\n                \"status\": team_details.get(\"status\"),\n                \"analysis_date\": datetime.now().isoformat()\n            }\n\n            analysis_results.append(analysis)\n\n        except Exception as e:\n            print(f\"Error analyzing team {team_id}: {e}\")\n\n    return analysis_results\n\n# Usage\nsearch_criteria = [\n    {\"team_type\": \"PLATINUM\", \"status\": \"ACTIVE\"},\n    {\"team_type\": \"NORMAL\", \"status\": \"ACTIVE\", \"page_size\": 20},\n    {\"search_text\": \"sales\"}\n]\n\nanalysis = bulk_team_analysis(search_criteria)\nprint(f\"Analyzed {len(analysis)} teams total\")\n</code></pre>"},{"location":"guides/examples/#integration-patterns","title":"Integration Patterns","text":""},{"location":"guides/examples/#flask-web-application-integration","title":"Flask Web Application Integration","text":"<pre><code>from flask import Flask, jsonify, request\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError\n\napp = Flask(__name__)\nclient = RezenClient()\n\n@app.route('/api/teams/search')\ndef search_teams():\n    try:\n        # Get query parameters\n        status = request.args.get('status', 'ACTIVE')\n        team_type = request.args.get('team_type')\n        page_size = int(request.args.get('page_size', 20))\n\n        # Search teams\n        teams = client.teams.search_teams(\n            status=status,\n            team_type=team_type,\n            page_size=page_size\n        )\n\n        return jsonify({\n            \"success\": True,\n            \"data\": teams,\n            \"count\": len(teams)\n        })\n\n    except RezenError as e:\n        return jsonify({\n            \"success\": False,\n            \"error\": str(e)\n        }), 400\n    except Exception as e:\n        return jsonify({\n            \"success\": False,\n            \"error\": \"Internal server error\"\n        }), 500\n\n@app.route('/api/transactions', methods=['POST'])\ndef create_transaction():\n    try:\n        data = request.get_json()\n\n        # Create transaction\n        response = client.transaction_builder.create_transaction_builder()\n        transaction_id = response['id']\n\n        # Add property details if provided\n        if 'property' in data:\n            client.transaction_builder.update_location_info(\n                transaction_id, data['property']\n            )\n\n        return jsonify({\n            \"success\": True,\n            \"transaction_id\": transaction_id\n        })\n\n    except Exception as e:\n        return jsonify({\n            \"success\": False,\n            \"error\": str(e)\n        }), 400\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"guides/examples/#data-export-utility","title":"Data Export Utility","text":"<pre><code>import csv\nfrom datetime import datetime\n\ndef export_teams_to_csv(filename=None):\n    \"\"\"Export team data to CSV file.\"\"\"\n    if not filename:\n        filename = f\"teams_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n\n    client = RezenClient()\n\n    # Get all active teams\n    teams = client.teams.search_teams(status=\"ACTIVE\", page_size=1000)\n\n    # Write to CSV\n    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:\n        fieldnames = ['id', 'name', 'type', 'status', 'leader_name', 'created_at']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        writer.writeheader()\n\n        for team in teams:\n            # Get detailed team info\n            try:\n                team_details = client.teams.get_team_without_agents(team['id'])\n\n                row = {\n                    'id': team_details.get('id'),\n                    'name': team_details.get('name'),\n                    'type': team_details.get('type'),\n                    'status': team_details.get('status'),\n                    'leader_name': team_details.get('leader_name'),\n                    'created_at': team_details.get('created_at')\n                }\n\n                writer.writerow(row)\n\n            except Exception as e:\n                print(f\"Error processing team {team['id']}: {e}\")\n\n    print(f\"Exported {len(teams)} teams to {filename}\")\n    return filename\n\n# Usage\nfilename = export_teams_to_csv()\n</code></pre>"},{"location":"guides/examples/#configuration-management","title":"Configuration Management","text":"<pre><code>import os\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass\nclass RezenConfig:\n    \"\"\"Configuration management for ReZEN client.\"\"\"\n    api_key: str\n    base_url: Optional[str] = None\n    timeout: int = 30\n    max_retries: int = 3\n\n    @classmethod\n    def from_environment(cls):\n        \"\"\"Load configuration from environment variables.\"\"\"\n        api_key = os.getenv('REZEN_API_KEY')\n        if not api_key:\n            raise ValueError(\"REZEN_API_KEY environment variable is required\")\n\n        return cls(\n            api_key=api_key,\n            base_url=os.getenv('REZEN_BASE_URL'),\n            timeout=int(os.getenv('REZEN_TIMEOUT', 30)),\n            max_retries=int(os.getenv('REZEN_MAX_RETRIES', 3))\n        )\n\n    def create_client(self):\n        \"\"\"Create a ReZEN client with this configuration.\"\"\"\n        return RezenClient(\n            api_key=self.api_key,\n            base_url=self.base_url\n        )\n\n# Usage\nconfig = RezenConfig.from_environment()\nclient = config.create_client()\n</code></pre>"},{"location":"guides/examples/#testing-patterns","title":"Testing Patterns","text":""},{"location":"guides/examples/#mock-testing-setup","title":"Mock Testing Setup","text":"<pre><code>import unittest\nfrom unittest.mock import Mock, patch\nfrom rezen import RezenClient\n\nclass TestRezenIntegration(unittest.TestCase):\n\n    def setUp(self):\n        self.client = RezenClient(api_key=\"test_key\")\n\n    @patch('rezen.teams.TeamsClient.search_teams')\n    def test_team_search(self, mock_search):\n        # Mock response\n        mock_search.return_value = [\n            {\"id\": \"team-1\", \"name\": \"Test Team\", \"type\": \"NORMAL\"}\n        ]\n\n        # Test\n        teams = self.client.teams.search_teams(status=\"ACTIVE\")\n\n        # Assertions\n        self.assertEqual(len(teams), 1)\n        self.assertEqual(teams[0][\"name\"], \"Test Team\")\n        mock_search.assert_called_once_with(status=\"ACTIVE\")\n\n    @patch('rezen.transaction_builder.TransactionBuilderClient.create_transaction_builder')\n    def test_transaction_creation(self, mock_create):\n        # Mock response\n        mock_create.return_value = {\"id\": \"tx-12345\"}\n\n        # Test\n        response = self.client.transaction_builder.create_transaction_builder()\n\n        # Assertions\n        self.assertEqual(response[\"id\"], \"tx-12345\")\n        mock_create.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>These examples demonstrate real-world usage patterns and best practices for the ReZEN API client. Each pattern can be adapted and combined based on your specific integration needs.</p> <p>For more specific use cases or custom patterns, refer to the API Reference for detailed method documentation.</p>"},{"location":"guides/transactions/","title":"Transaction Workflows","text":"<p>Complete guide to managing real estate transactions with the ReZEN API, from creation to closing.</p>"},{"location":"guides/transactions/#critical-requirements-read-this-first","title":"\ud83d\udea8 CRITICAL REQUIREMENTS - Read This First!","text":"<p>API Requirements That Must Be Followed</p> <p>Based on extensive testing, these requirements are MANDATORY for successful API calls. Failing to follow them will result in \"Bad request: Invalid request\" errors.</p>"},{"location":"guides/transactions/#location-updates","title":"\ud83c\udfe0 Location Updates","text":"<p>\u274c THIS FAILS: <pre><code># Basic address fields alone will FAIL\nlocation_data = {\n    \"street\": \"123 Main St\",\n    \"city\": \"Salt Lake City\", \n    \"state\": \"UTAH\",\n    \"zip\": \"84101\"\n}\n# API returns: \"Bad request: Invalid request\"\n</code></pre></p> <p>\u2705 THIS WORKS: <pre><code># Additional property details are REQUIRED\nlocation_data = {\n    \"street\": \"123 Main St\",\n    \"city\": \"Salt Lake City\",\n    \"state\": \"UTAH\", \n    \"zip\": \"84101\",\n    \"county\": \"Salt Lake\",      # REQUIRED\n    \"yearBuilt\": 2020,         # REQUIRED  \n    \"mlsNumber\": \"MLS123456\"   # REQUIRED\n}\n</code></pre></p>"},{"location":"guides/transactions/#pricedate-updates","title":"\ud83d\udcb0 Price/Date Updates","text":"<p>\u274c THIS FAILS: <pre><code># Basic price fields alone will FAIL\nprice_data = {\n    \"dealType\": \"COMPENSATING\",\n    \"propertyType\": \"RESIDENTIAL\",\n    \"salePrice\": {\"amount\": 500000, \"currency\": \"USD\"},\n    \"representationType\": \"BUYER\"\n}\n# API returns: \"Bad request: Invalid request\"\n</code></pre></p> <p>\u2705 THIS WORKS: <pre><code># BOTH commission objects are REQUIRED\nprice_data = {\n    \"dealType\": \"COMPENSATING\",\n    \"propertyType\": \"RESIDENTIAL\", \n    \"salePrice\": {\"amount\": 500000, \"currency\": \"USD\"},\n    \"representationType\": \"BUYER\",\n    \"listingCommission\": {     # REQUIRED\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    },\n    \"saleCommission\": {        # REQUIRED\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    }\n}\n</code></pre></p>"},{"location":"guides/transactions/#co-agent-roles","title":"\ud83d\udc65 Co-Agent Roles","text":"<p>\u2705 WORKING ROLES: - <code>\"REAL\"</code> - Always works - <code>\"BUYERS_AGENT\"</code> - Works with location data - <code>\"SELLERS_AGENT\"</code> - Works with location data</p> <p>\u274c NON-WORKING ROLES: - <code>\"LISTING_AGENT\"</code> - Always fails</p>"},{"location":"guides/transactions/#owner-agent-requirements","title":"\ud83c\udfe2 Owner Agent Requirements","text":"<p>Owner agents require a specific sequence and additional fields:</p> <ol> <li>Create transaction</li> <li>Add location info (with additional fields) - REQUIRED FIRST</li> <li>Add price/date info (with commission objects) - REQUIRED SECOND </li> <li>Add buyers/sellers - REQUIRED THIRD</li> <li>THEN add owner agent (with valid <code>officeId</code> and <code>teamId</code>)</li> </ol>"},{"location":"guides/transactions/#transaction-lifecycle-overview","title":"\ud83c\udfd7\ufe0f Transaction Lifecycle Overview","text":"<p>Real estate transactions in ReZEN follow a structured lifecycle:</p> <pre><code>graph LR\n    A[Create Builder] --&gt; B[Add Participants]\n    B --&gt; C[Set Property Info]\n    C --&gt; D[Configure Finances]\n    D --&gt; E[Submit Transaction]\n    E --&gt; F[Manage Live Transaction]\n    F --&gt; G[Process Payments]\n    G --&gt; H[Generate Documents]\n    H --&gt; I[Close Transaction]\n</code></pre>"},{"location":"guides/transactions/#handling-multiple-teams","title":"\ud83d\udc65 Handling Multiple Teams","text":"<p>Many users belong to multiple teams in ReZEN. This section shows how to handle team selection when creating transactions.</p> <p>Team Selection in ReZEN</p> <p>When adding an owner agent to a transaction, you must specify: - Agent ID: Your user ID (automatically retrieved) - Office ID: Your office ID (automatically retrieved)  - Team ID: Which team to use (requires selection if multiple)</p>"},{"location":"guides/transactions/#discovering-available-teams","title":"\ud83d\udd0d Discovering Available Teams","text":"<p>First, check what teams and offices you have access to:</p> <pre><code>from rezen import RezenClient\n\ndef check_user_teams():\n    \"\"\"Check what teams the current user belongs to.\"\"\"\n    client = RezenClient()\n\n    # Get comprehensive team and office information\n    teams_info = client.transaction_builder.get_user_teams_and_offices()\n\n    print(f\"Agent ID: {teams_info['agent_id']}\")\n    print(f\"Office ID: {teams_info['office_id']}\")\n    print(f\"Has multiple teams: {teams_info['has_multiple_teams']}\")\n\n    if teams_info[\"has_multiple_teams\"]:\n        print(f\"\\n\ud83c\udfe2 You belong to {len(teams_info['teams'])} teams:\")\n        for team in teams_info[\"teams\"]:\n            is_default = team[\"id\"] == teams_info[\"default_team\"][\"id\"]\n            marker = \" \u2b50 (DEFAULT)\" if is_default else \"\"\n            print(f\"  - {team['name']}\")\n            print(f\"    Role: {team['role']}\")\n            print(f\"    ID: {team['id']}{marker}\")\n\n        print(f\"\\n\ud83c\udfaf Smart default team: {teams_info['default_team']['name']}\")\n        print(\"   (Prefers LEADER role over ADMIN)\")\n    else:\n        print(f\"\\n\ud83c\udfe2 Single team: {teams_info['default_team']['name']}\")\n\n    return teams_info\n\n# Example output:\n# Agent ID: 12345678-1234-1234-1234-123456789012\n# Office ID: 87654321-4321-4321-4321-210987654321\n# Has multiple teams: True\n# \n# \ud83c\udfe2 You belong to 2 teams:\n#   - The Perry Group Standard Team\n#     Role: LEADER\n#     ID: team-uuid-1 \u2b50 (DEFAULT)\n#   - The Perry Group Marketing Group  \n#     Role: ADMIN\n#     ID: team-uuid-2\n#\n# \ud83c\udfaf Smart default team: The Perry Group Standard Team\n#    (Prefers LEADER role over ADMIN)\n</code></pre>"},{"location":"guides/transactions/#three-approaches-to-owner-agent-setup","title":"\ud83d\ude80 Three Approaches to Owner Agent Setup","text":"<p>Choose the approach that best fits your needs:</p> Option 1: Automatic (Recommended)Option 2: Discovery + SelectionOption 3: Always Explicit <p>Use the default team with smart selection logic:</p> <pre><code>def setup_owner_agent_automatic():\n    \"\"\"Use automatic team selection (prefers LEADER role).\"\"\"\n    client = RezenClient()\n\n    # Create and setup transaction\n    transaction_id = create_basic_transaction()\n\n    # Set current user as owner agent with default team\n    result = client.transaction_builder.set_current_user_as_owner_agent(\n        transaction_id, \n        role=\"BUYERS_AGENT\"  # or \"SELLERS_AGENT\"\n    )\n\n    print(\"\u2705 Owner agent set with default team\")\n    return result\n\n# This method:\n# - Uses smart default logic (LEADER &gt; ADMIN &gt; first team)\n# - Shows warning if you have multiple teams\n# - Handles all ID resolution automatically\n</code></pre> <p>Check teams first, then choose explicitly:</p> <pre><code>def setup_owner_agent_with_choice():\n    \"\"\"Check teams and choose which one to use.\"\"\"\n    client = RezenClient()\n\n    # Create transaction\n    transaction_id = create_basic_transaction()\n\n    # Discover available teams\n    teams_info = client.transaction_builder.get_user_teams_and_offices()\n\n    if teams_info[\"has_multiple_teams\"]:\n        print(\"Available teams:\")\n        for i, team in enumerate(teams_info[\"teams\"]):\n            role = team[\"role\"]\n            name = team[\"name\"]\n            is_default = team[\"id\"] == teams_info[\"default_team\"][\"id\"]\n            marker = \" (DEFAULT)\" if is_default else \"\"\n            print(f\"  {i+1}. {name} - Role: {role}{marker}\")\n\n        # For demo, use default team  \n        # In real app, you might prompt user for choice\n        selected_team_id = teams_info[\"default_team\"][\"id\"]\n        print(f\"Using: {teams_info['default_team']['name']}\")\n    else:\n        selected_team_id = teams_info[\"default_team\"][\"id\"]\n        print(f\"Using single team: {teams_info['default_team']['name']}\")\n\n    # Set owner agent with specific team\n    result = client.transaction_builder.set_current_user_as_owner_agent_with_team(\n        transaction_id,\n        role=\"BUYERS_AGENT\",\n        team_id=selected_team_id\n    )\n\n    print(\"\u2705 Owner agent set with chosen team\")\n    return result\n</code></pre> <p>Always specify the team ID directly:</p> <pre><code>def setup_owner_agent_explicit():\n    \"\"\"Always specify team explicitly for full control.\"\"\"\n    client = RezenClient()\n\n    # Create transaction\n    transaction_id = create_basic_transaction()\n\n    # Get available teams\n    teams_info = client.transaction_builder.get_user_teams_and_offices()\n\n    # Select team by business logic (e.g., always use LEADER team)\n    leader_teams = [t for t in teams_info[\"teams\"] if t[\"role\"] == \"LEADER\"]\n\n    if leader_teams:\n        selected_team_id = leader_teams[0][\"id\"]\n        print(f\"Using LEADER team: {leader_teams[0]['name']}\")\n    else:\n        # Fallback to default\n        selected_team_id = teams_info[\"default_team\"][\"id\"]\n        print(f\"No LEADER team, using default: {teams_info['default_team']['name']}\")\n\n    # Set owner agent with explicit team\n    result = client.transaction_builder.set_current_user_as_owner_agent_with_team(\n        transaction_id,\n        role=\"BUYERS_AGENT\", \n        team_id=selected_team_id\n    )\n\n    print(\"\u2705 Owner agent set with explicit team selection\")\n    return result\n</code></pre>"},{"location":"guides/transactions/#complete-working-example","title":"\u2705 Complete Working Example","text":"<p>Here's a full example that handles multiple teams automatically:</p> <pre><code>def create_transaction_with_owner_agent():\n    \"\"\"Create complete transaction with owner agent handling multiple teams.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Step 1: Create transaction\n        transaction_id = client.transaction_builder.create_transaction_builder()\n        print(f\"Created transaction: {transaction_id}\")\n\n        # Step 2: Add location with ALL required fields\n        location_data = {\n            \"street\": \"123 Demo Leader Lane\",\n            \"city\": \"Salt Lake City\",\n            \"state\": \"UTAH\",\n            \"zip\": \"84101\",\n            \"county\": \"Salt Lake\",        # REQUIRED\n            \"yearBuilt\": 2020,           # REQUIRED\n            \"mlsNumber\": \"MLS-456789\"    # REQUIRED\n        }\n        client.transaction_builder.update_location_info(transaction_id, location_data)\n        print(\"\u2705 Added location\")\n\n        # Step 3: Add price/date with commission objects\n        price_data = {\n            \"dealType\": \"COMPENSATING\",\n            \"propertyType\": \"RESIDENTIAL\",\n            \"salePrice\": {\"amount\": 750000, \"currency\": \"USD\"},\n            \"representationType\": \"BUYER\",\n            \"listingCommission\": {       # REQUIRED\n                \"commissionPercent\": 3.0,\n                \"percentEnabled\": True,\n                \"negativeOrEmpty\": False\n            },\n            \"saleCommission\": {          # REQUIRED\n                \"commissionPercent\": 3.0,\n                \"percentEnabled\": True,\n                \"negativeOrEmpty\": False\n            }\n        }\n        client.transaction_builder.update_price_and_date_info(transaction_id, price_data)\n        print(\"\u2705 Added price/date\")\n\n        # Step 4: Add buyer\n        buyer_data = {\n            \"firstName\": \"Demo\",\n            \"lastName\": \"Buyer\",\n            \"email\": \"demo.buyer@example.com\",\n            \"phoneNumber\": \"(555) 123-4567\"\n        }\n        client.transaction_builder.add_buyer(transaction_id, buyer_data)\n        print(\"\u2705 Added buyer\")\n\n        # Step 5: Set owner agent (handles multiple teams automatically)\n        result = client.transaction_builder.set_current_user_as_owner_agent(\n            transaction_id,\n            role=\"BUYERS_AGENT\"  # Must match representationType: BUYER -&gt; BUYERS_AGENT\n        )\n        print(\"\u2705 Set owner agent with automatic team handling\")\n\n        # Optional: Add co-agent\n        co_agent_info = {\n            \"agentId\": \"bd465129-b224-43e3-b92f-524ea5f53783\",\n            \"role\": \"REAL\",\n            \"receivesInvoice\": False\n        }\n        client.transaction_builder.add_co_agent(transaction_id, co_agent_info)\n        print(\"\u2705 Added co-agent\")\n\n        return transaction_id\n\n    except Exception as e:\n        print(f\"\u274c Error: {e}\")\n        return None\n\n# Usage\ntransaction_id = create_transaction_with_owner_agent()\nif transaction_id:\n    print(f\"\ud83c\udf89 Successfully created transaction: {transaction_id}\")\n</code></pre>"},{"location":"guides/transactions/#complete-transaction-workflow","title":"\ud83d\ude80 Complete Transaction Workflow","text":""},{"location":"guides/transactions/#phase-1-transaction-creation","title":"Phase 1: Transaction Creation","text":"Basic Transaction SetupComplete Transaction with Co-AgentAdvanced Transaction Setup <pre><code>from rezen import RezenClient\nfrom rezen.exceptions import RezenError\n\ndef create_basic_transaction():\n    \"\"\"Create a basic transaction with correct field names.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Step 1: Create transaction builder\n        response = client.transaction_builder.create_transaction_builder()\n        transaction_id = str(response)  # Extract ID as string\n        print(f\"\u2705 Created transaction: {transaction_id}\")\n\n        # Step 2: Add property information\n        # \u26a0\ufe0f CRITICAL: Basic address fields alone will FAIL!\n        # The API requires additional property details for successful location updates\n        location_data = {\n            \"street\": \"123 Main Street\",  # Use 'street' not 'address'\n            \"city\": \"Salt Lake City\",\n            \"state\": \"UTAH\",  # Must be ALL CAPS\n            \"zip\": \"84101\",   # Use 'zip' not 'zipCode'\n            \"county\": \"Salt Lake\",      # REQUIRED - API fails without this\n            \"yearBuilt\": 2020,         # REQUIRED - API fails without this\n            \"mlsNumber\": \"MLS123456\"   # REQUIRED - API fails without this\n        }\n        client.transaction_builder.update_location_info(\n            transaction_id, location_data\n        )\n        print(\"\u2705 Added property location (with required additional fields)\")\n\n        # Step 3: Add price/date information\n        # \u26a0\ufe0f CRITICAL: Both commission objects are REQUIRED!\n        # Basic price fields alone will FAIL with \"Bad request: Invalid request\"\n        price_date_data = {\n            \"dealType\": \"COMPENSATING\",\n            \"propertyType\": \"RESIDENTIAL\",\n            \"salePrice\": {  # Must be object with amount/currency\n                \"amount\": 500000,\n                \"currency\": \"USD\"\n            },\n            \"representationType\": \"BUYER\",\n            \"listingCommission\": {     # REQUIRED - cannot be omitted\n                \"commissionPercent\": 3.0,\n                \"percentEnabled\": True,\n                \"negativeOrEmpty\": False\n            },\n            \"saleCommission\": {        # REQUIRED - cannot be omitted\n                \"commissionPercent\": 3.0,\n                \"percentEnabled\": True,\n                \"negativeOrEmpty\": False\n            }\n        }\n        client.transaction_builder.update_price_and_date_info(\n            transaction_id, price_date_data\n        )\n        print(\"\u2705 Added pricing (with required commission objects)\")\n\n        return transaction_id\n\n    except RezenError as e:\n        print(f\"\u274c Transaction creation failed: {e}\")\n        return None\n</code></pre> <pre><code>from datetime import datetime, timedelta\n\ndef create_complete_transaction_with_coagent():\n    \"\"\"Create a complete transaction with all details including co-agent.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Create transaction builder\n        response = client.transaction_builder.create_transaction_builder(\"TRANSACTION\")\n        transaction_id = str(response)\n        print(f\"\u2705 Created transaction: {transaction_id}\")\n\n        # Add location (Required field names: street, zip, state in ALL CAPS)\n        location_data = {\n            \"street\": \"2158 E Wilson Ave\",\n            \"city\": \"Salt Lake City\",\n            \"state\": \"UTAH\",  # ALL CAPS required\n            \"zip\": \"84108\",   # 'zip' not 'zipCode'\n            \"county\": \"Salt Lake\",\n            \"yearBuilt\": 2020,\n            \"mlsNumber\": \"MLS123456\"\n        }\n        client.transaction_builder.update_location_info(transaction_id, location_data)\n        print(\"\u2705 Added property location\")\n\n        # Add price/date info\n        closing_date = (datetime.now() + timedelta(days=45)).strftime(\"%Y-%m-%d\")\n        price_data = {\n            \"dealType\": \"COMPENSATING\",\n            \"propertyType\": \"RESIDENTIAL\",\n            \"salePrice\": {  # Must be object with amount/currency\n                \"amount\": 565000,\n                \"currency\": \"USD\"\n            },\n            \"listingCommission\": {\n                \"commissionPercent\": 3.0,\n                \"percentEnabled\": True,\n                \"negativeOrEmpty\": False\n            },\n            \"saleCommission\": {\n                \"commissionPercent\": 3.0,\n                \"percentEnabled\": True,\n                \"negativeOrEmpty\": False\n            },\n            \"acceptanceDate\": datetime.now().strftime(\"%Y-%m-%d\"),\n            \"closingDate\": closing_date,\n            \"earnestMoney\": 15000,\n            \"downPayment\": 113000,\n            \"loanAmount\": 452000,\n            \"representationType\": \"BUYER\"\n        }\n        client.transaction_builder.update_price_and_date_info(transaction_id, price_data)\n        print(\"\u2705 Added pricing and dates\")\n\n        # Add buyer (use camelCase for names)\n        buyer_data = {\n            \"firstName\": \"John\",  # camelCase required\n            \"lastName\": \"Doe\",\n            \"email\": \"john.doe@example.com\",\n            \"phoneNumber\": \"(801) 555-1234\"  # camelCase required\n        }\n        client.transaction_builder.add_buyer(transaction_id, buyer_data)\n        print(\"\u2705 Added buyer\")\n\n        # Add seller\n        seller_data = {\n            \"firstName\": \"Jane\",\n            \"lastName\": \"Smith\",\n            \"email\": \"jane.smith@example.com\",\n            \"phoneNumber\": \"(801) 555-5678\"\n        }\n        client.transaction_builder.add_seller(transaction_id, seller_data)\n        print(\"\u2705 Added seller\")\n\n        # Add co-agent (can be added at any time)\n        co_agent_info = {\n            \"agentId\": \"bd465129-b224-43e3-b92f-524ea5f53783\",\n            \"role\": \"REAL\",\n            \"receivesInvoice\": False,\n            \"opCityReferral\": False,\n            \"optedInForEcp\": False\n        }\n        client.transaction_builder.add_co_agent(transaction_id, co_agent_info)\n        print(\"\u2705 Added co-agent\")\n\n        # Add title company\n        title_info = {\n            \"company\": \"Premier Title Company\",\n            \"firstName\": \"Sarah\",\n            \"lastName\": \"Johnson\",\n            \"email\": \"sarah@premiertitle.com\",\n            \"phoneNumber\": \"(801) 555-9999\"\n        }\n        client.transaction_builder.update_title_info(transaction_id, title_info)\n        print(\"\u2705 Added title company\")\n\n        # Add mortgage info\n        mortgage_info = {\n            \"lenderName\": \"First National Bank\",\n            \"lenderContact\": \"Mike Banker\",\n            \"lenderPhone\": \"(801) 555-2468\",\n            \"lenderEmail\": \"mike@firstnational.com\"\n        }\n        client.transaction_builder.update_mortgage_info(transaction_id, mortgage_info)\n        print(\"\u2705 Added mortgage information\")\n\n        return transaction_id\n\n    except RezenError as e:\n        print(f\"\u274c Transaction creation failed: {e}\")\n        print(f\"   Error type: {type(e).__name__}\")\n        return None\n</code></pre> <pre><code>def create_advanced_transaction():\n    \"\"\"Create a transaction with complete configuration.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Create transaction builder\n        response = client.transaction_builder.create_transaction_builder(\n            builder_type=\"TRANSACTION\"\n        )\n        transaction_id = str(response)  # Extract ID as string\n\n        # Add detailed property information\n        location_data = {\n            \"street\": \"456 Oak Avenue\",  # Use 'street' not 'address'\n            \"city\": \"Springfield\",\n            \"state\": \"CALIFORNIA\",  # ALL CAPS\n            \"zip\": \"90210\",  # Use 'zip' not 'zipCode'\n            \"county\": \"Los Angeles\",\n            \"subdivision\": \"Oak Grove Estates\",\n            \"unit\": \"Unit 2B\"\n        }\n        client.transaction_builder.update_location_info(\n            transaction_id, location_data\n        )\n\n        # Set pricing and dates\n        price_data = {\n            \"dealType\": \"COMPENSATING\",\n            \"propertyType\": \"RESIDENTIAL\",\n            \"salePrice\": {  # Must be object\n                \"amount\": 750000,\n                \"currency\": \"USD\"\n            },\n            \"earnestMoney\": 15000,  # Use camelCase\n            \"downPayment\": 150000,\n            \"loanAmount\": 600000,\n            \"acceptanceDate\": \"2024-02-01\",  # Use camelCase\n            \"closingDate\": \"2024-03-15\"\n        }\n        client.transaction_builder.update_price_and_date_info(\n            transaction_id, price_data\n        )\n\n        return transaction_id\n\n    except RezenError as e:\n        print(f\"\u274c Advanced transaction setup failed: {e}\")\n        return None\n</code></pre>"},{"location":"guides/transactions/#phase-2-participant-management","title":"Phase 2: Participant Management","text":"Adding Core ParticipantsAdding Service Providers <pre><code>def add_core_participants(transaction_id: str):\n    \"\"\"Add buyer, seller, and agents to the transaction.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Add buyer (use camelCase for field names)\n        buyer_data = {\n            \"firstName\": \"John\",      # Use camelCase\n            \"lastName\": \"Doe\",        # Use camelCase  \n            \"email\": \"john.doe@email.com\",\n            \"phoneNumber\": \"(555) 123-4567\"  # Use camelCase\n        }\n        client.transaction_builder.add_buyer(transaction_id, buyer_data)\n        print(\"\u2705 Added buyer\")\n\n        # Add seller\n        seller_data = {\n            \"firstName\": \"Jane\",\n            \"lastName\": \"Smith\",\n            \"email\": \"jane.smith@email.com\",\n            \"phoneNumber\": \"(555) 987-6543\"\n        }\n        client.transaction_builder.add_seller(transaction_id, seller_data)\n        print(\"\u2705 Added seller\")\n\n        # Add co-agent (can be added at any time)\n        co_agent_data = {\n            \"agentId\": \"bd465129-b224-43e3-b92f-524ea5f53783\",\n            \"role\": \"REAL\",  # Will appear as BUYERS_AGENT/SELLERS_AGENT based on representationType\n            \"receivesInvoice\": False\n        }\n        client.transaction_builder.add_co_agent(transaction_id, co_agent_data)\n        print(\"\u2705 Added co-agent\")\n\n        return True\n\n    except RezenError as e:\n        print(f\"\u274c Failed to add participants: {e}\")\n        return False\n</code></pre> <pre><code>def add_service_providers(transaction_id: str):\n    \"\"\"Add all necessary service providers.\"\"\"\n    client = RezenClient()\n\n    service_providers = [\n        {\n            \"type\": \"INSPECTOR\",\n            \"firstName\": \"Mike\",      # Use camelCase\n            \"lastName\": \"Inspector\",  # Use camelCase\n            \"company\": \"Quality Inspections Inc\",\n            \"phoneNumber\": \"(555) INSPECT\",  # Use camelCase\n            \"email\": \"mike@qualityinspections.com\"\n        },\n        {\n            \"type\": \"LENDER\",\n            \"firstName\": \"Sarah\",\n            \"lastName\": \"Banker\",\n            \"company\": \"First National Bank\",\n            \"phoneNumber\": \"(555) 555-LOAN\",\n            \"email\": \"sarah@firstnational.com\"\n        },\n        {\n            \"type\": \"APPRAISER\", \n            \"firstName\": \"Bob\",\n            \"lastName\": \"Appraiser\",\n            \"company\": \"Accurate Appraisals\",\n            \"phoneNumber\": \"(555) 555-VALU\",\n            \"email\": \"bob@accurateappraisals.com\"\n        }\n    ]\n\n    try:\n        for provider in service_providers:\n            client.transaction_builder.add_participant(\n                transaction_id, provider\n            )\n            print(f\"\u2705 Added {provider['type'].lower()}\")\n\n        return True\n\n    except RezenError as e:\n        print(f\"\u274c Failed to add service providers: {e}\")\n        return False\n</code></pre>"},{"location":"guides/transactions/#phase-3-financial-configuration","title":"Phase 3: Financial Configuration","text":"Commission ManagementTitle Company Setup <pre><code>def setup_commission_splits(transaction_id: str):\n    \"\"\"Configure commission splits between agents.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Set commission payer\n        # NOTE: All fields below are REQUIRED\n        payer_data = {\n            \"role\": \"REAL\",  # Valid roles: TITLE, SELLER, LANDLORD, OTHER_AGENT, REAL\n            \"firstName\": \"Commission\",\n            \"lastName\": \"Payer\",\n            \"email\": \"commission@example.com\", \n            \"phoneNumber\": \"(555) 111-2222\",\n            \"companyName\": \"Commission Company LLC\",\n            \"receivesInvoice\": True,\n            \"opCityReferral\": False,\n            \"optedInForEcp\": False\n        }\n        client.transaction_builder.add_commission_payer(\n            transaction_id, payer_data\n        )\n        print(\"\u2705 Set commission payer\")\n\n        # Configure commission splits\n        commission_splits = [\n            {\n                \"agent_id\": \"listing-agent-uuid\",\n                \"split_percentage\": 50.0,\n                \"commission_amount\": 22500  # 3% of $750k\n            },\n            {\n                \"agent_id\": \"buyer-agent-uuid\",\n                \"split_percentage\": 50.0,\n                \"commission_amount\": 22500  # 3% of $750k\n            }\n        ]\n\n        client.transaction_builder.update_commission_splits(\n            transaction_id, commission_splits\n        )\n        print(\"\u2705 Configured commission splits\")\n\n        return True\n\n    except RezenError as e:\n        print(f\"\u274c Commission setup failed: {e}\")\n        return False\n</code></pre> <pre><code>def setup_title_company(transaction_id: str):\n    \"\"\"Add title company information.\"\"\"\n    client = RezenClient()\n\n    try:\n        title_data = {\n            \"title_company\": \"Premier Title Co\",\n            \"title_contact\": \"Sarah Johnson\",\n            \"title_phone\": \"+1-555-789-0123\",\n            \"title_email\": \"sarah@premiertitle.com\",\n            \"title_address\": \"789 Title Lane, Title City, TC 54321\",\n            \"policy_number\": \"PT-2024-001234\"\n        }\n\n        client.transaction_builder.update_title_info(\n            transaction_id, title_data\n        )\n        print(\"\u2705 Added title company information\")\n\n        return True\n\n    except RezenError as e:\n        print(f\"\u274c Title setup failed: {e}\")\n        return False\n</code></pre>"},{"location":"guides/transactions/#phase-4-transaction-submission-management","title":"Phase 4: Transaction Submission &amp; Management","text":"Submit TransactionTransaction Monitoring <pre><code>def submit_and_manage_transaction(transaction_id: str):\n    \"\"\"Submit transaction and begin management phase.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Submit the transaction\n        submit_response = client.transaction_builder.submit_transaction(\n            transaction_id\n        )\n        print(\"\u2705 Transaction submitted successfully\")\n\n        # Get the live transaction ID\n        live_transaction_id = submit_response.get('live_transaction_id', transaction_id)\n\n        # Switch to transactions API for ongoing management\n        transaction = client.transactions.get_transaction(live_transaction_id)\n        print(f\"\u2705 Retrieved live transaction: {transaction['status']}\")\n\n        return live_transaction_id\n\n    except RezenError as e:\n        print(f\"\u274c Transaction submission failed: {e}\")\n        return None\n</code></pre> <pre><code>def monitor_transaction_progress(transaction_id: str):\n    \"\"\"Monitor and update transaction progress.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Get current transaction status\n        transaction = client.transactions.get_transaction(transaction_id)\n\n        print(f\"\ud83d\udcca Transaction Status: {transaction['status']}\")\n        print(f\"\ud83c\udfe0 Property: {transaction.get('property', {}).get('address', 'N/A')}\")\n        print(f\"\ud83d\udcb0 Purchase Price: ${transaction.get('purchase_price', 0):,}\")\n\n        # Check for pending tasks or issues\n        if transaction.get('status') == 'PENDING_INSPECTION':\n            print(\"\u23f0 Waiting for inspection to be completed\")\n        elif transaction.get('status') == 'PENDING_APPRAISAL':\n            print(\"\u23f0 Waiting for appraisal results\")\n        elif transaction.get('status') == 'PENDING_FINANCING':\n            print(\"\u23f0 Waiting for loan approval\")\n\n        return transaction\n\n    except RezenError as e:\n        print(f\"\u274c Failed to retrieve transaction: {e}\")\n        return None\n</code></pre>"},{"location":"guides/transactions/#payment-processing","title":"\ud83d\udcb0 Payment Processing","text":""},{"location":"guides/transactions/#earnest-money-deposits","title":"Earnest Money &amp; Deposits","text":"<pre><code>def process_earnest_money(transaction_id: str, amount: float):\n    \"\"\"Process earnest money deposit.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Get payment information\n        payment_info = client.transactions.get_payment_info(\n            transaction_id, \"buyer-agent-uuid\"\n        )\n\n        # Process the earnest money\n        # Note: This would typically integrate with actual payment processing\n        print(f\"\ud83d\udcb0 Processing earnest money: ${amount:,}\")\n        print(f\"\ud83d\udccb Payment details: {payment_info}\")\n\n        return True\n\n    except RezenError as e:\n        print(f\"\u274c Payment processing failed: {e}\")\n        return False\n</code></pre>"},{"location":"guides/transactions/#money-transfers","title":"Money Transfers","text":"<pre><code>def track_money_transfers(transaction_id: str):\n    \"\"\"Track all money transfers for the transaction.\"\"\"\n    client = RezenClient()\n\n    try:\n        transfers = client.transactions.get_money_transfers(transaction_id)\n\n        print(\"\ud83d\udcb8 Money Transfers:\")\n        for transfer in transfers:\n            print(f\"  - ${transfer.get('amount', 0):,} - {transfer.get('status', 'Unknown')}\")\n            print(f\"    Type: {transfer.get('type', 'N/A')}\")\n            print(f\"    Date: {transfer.get('date', 'N/A')}\")\n\n        return transfers\n\n    except RezenError as e:\n        print(f\"\u274c Failed to get money transfers: {e}\")\n        return []\n</code></pre>"},{"location":"guides/transactions/#document-generation","title":"\ud83d\udcc4 Document Generation","text":""},{"location":"guides/transactions/#transaction-summary","title":"Transaction Summary","text":"<pre><code>def generate_transaction_summary(transaction_id: str):\n    \"\"\"Generate and save transaction summary PDF.\"\"\"\n    client = RezenClient()\n\n    try:\n        # Generate PDF\n        pdf_response = client.transactions.get_transaction_summary_pdf(transaction_id)\n\n        # Save to file (example)\n        filename = f\"transaction_summary_{transaction_id}.pdf\"\n        with open(filename, 'wb') as f:\n            f.write(pdf_response.content)\n\n        print(f\"\ud83d\udcc4 Transaction summary saved as: {filename}\")\n        return filename\n\n    except RezenError as e:\n        print(f\"\u274c Failed to generate summary: {e}\")\n        return None\n</code></pre>"},{"location":"guides/transactions/#complete-workflow-example","title":"\ud83c\udfc1 Complete Workflow Example","text":"<pre><code>def complete_transaction_workflow():\n    \"\"\"Execute a complete transaction workflow from start to finish.\"\"\"\n\n    print(\"\ud83d\ude80 Starting complete transaction workflow...\")\n\n    # Phase 1: Create transaction\n    transaction_id = create_advanced_transaction()\n    if not transaction_id:\n        return False\n\n    # Phase 2: Add participants\n    if not add_core_participants(transaction_id):\n        return False\n\n    if not add_service_providers(transaction_id):\n        return False\n\n    # Phase 3: Configure finances\n    if not setup_commission_splits(transaction_id):\n        return False\n\n    if not setup_title_company(transaction_id):\n        return False\n\n    # Phase 4: Submit and manage\n    live_transaction_id = submit_and_manage_transaction(transaction_id)\n    if not live_transaction_id:\n        return False\n\n    # Phase 5: Monitor progress\n    transaction = monitor_transaction_progress(live_transaction_id)\n    if not transaction:\n        return False\n\n    # Phase 6: Process payments\n    process_earnest_money(live_transaction_id, 15000)\n\n    # Phase 7: Generate documents\n    generate_transaction_summary(live_transaction_id)\n\n    print(\"\ud83c\udf89 Transaction workflow completed successfully!\")\n    return True\n\n# Run the complete workflow\nif __name__ == \"__main__\":\n    complete_transaction_workflow()\n</code></pre>"},{"location":"guides/transactions/#best-practices","title":"\ud83d\udee0\ufe0f Best Practices","text":""},{"location":"guides/transactions/#error-handling","title":"Error Handling","text":"<p>Robust Error Handling</p> <pre><code>from rezen.exceptions import ValidationError, NotFoundError\n\ndef safe_transaction_operation(transaction_id: str):\n    try:\n        # Transaction operation\n        result = client.transactions.get_transaction(transaction_id)\n        return {\"success\": True, \"data\": result}\n\n    except ValidationError as e:\n        return {\n            \"success\": False,\n            \"error\": \"Invalid data\",\n            \"details\": e.invalid_fields\n        }\n    except NotFoundError:\n        return {\n            \"success\": False,\n            \"error\": \"Transaction not found\"\n        }\n    except RezenError as e:\n        return {\n            \"success\": False,\n            \"error\": str(e)\n        }\n</code></pre>"},{"location":"guides/transactions/#data-validation","title":"Data Validation","text":"<p>Always Validate Input</p> <pre><code>def validate_transaction_data(data: dict) -&gt; bool:\n    \"\"\"Validate transaction data before submission.\"\"\"\n    required_fields = ['address', 'city', 'state', 'zipCode']\n\n    for field in required_fields:\n        if not data.get(field):\n            print(f\"\u274c Missing required field: {field}\")\n            return False\n\n    if data.get('purchase_price', 0) &lt;= 0:\n        print(\"\u274c Purchase price must be greater than 0\")\n        return False\n\n    return True\n</code></pre>"},{"location":"guides/transactions/#progress-tracking","title":"Progress Tracking","text":"<p>Track Transaction Progress</p> <pre><code>def track_transaction_milestones(transaction_id: str):\n    \"\"\"Track key milestones in the transaction.\"\"\"\n    milestones = {\n        'CREATED': '\u2705 Transaction created',\n        'PARTICIPANTS_ADDED': '\u2705 All participants added',\n        'UNDER_CONTRACT': '\u2705 Under contract',\n        'INSPECTION_COMPLETE': '\u2705 Inspection completed',\n        'APPRAISAL_COMPLETE': '\u2705 Appraisal completed',\n        'FINANCING_APPROVED': '\u2705 Financing approved',\n        'CLOSING_SCHEDULED': '\u2705 Closing scheduled',\n        'CLOSED': '\ud83c\udf89 Transaction closed'\n    }\n\n    transaction = client.transactions.get_transaction(transaction_id)\n    current_status = transaction.get('status')\n\n    print(f\"Current Status: {milestones.get(current_status, current_status)}\")\n</code></pre>"},{"location":"guides/transactions/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Transaction Builder API - Detailed API reference</li> <li>Transactions API - Live transaction management</li> <li>Error Handling - Comprehensive error handling</li> <li>Examples - More code examples and tutorials</li> </ul>"},{"location":"guides/transactions/#important-field-name-requirements","title":"\u26a0\ufe0f Important Field Name Requirements","text":""},{"location":"guides/transactions/#field-naming-conventions","title":"Field Naming Conventions","text":"<p>The ReZEN API has specific field name requirements that must be followed exactly to avoid validation errors:</p> <p>Critical Field Names</p> Field Type \u274c WRONG \u2705 CORRECT Notes Location Street <code>address</code> <code>street</code> Primary street address ZIP Code <code>zipCode</code>, <code>zip_code</code> <code>zip</code> Must use 'zip' only State <code>state: \"ca\"</code> <code>state: \"CALIFORNIA\"</code> MUST BE ALL CAPS Contact Info First Name <code>first_name</code>, <code>firstname</code> <code>firstName</code> camelCase required Last Name <code>last_name</code>, <code>lastname</code> <code>lastName</code> camelCase required Phone <code>phone</code>, <code>phone_number</code> <code>phoneNumber</code> camelCase required Financial Sale Price <code>salePrice: 500000</code> <code>salePrice: {amount: 500000, currency: \"USD\"}</code> Must be object Earnest Money <code>earnest_money</code> <code>earnestMoney</code> camelCase required Down Payment <code>down_payment</code> <code>downPayment</code> camelCase required Loan Amount <code>loan_amount</code> <code>loanAmount</code> camelCase required Dates Contract Date <code>contract_date</code> <code>contractDate</code> camelCase, format: YYYY-MM-DD Closing Date <code>closing_date</code> <code>closingDate</code> camelCase, format: YYYY-MM-DD Acceptance Date <code>acceptance_date</code> <code>acceptanceDate</code> camelCase, format: YYYY-MM-DD"},{"location":"guides/transactions/#common-gotchas","title":"Common Gotchas","text":"<p>Watch Out For These Issues</p> <ol> <li> <p>State Names Must Be ALL CAPS <pre><code># \u274c WRONG\nlocation_data = {\"state\": \"Utah\"}\nlocation_data = {\"state\": \"ut\"}\nlocation_data = {\"state\": \"UT\"}\n\n# \u2705 CORRECT\nlocation_data = {\"state\": \"UTAH\"}\nlocation_data = {\"state\": \"CALIFORNIA\"}\n</code></pre></p> </li> <li> <p>Sale Price Must Be An Object <pre><code># \u274c WRONG\nprice_data = {\"salePrice\": 500000}\n\n# \u2705 CORRECT\nprice_data = {\n    \"salePrice\": {\n        \"amount\": 500000,\n        \"currency\": \"USD\"\n    }\n}\n</code></pre></p> </li> <li> <p>Co-Agents Can Be Added Anytime <pre><code># Co-agents don't require specific sequence\nco_agent_info = {\n    \"agentId\": \"agent-uuid-here\",\n    \"role\": \"REAL\",  # May display as BUYERS_AGENT/SELLERS_AGENT\n    \"receivesInvoice\": False\n}\n# Can be added immediately after transaction creation\nclient.transaction_builder.add_co_agent(transaction_id, co_agent_info)\n</code></pre></p> </li> <li> <p>Owner Agents Require Specific Sequence <pre><code># Owner agents MUST be added after:\n# 1. Location info\n# 2. Price/date info (with representationType)\n# 3. Buyers/sellers\n# THEN you can add owner agent\n</code></pre></p> </li> </ol>"},{"location":"guides/transactions/#field-validation-helper","title":"Field Validation Helper","text":"<p>Use This Helper Function</p> <pre><code>def validate_and_fix_field_names(data: dict) -&gt; dict:\n    \"\"\"Helper to convert common field name mistakes.\"\"\"\n    field_mappings = {\n        # Location fields\n        \"address\": \"street\",\n        \"zipCode\": \"zip\",\n        \"zip_code\": \"zip\",\n\n        # Name fields\n        \"first_name\": \"firstName\",\n        \"last_name\": \"lastName\",\n        \"phone\": \"phoneNumber\",\n        \"phone_number\": \"phoneNumber\",\n\n        # Financial fields\n        \"earnest_money\": \"earnestMoney\",\n        \"down_payment\": \"downPayment\",\n        \"loan_amount\": \"loanAmount\",\n\n        # Date fields\n        \"contract_date\": \"contractDate\",\n        \"closing_date\": \"closingDate\",\n        \"acceptance_date\": \"acceptanceDate\"\n    }\n\n    # Create new dict with corrected field names\n    corrected = {}\n    for key, value in data.items():\n        new_key = field_mappings.get(key, key)\n        corrected[new_key] = value\n\n    # Fix state to uppercase if present\n    if \"state\" in corrected and isinstance(corrected[\"state\"], str):\n        corrected[\"state\"] = corrected[\"state\"].upper()\n\n    return corrected\n</code></pre>"},{"location":"guides/transactions/#troubleshooting-api-testing-results","title":"\ud83d\udd27 Troubleshooting &amp; API Testing Results","text":"<p>This section documents comprehensive testing results to help you avoid common API errors and understand which methods work reliably.</p>"},{"location":"guides/transactions/#confirmed-working-methods","title":"\u2705 Confirmed Working Methods","text":""},{"location":"guides/transactions/#core-operations","title":"Core Operations","text":"<ul> <li>\u2705 <code>create_transaction_builder()</code> - Always works</li> <li>\u2705 <code>get_transaction_builder()</code> - Always works</li> <li>\u2705 <code>delete_transaction_builder()</code> - Presumed working</li> <li>\u2705 <code>create_listing_builder()</code> - Always works</li> </ul>"},{"location":"guides/transactions/#location-operations","title":"Location Operations","text":"<ul> <li>\u2705 <code>update_location_info()</code> - Only with additional fields</li> <li>Required: <code>county</code>, <code>yearBuilt</code>, <code>mlsNumber</code> (beyond basic address)</li> <li>Field names: <code>street</code> (not <code>address</code>), <code>zip</code> (not <code>zipCode</code>)</li> <li>State format: ALL CAPS (e.g., \"UTAH\", \"CALIFORNIA\")</li> </ul>"},{"location":"guides/transactions/#pricedate-operations","title":"Price/Date Operations","text":"<ul> <li>\u2705 <code>update_price_and_date_info()</code> - Only with both commission objects</li> <li>Required: BOTH <code>listingCommission</code> AND <code>saleCommission</code> </li> <li>salePrice format: <code>{\"amount\": 500000, \"currency\": \"USD\"}</code> (not simple number)</li> </ul>"},{"location":"guides/transactions/#participant-operations","title":"Participant Operations","text":"<ul> <li>\u2705 <code>add_buyer()</code> - Works on transactions with location data</li> <li>\u2705 <code>add_seller()</code> - Works on transactions with location data</li> <li>\u2705 <code>add_co_agent()</code> with specific roles:</li> <li>\u2705 <code>role: \"REAL\"</code> - Always works</li> <li>\u2705 <code>role: \"BUYERS_AGENT\"</code> - Works with location data</li> <li>\u2705 <code>role: \"SELLERS_AGENT\"</code> - Works with location data</li> </ul>"},{"location":"guides/transactions/#methods-that-dont-work","title":"\u274c Methods That Don't Work","text":""},{"location":"guides/transactions/#owner-agent-operations","title":"Owner Agent Operations","text":"<ul> <li>\u274c <code>update_owner_agent_info()</code> - Requires valid <code>officeId</code> and <code>teamId</code></li> <li>Error: \"Missing required field 'officeId'\" or \"Missing required field 'teamId'\"</li> <li>Sequence: Must follow exact order (location \u2192 price \u2192 participants \u2192 owner)</li> </ul>"},{"location":"guides/transactions/#limited-co-agent-roles","title":"Limited Co-Agent Roles","text":"<ul> <li>\u274c <code>add_co_agent()</code> with <code>role: \"LISTING_AGENT\"</code> - Always fails</li> </ul>"},{"location":"guides/transactions/#service-provider-operations","title":"Service Provider Operations","text":"<ul> <li>\u274c Most service provider methods - Dependencies not fully tested</li> </ul>"},{"location":"guides/transactions/#common-error-patterns","title":"\u26a0\ufe0f Common Error Patterns","text":""},{"location":"guides/transactions/#bad-request-invalid-request","title":"\"Bad request: Invalid request\"","text":"<p>This generic error typically means:</p> <ol> <li>Missing additional fields in location updates</li> <li>Missing commission objects in price/date updates  </li> <li>Invalid co-agent role (e.g., \"LISTING_AGENT\")</li> <li>Wrong sequence for owner agent operations</li> </ol>"},{"location":"guides/transactions/#missing-required-field-x","title":"\"Missing required field 'X'\"","text":"<ul> <li>officeId/teamId: Owner agent operations need valid UUIDs</li> <li>Commission fields: Price/date updates need both commission objects</li> </ul>"},{"location":"guides/transactions/#invalidfieldnameerror","title":"InvalidFieldNameError","text":"<ul> <li>Using <code>address</code> instead of <code>street</code></li> <li>Using <code>zipCode</code> instead of <code>zip</code></li> <li>Using snake_case instead of camelCase</li> </ul>"},{"location":"guides/transactions/#invalidfieldvalueerror","title":"InvalidFieldValueError","text":"<ul> <li>State not in ALL CAPS</li> <li>salePrice as number instead of object</li> <li>Invalid representationType values</li> </ul>"},{"location":"guides/transactions/#debugging-checklist","title":"\ud83d\udee0\ufe0f Debugging Checklist","text":"<p>When transaction operations fail, check:</p> <p>For Location Updates: - [ ] Included <code>county</code> field - [ ] Included <code>yearBuilt</code> field (number) - [ ] Included <code>mlsNumber</code> field - [ ] Used <code>street</code> not <code>address</code> - [ ] Used <code>zip</code> not <code>zipCode</code> - [ ] State is ALL CAPS</p> <p>For Price/Date Updates: - [ ] Included <code>listingCommission</code> object - [ ] Included <code>saleCommission</code> object - [ ] salePrice is object: <code>{\"amount\": X, \"currency\": \"USD\"}</code> - [ ] Used camelCase for date fields</p> <p>For Co-Agents: - [ ] Using working role: \"REAL\", \"BUYERS_AGENT\", or \"SELLERS_AGENT\" - [ ] Not using \"LISTING_AGENT\" role - [ ] Valid agent UUID</p> <p>For Owner Agents: - [ ] Transaction has location data - [ ] Transaction has price/date data - [ ] Transaction has participants (buyer/seller) - [ ] Have valid <code>officeId</code> UUID - [ ] Have valid <code>teamId</code> UUID - [ ] Role matches representationType</p>"},{"location":"guides/transactions/#tested-working-sequence","title":"\ud83d\udccb Tested Working Sequence","text":"<p>This sequence is confirmed to work for creating complete transactions:</p> <pre><code># 1. Create transaction\ntransaction_id = client.transaction_builder.create_transaction_builder()\n\n# 2. Add location (with additional required fields)\nlocation_data = {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Salt Lake City\",\n    \"state\": \"UTAH\",\n    \"zip\": \"84101\",\n    \"county\": \"Salt Lake\",      # REQUIRED\n    \"yearBuilt\": 2020,         # REQUIRED\n    \"mlsNumber\": \"MLS123456\"   # REQUIRED\n}\nclient.transaction_builder.update_location_info(transaction_id, location_data)\n\n# 3. Add price/date (with both commission objects)\nprice_data = {\n    \"dealType\": \"COMPENSATING\",\n    \"propertyType\": \"RESIDENTIAL\",\n    \"salePrice\": {\"amount\": 550000, \"currency\": \"USD\"},\n    \"representationType\": \"BUYER\",\n    \"listingCommission\": {     # REQUIRED\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    },\n    \"saleCommission\": {        # REQUIRED\n        \"commissionPercent\": 3.0,\n        \"percentEnabled\": True,\n        \"negativeOrEmpty\": False\n    }\n}\nclient.transaction_builder.update_price_and_date_info(transaction_id, price_data)\n\n# 4. Add participants\nclient.transaction_builder.add_buyer(transaction_id, {\n    \"firstName\": \"John\",\n    \"lastName\": \"Buyer\",\n    \"email\": \"john@example.com\",\n    \"phoneNumber\": \"(801) 555-1234\"\n})\n\nclient.transaction_builder.add_seller(transaction_id, {\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Seller\", \n    \"email\": \"jane@example.com\",\n    \"phoneNumber\": \"(801) 555-5678\"\n})\n\n# 5. Add co-agents (working roles)\nclient.transaction_builder.add_co_agent(transaction_id, {\n    \"agentId\": \"bd465129-b224-43e3-b92f-524ea5f53783\",\n    \"role\": \"REAL\",\n    \"receivesInvoice\": False\n})\n\n# Result: Complete working transaction with all components\n</code></pre> <p>This sequence has been tested and confirmed to work without errors.</p>"},{"location":"guides/transactions/#handling-multiple-teams-offices","title":"\ud83c\udfe2 Handling Multiple Teams &amp; Offices","text":"<p>Real-world scenario: Many agents belong to multiple teams and offices. When creating transactions, you need to specify which team/office to use for the transaction.</p>"},{"location":"guides/transactions/#discovering-available-teams_1","title":"\ud83d\udd0d Discovering Available Teams","text":"<p>Use <code>get_user_teams_and_offices()</code> to see all available options:</p> <pre><code>from typing import Dict, Any\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\n# Get user's available teams and offices\nteams_info: Dict[str, Any] = client.transaction_builder.get_user_teams_and_offices()\n\nprint(f\"Total teams: {teams_info['totalTeams']}\")\nprint(f\"Has multiple teams: {teams_info['hasMultipleTeams']}\")\nprint(f\"Default team: {teams_info['defaultTeam']}\")\n\n# List all available teams\nfor team in teams_info['teams']:\n    print(f\"Team: {team['teamName']}\")\n    print(f\"  ID: {team['teamId']}\")\n    print(f\"  Type: {team['teamType']}\")\n    print(f\"  Roles: {team['roles']}\")\n</code></pre>"},{"location":"guides/transactions/#owner-agent-team-selection","title":"\ud83c\udfaf Owner Agent Team Selection","text":"<p>You have 3 options for setting owner agents:</p> Option 1: Automatic (Default Team)Option 2: Explicit Team SelectionOption 3: Interactive Selection <p>Best for: Users with single team or when default is acceptable</p> <pre><code># Uses default team automatically\nresult = client.transaction_builder.set_current_user_as_owner_agent(\n    builder_id,\n    role=\"BUYERS_AGENT\"\n)\n\n# \u26a0\ufe0f Warning will be shown if you have multiple teams\n</code></pre> <p>Best for: Users with multiple teams who need control</p> <pre><code># First, discover available teams\nteams = client.transaction_builder.get_user_teams_and_offices()\n\nif teams[\"hasMultipleTeams\"]:\n    # Choose specific team (e.g., first team)\n    selected_team_id = teams[\"teams\"][0][\"teamId\"]\n\n    # Set owner agent with explicit team\n    result = client.transaction_builder.set_current_user_as_owner_agent_with_team(\n        builder_id,\n        role=\"BUYERS_AGENT\",\n        team_id=selected_team_id\n    )\n\n    print(f\"\u2705 Used team: {teams['teams'][0]['teamName']}\")\nelse:\n    # Use convenience method for single team\n    result = client.transaction_builder.set_current_user_as_owner_agent(\n        builder_id, role=\"BUYERS_AGENT\"\n    )\n</code></pre> <p>Best for: Applications with user interface</p> <pre><code>def choose_team_interactively() -&gt; str:\n    teams = client.transaction_builder.get_user_teams_and_offices()\n\n    if not teams[\"hasMultipleTeams\"]:\n        return teams[\"defaultTeam\"]\n\n    print(\"Available teams:\")\n    for i, team in enumerate(teams[\"teams\"]):\n        print(f\"  {i+1}. {team['teamName']} ({team['teamType']})\")\n\n    while True:\n        try:\n            choice = int(input(\"Select team (1-{}): \".format(len(teams[\"teams\"]))))\n            if 1 &lt;= choice &lt;= len(teams[\"teams\"]):\n                return teams[\"teams\"][choice-1][\"teamId\"]\n        except ValueError:\n            pass\n        print(\"Invalid choice. Try again.\")\n\n# Use interactive selection\nselected_team = choose_team_interactively()\nresult = client.transaction_builder.set_current_user_as_owner_agent_with_team(\n    builder_id,\n    role=\"BUYERS_AGENT\", \n    team_id=selected_team\n)\n</code></pre>"},{"location":"guides/transactions/#error-handling_1","title":"\ud83d\udee1\ufe0f Error Handling","text":"<p>Handle team-related errors gracefully:</p> <pre><code>from rezen.exceptions import ValidationError\n\ntry:\n    teams = client.transaction_builder.get_user_teams_and_offices()\n\n    if teams[\"hasMultipleTeams\"]:\n        # User choice logic here...\n        selected_team = \"user-selected-team-id\"\n\n        result = client.transaction_builder.set_current_user_as_owner_agent_with_team(\n            builder_id,\n            role=\"BUYERS_AGENT\",\n            team_id=selected_team\n        )\n    else:\n        result = client.transaction_builder.set_current_user_as_owner_agent(\n            builder_id, role=\"BUYERS_AGENT\"\n        )\n\nexcept ValidationError as e:\n    if \"not a member of team\" in str(e):\n        print(\"\u274c Invalid team selected. Please choose from available teams.\")\n    elif \"must belong to at least one team\" in str(e):\n        print(\"\u274c User has no team memberships. Contact administrator.\")\n    else:\n        print(f\"\u274c Validation error: {e}\")\n</code></pre>"},{"location":"guides/transactions/#best-practices_1","title":"\ud83d\udca1 Best Practices","text":"<p>Team Selection Guidelines</p> <ol> <li>Always check for multiple teams before setting owner agents</li> <li>Provide clear team information to users (team name, type, roles)</li> <li>Use default team logic for convenience when appropriate  </li> <li>Handle team validation errors gracefully in production</li> <li>Consider team types - some teams may be for specific purposes</li> </ol> <p>Office ID Requirements</p> <p>Current implementation requires users to have an <code>officeId</code> in their profile. If team-specific offices become available in the API, this may need enhancement.</p>"},{"location":"guides/troubleshooting/","title":"Troubleshooting Guide","text":"<p>Common issues, solutions, and debugging techniques for the ReZEN Python API client.</p>"},{"location":"guides/troubleshooting/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Authentication Issues</li> <li>Connection Problems</li> <li>API Errors</li> <li>Data Validation Issues</li> <li>Performance Problems</li> <li>Common Error Messages</li> <li>Debugging Techniques</li> <li>Environment Issues</li> </ul>"},{"location":"guides/troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"guides/troubleshooting/#err_auth_001-invalid-api-key","title":"ERR_AUTH_001: Invalid API Key","text":"<p>Message: <code>AuthenticationError: Invalid API key</code></p> <p>Symptoms: - 401 Unauthorized responses - \"Authentication failed\" messages - API key validation failures</p> <p>Cause: The provided API key is either malformed, expired, or invalid.</p> <p>Resolution:</p> <pre><code>import os\nfrom rezen import RezenClient\nfrom rezen.exceptions import AuthenticationError\n\n# 1. Verify API key is correct\napi_key = os.getenv('REZEN_API_KEY')\nprint(f\"API Key (first 10 chars): {api_key[:10] if api_key else 'NOT SET'}\")\n\n# 2. Test with explicit API key\ntry:\n    client = RezenClient(api_key=\"your_actual_api_key_here\")\n    teams = client.teams.search_teams(page_size=1)\n    print(\"\u2705 API key is valid\")\nexcept AuthenticationError as e:\n    print(f\"\u274c API key invalid: {e}\")\n</code></pre> <p>Common Causes: - API key not set in environment variables - Wrong API key (typos, old keys) - API key revoked or expired - Using staging key with production API or vice versa</p> <p>See Also: Authentication Setup Guide</p>"},{"location":"guides/troubleshooting/#err_auth_002-environment-variable-not-found","title":"ERR_AUTH_002: Environment Variable Not Found","text":"<p>Message: <code>REZEN_API_KEY environment variable not set</code></p> <p>Cause: The required environment variable for API authentication is not configured.</p> <p>Resolution:</p> <pre><code># Check if environment variable is set\necho $REZEN_API_KEY\n\n# Set environment variable (Linux/macOS)\nexport REZEN_API_KEY=\"your_api_key_here\"\n\n# Set environment variable (Windows)\nset REZEN_API_KEY=your_api_key_here\n</code></pre> <p>Python verification: <pre><code>import os\n\napi_key = os.getenv('REZEN_API_KEY')\nif not api_key:\n    print(\"\u274c Environment variable not set\")\n    print(\"Set with: export REZEN_API_KEY='your_key'\")\nelse:\n    print(f\"\u2705 Found API key: {api_key[:10]}...\")\n</code></pre></p>"},{"location":"guides/troubleshooting/#connection-problems","title":"Connection Problems","text":""},{"location":"guides/troubleshooting/#network-timeouts","title":"Network Timeouts","text":"<p>Symptoms: - <code>NetworkError: Connection timeout</code> - Requests hanging indefinitely - Intermittent connection failures</p> <p>Solutions:</p> <pre><code>from rezen import RezenClient\nfrom rezen.base_client import BaseClient\nimport time\n\n# 1. Increase timeout\nBaseClient.DEFAULT_TIMEOUT = 60  # 60 seconds\n\n# 2. Implement retry logic\ndef retry_request(func, max_retries=3, delay=1):\n    for attempt in range(max_retries):\n        try:\n            return func()\n        except Exception as e:\n            if attempt &lt; max_retries - 1:\n                print(f\"Attempt {attempt + 1} failed: {e}\")\n                time.sleep(delay * (2 ** attempt))  # Exponential backoff\n                continue\n            raise\n\n# Usage\nclient = RezenClient()\nteams = retry_request(lambda: client.teams.search_teams(page_size=10))\n</code></pre>"},{"location":"guides/troubleshooting/#ssl-certificate-issues","title":"SSL Certificate Issues","text":"<p>Error: <code>SSL: CERTIFICATE_VERIFY_FAILED</code></p> <p>Solutions:</p> <pre><code>import ssl\nimport requests\nfrom urllib3.exceptions import InsecureRequestWarning\n\n# WARNING: Only for development/testing\n# Disable SSL verification (NOT recommended for production)\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\n# Or update certificates\n# pip install --upgrade certifi\n</code></pre> <p>Better solution - Update certificates: <pre><code># Update certificates\npip install --upgrade certifi\n\n# macOS specific\n/Applications/Python\\ 3.x/Install\\ Certificates.command\n</code></pre></p>"},{"location":"guides/troubleshooting/#proxy-issues","title":"Proxy Issues","text":"<p>Error: Connection fails behind corporate firewall</p> <p>Solutions:</p> <pre><code>import os\nfrom rezen import RezenClient\n\n# Set proxy environment variables\nos.environ['HTTP_PROXY'] = 'http://proxy.company.com:8080'\nos.environ['HTTPS_PROXY'] = 'http://proxy.company.com:8080'\n\n# Or configure requests session directly\nimport requests\nfrom rezen.base_client import BaseClient\n\nclass ProxyBaseClient(BaseClient):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.session.proxies = {\n            'http': 'http://proxy.company.com:8080',\n            'https': 'http://proxy.company.com:8080'\n        }\n\n# Use custom client\nclient = RezenClient()\nclient.teams._base_client = ProxyBaseClient()\n</code></pre>"},{"location":"guides/troubleshooting/#api-errors","title":"API Errors","text":""},{"location":"guides/troubleshooting/#err_api_001-rate-limit-exceeded","title":"ERR_API_001: Rate Limit Exceeded","text":"<p>Message: <code>RateLimitError: Rate limit exceeded</code></p> <p>Cause: API requests are being made too frequently, exceeding the allowed rate limit.</p> <p>Resolution:</p> <pre><code>from rezen.exceptions import RateLimitError\nimport time\nimport random\n\ndef rate_limited_request(func, *args, **kwargs):\n    max_retries = 5\n    base_delay = 1\n\n    for attempt in range(max_retries):\n        try:\n            return func(*args, **kwargs)\n        except RateLimitError as e:\n            if attempt &lt; max_retries - 1:\n                # Exponential backoff with jitter\n                delay = base_delay * (2 ** attempt) + random.uniform(0, 1)\n                print(f\"Rate limited. Waiting {delay:.2f}s...\")\n                time.sleep(delay)\n                continue\n            raise e\n\n# Usage\nclient = RezenClient()\nteams = rate_limited_request(client.teams.search_teams, status=\"ACTIVE\")\n</code></pre>"},{"location":"guides/troubleshooting/#server-errors-5xx","title":"Server Errors (5xx)","text":"<p>Error: <code>ServerError: Internal server error</code></p> <p>Solutions:</p> <pre><code>from rezen.exceptions import ServerError\nimport time\n\ndef handle_server_errors(func, *args, **kwargs):\n    max_retries = 3\n\n    for attempt in range(max_retries):\n        try:\n            return func(*args, **kwargs)\n        except ServerError as e:\n            if attempt &lt; max_retries - 1:\n                wait_time = 2 ** attempt  # 1, 2, 4 seconds\n                print(f\"Server error. Retrying in {wait_time}s...\")\n                time.sleep(wait_time)\n                continue\n\n            # Log the error for investigation\n            print(f\"Server error after {max_retries} attempts: {e}\")\n            raise\n\n# Usage\nresult = handle_server_errors(\n    client.transaction_builder.create_transaction_builder\n)\n</code></pre>"},{"location":"guides/troubleshooting/#resource-not-found","title":"Resource Not Found","text":"<p>Error: <code>NotFoundError: Resource not found</code></p> <p>Common Causes &amp; Solutions:</p> <pre><code>from rezen.exceptions import NotFoundError\n\n# 1. Verify resource ID exists\ndef safe_get_transaction(client, transaction_id):\n    try:\n        return client.transactions.get_transaction(transaction_id)\n    except NotFoundError:\n        print(f\"\u274c Transaction {transaction_id} not found\")\n\n        # Try to find similar transactions\n        try:\n            builders = client.transaction_builder.get_transaction_builders(\n                limit=10, from_offset=0, yenta_id=\"your_user_id\"\n            )\n            print(f\"Available transaction builders: {len(builders)}\")\n            for builder in builders[:3]:\n                print(f\"  - {builder.get('id')}\")\n        except Exception as e:\n            print(f\"Could not list transactions: {e}\")\n        return None\n\n# 2. Verify team ID exists\ndef safe_get_team(client, team_id):\n    try:\n        return client.teams.get_team_without_agents(team_id)\n    except NotFoundError:\n        print(f\"\u274c Team {team_id} not found\")\n\n        # Search for similar teams\n        teams = client.teams.search_teams(page_size=5)\n        print(f\"Available teams: {len(teams)}\")\n        for team in teams:\n            print(f\"  - {team.get('name')} ({team.get('id')})\")\n        return None\n</code></pre>"},{"location":"guides/troubleshooting/#data-validation-issues","title":"Data Validation Issues","text":""},{"location":"guides/troubleshooting/#invalid-request-data","title":"Invalid Request Data","text":"<p>Error: <code>ValidationError: Invalid request parameters</code></p> <p>Common Issues &amp; Fixes:</p> <pre><code>from rezen.exceptions import ValidationError\n\n# 1. Date format issues\ndef fix_date_formats():\n    # \u274c Wrong formats\n    bad_dates = [\n        \"2024/01/15\",  # Should use hyphens\n        \"01-15-2024\",  # Wrong order\n        \"2024-1-5\",    # Missing zero padding\n    ]\n\n    # \u2705 Correct format: YYYY-MM-DD\n    good_date = \"2024-01-15\"\n\n    return good_date\n\n# 2. Missing required fields\ndef validate_buyer_data(buyer_data):\n    required_fields = ['first_name', 'last_name', 'email']\n\n    missing_fields = []\n    for field in required_fields:\n        if not buyer_data.get(field):\n            missing_fields.append(field)\n\n    if missing_fields:\n        raise ValidationError(f\"Missing required fields: {missing_fields}\")\n\n    # Email validation\n    email = buyer_data.get('email')\n    if email and '@' not in email:\n        raise ValidationError(f\"Invalid email format: {email}\")\n\n    return True\n\n# Usage\nbuyer_data = {\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"email\": \"john.doe@email.com\"\n}\n\ntry:\n    validate_buyer_data(buyer_data)\n    client.transaction_builder.add_buyer(\"tx-id\", buyer_data)\nexcept ValidationError as e:\n    print(f\"Validation failed: {e}\")\n</code></pre>"},{"location":"guides/troubleshooting/#type-conversion-issues","title":"Type Conversion Issues","text":"<p>Error: <code>TypeError: Object of type datetime is not JSON serializable</code></p> <p>Solutions:</p> <pre><code>from datetime import datetime, date\nimport json\n\n# 1. Convert dates to strings\ndef prepare_date_data(data):\n    \"\"\"Convert datetime objects to ISO format strings.\"\"\"\n    if isinstance(data, dict):\n        return {k: prepare_date_data(v) for k, v in data.items()}\n    elif isinstance(data, list):\n        return [prepare_date_data(item) for item in data]\n    elif isinstance(data, (datetime, date)):\n        return data.isoformat()\n    return data\n\n# Usage\ntransaction_data = {\n    \"closing_date\": datetime(2024, 6, 15),\n    \"contract_date\": date(2024, 5, 1)\n}\n\n# Convert before sending\nclean_data = prepare_date_data(transaction_data)\n# Now: {\"closing_date\": \"2024-06-15T00:00:00\", \"contract_date\": \"2024-05-01\"}\n</code></pre>"},{"location":"guides/troubleshooting/#performance-problems","title":"Performance Problems","text":""},{"location":"guides/troubleshooting/#slow-response-times","title":"Slow Response Times","text":"<p>Symptoms: - API calls taking &gt; 30 seconds - Timeouts on large data requests - Memory usage growing continuously</p> <p>Solutions:</p> <pre><code>import time\nfrom contextlib import contextmanager\n\n@contextmanager\ndef timer(description):\n    start = time.time()\n    yield\n    elapsed = time.time() - start\n    print(f\"{description}: {elapsed:.2f}s\")\n\n# 1. Paginate large requests\ndef get_all_teams_paginated(client, page_size=50):\n    all_teams = []\n    page_number = 0\n\n    while True:\n        with timer(f\"Page {page_number}\"):\n            teams = client.teams.search_teams(\n                page_number=page_number,\n                page_size=page_size\n            )\n\n        if not teams:\n            break\n\n        all_teams.extend(teams)\n        page_number += 1\n\n        # Add small delay to avoid rate limiting\n        time.sleep(0.1)\n\n    return all_teams\n\n# 2. Use smaller page sizes for initial testing\ndef debug_slow_request(client):\n    # Start with small request\n    with timer(\"Small request (5 items)\"):\n        teams = client.teams.search_teams(page_size=5)\n\n    # Gradually increase if needed\n    with timer(\"Medium request (50 items)\"):\n        teams = client.teams.search_teams(page_size=50)\n</code></pre>"},{"location":"guides/troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Symptoms: - <code>MemoryError</code> on large datasets - Python process memory growing continuously</p> <p>Solutions:</p> <pre><code>import gc\nfrom typing import Iterator, Dict, Any\n\ndef process_teams_in_batches(client, batch_size=100) -&gt; Iterator[Dict[str, Any]]:\n    \"\"\"Process teams in batches to avoid memory issues.\"\"\"\n    page_number = 0\n\n    while True:\n        try:\n            teams = client.teams.search_teams(\n                page_number=page_number,\n                page_size=batch_size\n            )\n\n            if not teams:\n                break\n\n            # Yield each team individually\n            for team in teams:\n                yield team\n\n            # Clean up\n            del teams\n            gc.collect()\n\n            page_number += 1\n\n        except Exception as e:\n            print(f\"Error processing page {page_number}: {e}\")\n            break\n\n# Usage\nprocessed_count = 0\nfor team in process_teams_in_batches(client):\n    # Process one team at a time\n    print(f\"Processing team: {team.get('name')}\")\n    processed_count += 1\n\n    if processed_count % 100 == 0:\n        print(f\"Processed {processed_count} teams\")\n</code></pre>"},{"location":"guides/troubleshooting/#common-error-messages","title":"Common Error Messages","text":""},{"location":"guides/troubleshooting/#transaction-not-found","title":"\"Transaction not found\"","text":"<p>Possible Causes: 1. Transaction ID is wrong 2. Transaction was deleted 3. Using staging vs production IDs 4. Transaction hasn't been created yet</p> <p>Debug Steps: <pre><code>def debug_transaction_not_found(client, transaction_id):\n    print(f\"Debugging transaction: {transaction_id}\")\n\n    # 1. Check transaction ID format\n    if not transaction_id or len(transaction_id) &lt; 10:\n        print(\"\u274c Transaction ID seems too short\")\n        return\n\n    # 2. List available transactions\n    try:\n        builders = client.transaction_builder.get_transaction_builders(\n            limit=10, from_offset=0, yenta_id=\"your-user-id\"\n        )\n        print(f\"Available transaction builders: {len(builders)}\")\n\n        for builder in builders:\n            builder_id = builder.get('id')\n            if builder_id and transaction_id in builder_id:\n                print(f\"\u2705 Found similar ID: {builder_id}\")\n\n    except Exception as e:\n        print(f\"Error listing transactions: {e}\")\n</code></pre></p>"},{"location":"guides/troubleshooting/#invalid-enum-value","title":"\"Invalid enum value\"","text":"<p>Error: <code>ValueError: 'INVALID_STATUS' is not a valid TeamStatus</code></p> <p>Solution: <pre><code>from rezen import TeamStatus, AgentStatus\n\n# \u274c Wrong - using string\nteams = client.teams.search_teams(status=\"ACTIVE\")\n\n# \u2705 Correct - using enum\nteams = client.teams.search_teams(status=TeamStatus.ACTIVE)\n\n# \u274c Wrong - typo in enum\nagents = client.agents.search_active_agents(status=\"ACTIV\")\n\n# \u2705 Correct - proper enum\nagents = client.agents.search_active_agents(status=AgentStatus.ACTIVE)\n\n# Check available enum values\nprint(\"Available team statuses:\", [s.value for s in TeamStatus])\nprint(\"Available agent statuses:\", [s.value for s in AgentStatus])\n</code></pre></p>"},{"location":"guides/troubleshooting/#connection-refused","title":"\"Connection refused\"","text":"<p>Possible Causes: 1. Wrong base URL 2. Network connectivity issues 3. Firewall blocking requests 4. Service temporarily down</p> <p>Debug Steps: <pre><code>import requests\n\ndef debug_connection_issues():\n    # 1. Test basic connectivity\n    try:\n        response = requests.get(\"https://httpbin.org/get\", timeout=10)\n        print(\"\u2705 Internet connection working\")\n    except Exception as e:\n        print(f\"\u274c Internet connection issue: {e}\")\n        return\n\n    # 2. Test ReZEN API endpoints\n    base_urls = [\n        \"https://yenta.therealbrokerage.com/api/v1\",\n        \"https://production-api.rezen.com\"  # Example\n    ]\n\n    for url in base_urls:\n        try:\n            response = requests.get(f\"{url}/health\", timeout=10)\n            print(f\"\u2705 {url} - Status: {response.status_code}\")\n        except Exception as e:\n            print(f\"\u274c {url} - Error: {e}\")\n\ndebug_connection_issues()\n</code></pre></p>"},{"location":"guides/troubleshooting/#debugging-techniques","title":"Debugging Techniques","text":""},{"location":"guides/troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>import logging\nfrom rezen import RezenClient\n\n# Enable debug logging\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\n# Create client\nclient = RezenClient()\n\n# All HTTP requests/responses will now be logged\nteams = client.teams.search_teams(page_size=5)\n</code></pre>"},{"location":"guides/troubleshooting/#requestresponse-inspection","title":"Request/Response Inspection","text":"<pre><code>import json\nfrom rezen.base_client import BaseClient\n\nclass DebugClient(BaseClient):\n    def _request(self, method, endpoint, **kwargs):\n        # Log request details\n        print(f\"\\n\ud83d\udd0d REQUEST: {method} {self.base_url}/{endpoint}\")\n        if kwargs.get('params'):\n            print(f\"   Params: {kwargs['params']}\")\n        if kwargs.get('json_data'):\n            print(f\"   Data: {json.dumps(kwargs['json_data'], indent=2)}\")\n\n        # Make the request\n        response = super()._request(method, endpoint, **kwargs)\n\n        # Log response details\n        print(f\"\u2705 RESPONSE: {len(json.dumps(response)) if response else 0} bytes\")\n\n        return response\n\n# Use debug client\nfrom rezen.teams import TeamsClient\n\ndebug_teams_client = TeamsClient()\ndebug_teams_client.__class__ = type('DebugTeamsClient', (DebugClient,), {})\n\nteams = debug_teams_client.search_teams(status=\"ACTIVE\", page_size=2)\n</code></pre>"},{"location":"guides/troubleshooting/#performance-profiling","title":"Performance Profiling","text":"<pre><code>import cProfile\nimport pstats\nfrom io import StringIO\n\ndef profile_api_calls():\n    # Create a profiler\n    pr = cProfile.Profile()\n\n    # Start profiling\n    pr.enable()\n\n    # Your API calls here\n    client = RezenClient()\n    teams = client.teams.search_teams(page_size=50)\n    agents = client.agents.search_active_agents(page_size=20)\n\n    # Stop profiling\n    pr.disable()\n\n    # Print results\n    s = StringIO()\n    ps = pstats.Stats(pr, stream=s).sort_stats('cumulative')\n    ps.print_stats()\n\n    print(s.getvalue())\n\nprofile_api_calls()\n</code></pre>"},{"location":"guides/troubleshooting/#environment-issues","title":"Environment Issues","text":""},{"location":"guides/troubleshooting/#virtual-environment-problems","title":"Virtual Environment Problems","text":"<p>Symptoms: - <code>ModuleNotFoundError: No module named 'rezen'</code> - Wrong Python version - Package conflicts</p> <p>Solutions:</p> <pre><code># 1. Verify virtual environment is activated\nwhich python\nwhich pip\n\n# 2. Check if rezen is installed\npip list | grep rezen\n\n# 3. Reinstall in clean environment\ndeactivate\nrm -rf venv/\npython -m venv venv\nsource venv/bin/activate  # Linux/macOS\n# or venv\\Scripts\\activate  # Windows\npip install rezen\n\n# 4. Verify installation\npython -c \"import rezen; print(rezen.__version__)\"\n</code></pre>"},{"location":"guides/troubleshooting/#python-version-issues","title":"Python Version Issues","text":"<p>Error: <code>SyntaxError</code> or <code>ImportError</code> related to Python version</p> <p>Check and fix:</p> <pre><code># Check Python version\npython --version\n\n# ReZEN requires Python 3.7+\n# If using older version, upgrade:\n\n# macOS with Homebrew\nbrew install python@3.9\n\n# Ubuntu/Debian\nsudo apt update\nsudo apt install python3.9\n\n# Windows - download from python.org\n\n# Use specific Python version\npython3.9 -m venv venv\nsource venv/bin/activate\npip install rezen\n</code></pre>"},{"location":"guides/troubleshooting/#package-conflicts","title":"Package Conflicts","text":"<p>Error: Version conflicts between dependencies</p> <p>Solutions:</p> <pre><code># 1. Check for conflicts\npip check\n\n# 2. Create clean environment\npip freeze &gt; old_requirements.txt\ndeactivate\nrm -rf venv/\npython -m venv venv\nsource venv/bin/activate\n\n# 3. Install only what you need\npip install rezen\npip install -r your_app_requirements.txt\n\n# 4. If still conflicts, pin versions\npip install 'requests&gt;=2.25.0,&lt;3.0.0'\npip install 'urllib3&gt;=1.26.0,&lt;2.0.0'\n</code></pre>"},{"location":"guides/troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"guides/troubleshooting/#collect-debug-information","title":"Collect Debug Information","text":"<p>When reporting issues, include this information:</p> <pre><code>import sys\nimport platform\nimport requests\nimport rezen\n\ndef collect_debug_info():\n    print(\"=== Debug Information ===\")\n    print(f\"Python version: {sys.version}\")\n    print(f\"Platform: {platform.platform()}\")\n    print(f\"ReZEN version: {rezen.__version__}\")\n    print(f\"Requests version: {requests.__version__}\")\n\n    # Check API connectivity\n    try:\n        client = rezen.RezenClient()\n        teams = client.teams.search_teams(page_size=1)\n        print(\"\u2705 API connectivity: Working\")\n    except Exception as e:\n        print(f\"\u274c API connectivity: {e}\")\n\n    # Check environment\n    import os\n    api_key = os.getenv('REZEN_API_KEY')\n    print(f\"API key set: {'Yes' if api_key else 'No'}\")\n\n    print(\"========================\")\n\ncollect_debug_info()\n</code></pre>"},{"location":"guides/troubleshooting/#support-channels","title":"Support Channels","text":"<ul> <li>Documentation: API Reference</li> <li>Examples: Usage Examples</li> <li>GitHub Issues: Create an issue with debug information</li> <li>Email Support: support@rezen.com</li> </ul> <p>\ud83d\udca1 Pro Tip: Always test with the smallest possible data set first, then scale up. This helps isolate whether issues are related to data size, specific values, or configuration problems.</p>"},{"location":"reference/","title":"Reference","text":"<p>Technical reference materials for the ReZEN Python API client, including data types, error handling, and version history.</p>"},{"location":"reference/#reference-materials","title":"\ud83d\udcda Reference Materials","text":"<ul> <li> <p>\ud83d\udcdd Data Types &amp; Enums</p> <p>Complete reference for all data types, enums, and constants used in the API</p> <p>:octicons-arrow-right-24: Data Types Reference</p> </li> <li> <p>\u26a0\ufe0f Exception Reference</p> <p>Comprehensive error handling guide with all exception types and patterns</p> <p>:octicons-arrow-right-24: Exception Guide</p> </li> <li> <p>\ud83c\udff7\ufe0f Version History</p> <p>Release notes, changelog, and version compatibility information</p> <p>:octicons-arrow-right-24: Changelog</p> </li> </ul>"},{"location":"reference/#quick-lookup","title":"\ud83c\udfaf Quick Lookup","text":""},{"location":"reference/#data-types","title":"Data Types","text":"<p>Essential type information for development:</p> <ul> <li>Enums - All enumerated values (status types, sort directions, etc.)</li> <li>Type Hints - Python type annotations and validation</li> <li>Constants - API constants and field values</li> </ul>"},{"location":"reference/#error-handling","title":"Error Handling","text":"<p>Everything you need for robust error management:</p> <ul> <li>Exception Types - All available exception classes</li> <li>Error Codes - HTTP status codes and meanings</li> <li>Handling Patterns - Best practices for error handling</li> </ul>"},{"location":"reference/#version-information","title":"Version Information","text":"<p>Track changes and compatibility:</p> <ul> <li>Latest Release - Most recent version information</li> <li>Breaking Changes - Important migration notes</li> <li>Version Compatibility - Python version support</li> </ul>"},{"location":"reference/#common-reference-tasks","title":"\ud83d\udd0d Common Reference Tasks","text":""},{"location":"reference/#type-safety-development","title":"Type Safety Development","text":"<p>Building type-safe applications:</p> <pre><code>from typing import List, Optional\nfrom rezen.enums import TeamStatus, SortDirection\n\ndef get_teams(\n    status: TeamStatus = TeamStatus.ACTIVE,\n    limit: Optional[int] = None\n) -&gt; List[dict]:\n    \"\"\"Type-safe team retrieval.\"\"\"\n    # Implementation with full type safety\n</code></pre>"},{"location":"reference/#error-handling-setup","title":"Error Handling Setup","text":"<p>Implementing comprehensive error handling:</p> <pre><code>from rezen.exceptions import (\n    RezenError,\n    AuthenticationError,\n    NotFoundError\n)\n\ntry:\n    # API operations\n    pass\nexcept AuthenticationError:\n    # Handle auth issues\n    pass\nexcept NotFoundError:\n    # Handle missing resources\n    pass\nexcept RezenError as e:\n    # Handle general API errors\n    pass\n</code></pre>"},{"location":"reference/#enum-usage","title":"Enum Usage","text":"<p>Working with API enums:</p> <pre><code>from rezen.enums import TeamStatus, SortDirection\n\n# Type-safe API calls\nteams = client.teams.search_teams(\n    status=TeamStatus.ACTIVE,\n    sort_direction=SortDirection.DESC\n)\n</code></pre>"},{"location":"reference/#detailed-references","title":"\ud83d\udcd6 Detailed References","text":""},{"location":"reference/#data-types-enums-complete-guide","title":"\ud83d\udd24 Data Types &amp; Enums \u2192 Complete Guide","text":"<ul> <li>All enumerated values used in the API</li> <li>Type hints and validation patterns</li> <li>Migration guides for type safety</li> <li>Complete enum reference tables</li> </ul>"},{"location":"reference/#exception-reference-error-handling-guide","title":"\u26a0\ufe0f Exception Reference \u2192 Error Handling Guide","text":"<ul> <li>Exception hierarchy and inheritance</li> <li>Specific error types and when they occur</li> <li>Production-ready error handling patterns</li> <li>Debugging and troubleshooting tools</li> </ul>"},{"location":"reference/#version-history-changelog","title":"\ud83d\udccb Version History \u2192 Changelog","text":"<ul> <li>Release notes for all versions</li> <li>Breaking changes and migration guides</li> <li>Feature additions and improvements</li> <li>Bug fixes and security updates</li> </ul>"},{"location":"reference/#developer-tools","title":"\ud83d\udee0\ufe0f Developer Tools","text":""},{"location":"reference/#type-checking","title":"Type Checking","text":"<p>Use these imports for static type checking:</p> <pre><code>from typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from rezen import RezenClient\n    from rezen.enums import TeamStatus\n</code></pre>"},{"location":"reference/#runtime-validation","title":"Runtime Validation","text":"<p>Validate data at runtime:</p> <pre><code>from rezen.enums import TeamStatus\n\ndef validate_status(status: str) -&gt; bool:\n    try:\n        TeamStatus(status)\n        return True\n    except ValueError:\n        return False\n</code></pre>"},{"location":"reference/#ide-configuration","title":"IDE Configuration","text":"<p>Enable full IDE support by installing type stubs:</p> <pre><code>pip install types-requests\n</code></pre>"},{"location":"reference/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>API Methods - Complete API method reference</li> <li>Getting Started - Setup and authentication</li> <li>Guides &amp; Examples - Practical usage examples</li> <li>Development - Contributing and development setup</li> </ul>"},{"location":"reference/#quick-tips","title":"\ud83d\udca1 Quick Tips","text":"<p>Development Best Practices</p> <ul> <li>Always use enums instead of string literals for API parameters</li> <li>Implement comprehensive error handling for production applications</li> <li>Keep up with the changelog for breaking changes</li> <li>Use type hints for better IDE support and code quality</li> </ul>"},{"location":"reference/changelog/","title":"Changelog","text":"<p>All notable changes to the ReZEN Python client will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"reference/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"reference/changelog/#224-2025-01-27","title":"[2.2.4] - 2025-01-27","text":""},{"location":"reference/changelog/#fixed","title":"Fixed","text":"<ul> <li>Code Quality: Minor formatting improvements to test files</li> </ul>"},{"location":"reference/changelog/#223-2025-01-27","title":"[2.2.3] - 2025-01-27","text":""},{"location":"reference/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Transaction Builder: Fixed <code>add_participant</code> method to correctly send multipart/form-data instead of JSON. The method now properly converts participant data to the files format to ensure compatibility with the API's multipart/form-data requirement.</li> <li>Documentation: Updated <code>add_commission_payer</code> method documentation to include all required fields (firstName, lastName, email, phoneNumber, companyName) that were previously undocumented but necessary for successful API calls.</li> </ul>"},{"location":"reference/changelog/#200-2025-06-08","title":"[2.0.0] - 2025-06-08","text":""},{"location":"reference/changelog/#added","title":"Added","text":"<ul> <li>Users API: Complete implementation for user profile access, team membership, and office details</li> <li>Owner Agent Support: Enhanced Transaction Builder with owner agent functionality requiring proper transaction sequence</li> <li>Keymaker Integration: Access agent IDs through user keymaker endpoint for transaction operations</li> <li>Convenience Methods: <code>set_current_user_as_owner_agent()</code> for simplified owner agent setup</li> <li>Enhanced Error Handling: New exception types for better developer experience:</li> <li><code>InvalidFieldNameError</code>: Catches incorrect field names (e.g., <code>address</code> vs <code>street</code>)</li> <li><code>InvalidFieldValueError</code>: Validates field formats (e.g., uppercase state codes)</li> <li><code>TransactionSequenceError</code>: Identifies when operations are called in wrong order</li> <li>Field Validation: Pre-API validation for common field name and format errors</li> </ul>"},{"location":"reference/changelog/#changed","title":"Changed","text":"<ul> <li>Transaction Builder: Owner agent endpoint now requires specific setup sequence (location \u2192 price/date \u2192 clients \u2192 owner agent)</li> <li>API Coverage: Total endpoints increased from 155 to 158 with the addition of Users API</li> <li>Error Messages: More descriptive error messages with specific field correction suggestions</li> <li>Validation: Methods now validate field names and values before making API calls</li> </ul>"},{"location":"reference/changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Owner Agent: Discovered and documented the required transaction setup sequence for successful owner agent addition</li> <li>Field Name Validation: Methods now prevent common field name mistakes before API calls</li> <li>Commission Endpoints: Multipart/form-data handling for commission payer endpoint</li> </ul>"},{"location":"reference/changelog/#150-2025-06-01","title":"[1.5.0] - 2025-06-01","text":""},{"location":"reference/changelog/#added_1","title":"Added","text":"<ul> <li>Docker Support: Complete containerization for background agents and automated workflows</li> <li>Background Agent Framework: Template classes for creating continuous monitoring agents</li> <li>Sample Agent: Ready-to-use background agent template with logging and graceful shutdown</li> <li>Transaction Monitor: Advanced agent for monitoring transaction status changes with state persistence</li> <li>Docker Compose Configuration: Easy container orchestration with environment variable support</li> <li>Cursor IDE Integration: Configured environment.json for seamless Docker development in Cursor</li> <li>Agent Templates: Extensible base classes for custom background service development</li> <li>Volume Mounting: Live-update support for agent scripts and log file access</li> <li>Security Features: Non-root user containers with proper permission management</li> <li>Comprehensive Documentation: Docker setup guides for both general use and Cursor-specific workflows</li> </ul>"},{"location":"reference/changelog/#infrastructure","title":"Infrastructure","text":"<ul> <li>Dockerfile: Optimized Python 3.11 container with ReZEN client pre-installed</li> <li>docker-compose.yml: Production-ready orchestration with resource limits and health checks</li> <li>.dockerignore: Optimized build context for faster container builds</li> <li>Environment Configuration: Support for API keys, logging levels, and execution intervals</li> <li>Log Management: Persistent logging with host-accessible log files</li> <li>Development Mode: Separate dev container for testing and debugging</li> </ul>"},{"location":"reference/changelog/#documentation","title":"Documentation","text":"<ul> <li>DOCKER_README.md: Comprehensive Docker setup and usage guide</li> <li>Agent Development Guide: Instructions for creating custom background agents</li> <li>Deployment Examples: Production deployment patterns and best practices</li> </ul>"},{"location":"reference/changelog/#114-2025-01-06","title":"[1.1.4] - 2025-01-06","text":""},{"location":"reference/changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Client Base URL Handling: Fixed RezenClient to properly handle custom base URLs for different API services. Teams, Agents, and Directory clients now correctly use their default yenta base URL instead of inheriting custom base URLs from the main client</li> <li>Code Style: Resolved all Black formatting inconsistencies and import sorting issues</li> <li>Unused Imports: Removed unused imports from transaction_builder.py and transactions.py modules</li> <li>Line Length: Fixed long lines in base_client.py for better code readability</li> </ul>"},{"location":"reference/changelog/#technical-improvements","title":"Technical Improvements","text":"<ul> <li>All 266 tests passing with 100% code coverage maintained</li> <li>Improved code formatting consistency across the entire codebase</li> <li>Enhanced type safety with proper import organization</li> </ul>"},{"location":"reference/changelog/#111-2024-01-21","title":"[1.1.1] - 2024-01-21","text":""},{"location":"reference/changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Type Safety: Resolved all mypy type checking errors for stricter type safety</li> <li>Code Quality: Applied black code formatting for consistent code style</li> <li>Directory API: Fixed <code>get_vendor_w9_url</code> method to handle both string and dict API responses</li> <li>Method Signatures: Removed problematic <code>post</code> method override that conflicted with base class signature</li> </ul>"},{"location":"reference/changelog/#technical-improvements_1","title":"Technical Improvements","text":"<ul> <li>All 263 tests passing with 100% code coverage maintained</li> <li>Full mypy compliance with strict type checking enabled</li> <li>Consistent code formatting with black applied across entire codebase</li> </ul>"},{"location":"reference/changelog/#110-2024-01-20","title":"[1.1.0] - 2024-01-20","text":""},{"location":"reference/changelog/#added_2","title":"Added","text":"<ul> <li>Directory API Client: Complete implementation of Directory API with vendor and person management</li> <li>Vendor Management: Create, update, search, archive vendors with W9 file handling</li> <li>Person Management: Create, update, search, link/unlink persons to vendors</li> <li>Directory Search: Unified search across vendors and persons with advanced filtering</li> <li>Role Management: Get permitted roles for directory entries with type filtering</li> <li>Geographic Support: US states, Canadian provinces, and country enums for address data</li> <li>Comprehensive Testing: 41 new tests achieving 100% test coverage across all modules</li> <li>DirectoryClient Export: Added DirectoryClient and related enums to main package exports</li> </ul>"},{"location":"reference/changelog/#changed_1","title":"Changed","text":"<ul> <li>Enhanced API Coverage: Now covers Transaction Builder, Transactions, Teams, Agents, and Directory APIs</li> <li>Improved Package Description: Updated to reflect all supported API modules</li> <li>Better Test Coverage: Achieved 100% test coverage across entire codebase (1,004 statements)</li> </ul>"},{"location":"reference/changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Missing Test Coverage: Added tests for previously uncovered code paths in TeamsClient and RezenClient</li> <li>Type Safety: Improved type hints and error handling in all client modules</li> <li>API Endpoint URLs: Corrected directory API endpoint paths for proper functionality</li> </ul>"},{"location":"reference/changelog/#107-2024-01-15","title":"[1.0.7] - 2024-01-15","text":""},{"location":"reference/changelog/#added_3","title":"Added","text":"<ul> <li>Complete API wrapper implementation for all ReZEN endpoints</li> <li>Transaction Builder API with 60+ endpoints</li> <li>Transactions API with 50+ endpoints</li> <li>Agents API with 35+ endpoints</li> <li>Teams API with 10+ endpoints</li> <li>Comprehensive error handling with custom exceptions</li> <li>100% test coverage with pytest</li> <li>Type hints throughout the codebase</li> <li>Google-style docstrings for all public methods</li> </ul>"},{"location":"reference/changelog/#security","title":"Security","text":"<ul> <li>Secure API key handling with environment variable support</li> </ul>"},{"location":"reference/changelog/#106-2024-01-10","title":"[1.0.6] - 2024-01-10","text":""},{"location":"reference/changelog/#added_4","title":"Added","text":"<ul> <li>Teams API client with search and management capabilities</li> <li>TeamStatus, TeamType, SortDirection, and SortField enums</li> <li>Advanced filtering for team searches</li> <li>Pagination support for large result sets</li> </ul>"},{"location":"reference/changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Date handling in team search filters</li> <li>Enum value validation for team parameters</li> </ul>"},{"location":"reference/changelog/#105-2024-01-05","title":"[1.0.5] - 2024-01-05","text":""},{"location":"reference/changelog/#added_5","title":"Added","text":"<ul> <li>Agents API client with comprehensive search capabilities</li> <li>Agent network hierarchy management</li> <li>AgentStatus, AgentSortDirection, AgentSortField enums</li> <li>Country and StateOrProvince enums for geographic filtering</li> <li>Tax forms and payment details endpoints</li> <li>Network size analysis by tier</li> </ul>"},{"location":"reference/changelog/#changed_2","title":"Changed","text":"<ul> <li>Improved agent search with better filtering options</li> <li>Enhanced pagination handling for large agent datasets</li> </ul>"},{"location":"reference/changelog/#104-2024-01-01","title":"[1.0.4] - 2024-01-01","text":""},{"location":"reference/changelog/#added_6","title":"Added","text":"<ul> <li>Transaction Builder API with complete CRUD operations</li> <li>Support for all transaction participant types</li> <li>Commission and financial management endpoints</li> <li>Property and location information management</li> <li>File upload capabilities for documents</li> </ul>"},{"location":"reference/changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Transaction ID validation in API calls</li> <li>Proper handling of multipart form data uploads</li> </ul>"},{"location":"reference/changelog/#103-2023-12-28","title":"[1.0.3] - 2023-12-28","text":""},{"location":"reference/changelog/#added_7","title":"Added","text":"<ul> <li>Transactions API for live transaction management</li> <li>Participant management for existing transactions</li> <li>Financial operations support</li> <li>Document generation and retrieval</li> </ul>"},{"location":"reference/changelog/#changed_3","title":"Changed","text":"<ul> <li>Improved base client with better session management</li> <li>Enhanced error handling with retry mechanisms</li> </ul>"},{"location":"reference/changelog/#102-2023-12-25","title":"[1.0.2] - 2023-12-25","text":""},{"location":"reference/changelog/#added_8","title":"Added","text":"<ul> <li>Base client architecture with HTTP session management</li> <li>Custom exception hierarchy for different error types</li> <li>Authentication error handling</li> <li>Rate limiting support with backoff strategies</li> </ul>"},{"location":"reference/changelog/#fixed_8","title":"Fixed","text":"<ul> <li>SSL certificate verification issues</li> <li>Timeout handling for slow API responses</li> </ul>"},{"location":"reference/changelog/#101-2023-12-20","title":"[1.0.1] - 2023-12-20","text":""},{"location":"reference/changelog/#added_9","title":"Added","text":"<ul> <li>Initial project structure</li> <li>Basic client configuration</li> <li>Environment variable support for API keys</li> </ul>"},{"location":"reference/changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Package installation issues</li> <li>Import path corrections</li> </ul>"},{"location":"reference/changelog/#100-2023-12-15","title":"[1.0.0] - 2023-12-15","text":""},{"location":"reference/changelog/#added_10","title":"Added","text":"<ul> <li>Initial release of ReZEN Python client</li> <li>Basic API client framework</li> <li>Project setup and configuration</li> </ul>"},{"location":"reference/changelog/#release-notes","title":"Release Notes","text":""},{"location":"reference/changelog/#version-107-complete-api-coverage","title":"Version 1.0.7 - Complete API Coverage","text":"<p>This major release represents the completion of comprehensive API coverage for all ReZEN endpoints. Key highlights:</p> <p>\ud83c\udf89 Complete API Coverage - 150+ endpoints fully implemented and tested - Transaction Builder: 60+ endpoints for complete transaction lifecycle - Transactions: 50+ endpoints for live transaction management - Agents: 35+ endpoints for agent discovery and network management - Teams: 10+ endpoints for team operations</p> <p>\ud83d\udd12 Production Ready - 100% test coverage with over 500 unit and integration tests - Comprehensive error handling with custom exception hierarchy - Type hints throughout for excellent IDE support - Google-style docstrings for all public methods</p> <p>\ud83d\udcda Documentation Excellence - Complete API reference with examples for every endpoint - Real-world usage patterns and best practices - Troubleshooting guide for common issues - Contributing guide for developers</p> <p>\ud83d\ude80 Developer Experience - Intuitive client interface with logical method organization - Enum support for better IDE autocomplete and validation - Flexible authentication options (env vars, direct, .env files) - Comprehensive examples for common workflows</p>"},{"location":"reference/changelog/#version-106-teams-management","title":"Version 1.0.6 - Teams Management","text":"<p>Introduced comprehensive team management capabilities:</p> <ul> <li>Team Discovery: Search teams by name, type, status, and creation date</li> <li>Advanced Filtering: Support for all team types (Normal, Platinum, Group, etc.)</li> <li>Pagination: Efficient handling of large team datasets</li> <li>Type Safety: Complete enum support for all team parameters</li> </ul>"},{"location":"reference/changelog/#version-105-agent-networking","title":"Version 1.0.5 - Agent Networking","text":"<p>Added powerful agent network management:</p> <ul> <li>Agent Search: Find agents by name, location, status with advanced filtering</li> <li>Network Analysis: Explore agent sponsor trees and downline hierarchies</li> <li>Geographic Filtering: Search by country, state, or province</li> <li>Financial Integration: Access tax forms, payment details, and commission plans</li> </ul>"},{"location":"reference/changelog/#version-104-transaction-building","title":"Version 1.0.4 - Transaction Building","text":"<p>Comprehensive transaction builder implementation:</p> <ul> <li>Transaction Lifecycle: Complete support from creation to submission</li> <li>Participant Management: Add buyers, sellers, agents, and service providers</li> <li>Financial Operations: Commission splits, fee management, payment processing</li> <li>Document Handling: File uploads for contracts and supporting documents</li> </ul>"},{"location":"reference/changelog/#version-103-transaction-management","title":"Version 1.0.3 - Transaction Management","text":"<p>Live transaction management capabilities:</p> <ul> <li>Transaction Operations: Full CRUD operations for existing transactions</li> <li>Participant Updates: Modify participant information and roles</li> <li>Financial Tracking: Payment processing and financial reconciliation</li> <li>Reporting: Generate transaction summaries and documentation</li> </ul>"},{"location":"reference/changelog/#upgrade-guide","title":"Upgrade Guide","text":""},{"location":"reference/changelog/#upgrading-to-107","title":"Upgrading to 1.0.7","text":"<p>This release is fully backward compatible. Simply upgrade:</p> <pre><code>pip install --upgrade rezen\n</code></pre> <p>New Features Available: - Enhanced documentation with MkDocs - Additional utility methods for common operations - Improved error messages with more context</p>"},{"location":"reference/changelog/#upgrading-from-106-to-107","title":"Upgrading from 1.0.6 to 1.0.7","text":"<p>No breaking changes. All existing code will continue to work.</p>"},{"location":"reference/changelog/#upgrading-from-105-to-106","title":"Upgrading from 1.0.5 to 1.0.6","text":"<p>No breaking changes. Team API additions are purely additive.</p>"},{"location":"reference/changelog/#upgrading-from-earlier-versions","title":"Upgrading from Earlier Versions","text":"<p>If upgrading from versions prior to 1.0.5, review the API changes in each release:</p> <ol> <li>Agent API Changes (1.0.5): New enum values and search parameters</li> <li>Transaction API Changes (1.0.4): Enhanced participant management</li> <li>Error Handling Changes (1.0.2): New exception hierarchy</li> </ol>"},{"location":"reference/changelog/#contributing","title":"Contributing","text":"<p>Found a bug or want to contribute? See our Contributing Guide for details on:</p> <ul> <li>Setting up the development environment</li> <li>Running tests and ensuring quality</li> <li>Submitting pull requests</li> <li>Reporting issues</li> </ul>"},{"location":"reference/changelog/#support","title":"Support","text":"<ul> <li>Documentation: Full Documentation</li> <li>GitHub Issues: Report Issues</li> <li>Email: support@rezen.com</li> </ul>"},{"location":"reference/data-types/","title":"Data Types &amp; Enums","text":"<p>The ReZEN API client provides comprehensive type definitions and enums for type-safe development and better IDE support.</p>"},{"location":"reference/data-types/#overview","title":"Overview","text":"<p>Type System Benefits</p> <ul> <li>Type Safety: Full type hints for all API methods and data structures</li> <li>IDE Support: Enhanced autocompletion and error detection</li> <li>Validation: Automatic data validation using Pydantic models</li> <li>Documentation: Self-documenting code with clear type definitions</li> </ul>"},{"location":"reference/data-types/#enums","title":"Enums","text":""},{"location":"reference/data-types/#teams-organization","title":"Teams &amp; Organization","text":"\ud83d\udc65 Team Management\ud83d\udd00 Team Sorting"},{"location":"reference/data-types/#teamstatus","title":"TeamStatus","text":"<pre><code>from rezen.enums import TeamStatus\n\n# Available team statuses\nTeamStatus.ACTIVE      # Active teams\nTeamStatus.INACTIVE    # Inactive teams\n</code></pre>"},{"location":"reference/data-types/#teamtype","title":"TeamType","text":"<pre><code>from rezen.enums import TeamType\n\n# Team classification types\nTeamType.PLATINUM      # Platinum level teams\nTeamType.GOLD          # Gold level teams\nTeamType.SILVER        # Silver level teams\nTeamType.BRONZE        # Bronze level teams\n</code></pre>"},{"location":"reference/data-types/#sortdirection","title":"SortDirection","text":"<pre><code>from rezen.enums import SortDirection\n\n# Sorting options\nSortDirection.ASC      # Ascending order\nSortDirection.DESC     # Descending order\n</code></pre>"},{"location":"reference/data-types/#sortfield","title":"SortField","text":"<pre><code>from rezen.enums import SortField\n\n# Available sort fields for teams\nSortField.NAME         # Sort by team name\nSortField.CREATED_AT   # Sort by creation date\nSortField.UPDATED_AT   # Sort by last update\nSortField.STATUS       # Sort by status\n</code></pre> <p>Usage Example</p> <pre><code>from rezen import RezenClient\nfrom rezen.enums import TeamStatus, SortField, SortDirection\n\nclient = RezenClient()\nteams = client.teams.search_teams(\n    status=TeamStatus.ACTIVE,\n    sort_by=[SortField.NAME, SortField.CREATED_AT],\n    sort_direction=SortDirection.ASC\n)\n</code></pre>"},{"location":"reference/data-types/#agents-people","title":"Agents &amp; People","text":"\ud83d\udc54 Agent Management\ud83c\udf0d Geography"},{"location":"reference/data-types/#agentsortdirection","title":"AgentSortDirection","text":"<pre><code>from rezen.enums import AgentSortDirection\n\n# Agent-specific sorting\nAgentSortDirection.ASC     # Ascending order\nAgentSortDirection.DESC    # Descending order\n</code></pre>"},{"location":"reference/data-types/#agentsortfield","title":"AgentSortField","text":"<pre><code>from rezen.enums import AgentSortField\n\n# Agent sort fields\nAgentSortField.FIRST_NAME     # Sort by first name\nAgentSortField.LAST_NAME      # Sort by last name\nAgentSortField.EMAIL          # Sort by email address\nAgentSortField.CREATED_AT     # Sort by creation date\n</code></pre>"},{"location":"reference/data-types/#country","title":"Country","text":"<pre><code>from rezen.enums import Country\n\n# Supported countries\nCountry.UNITED_STATES     # United States\nCountry.CANADA            # Canada\n</code></pre>"},{"location":"reference/data-types/#stateorprovince","title":"StateOrProvince","text":"<pre><code>from rezen.enums import StateOrProvince\n\n# US States\nStateOrProvince.ALABAMA\nStateOrProvince.ALASKA\nStateOrProvince.ARIZONA\nStateOrProvince.CALIFORNIA\nStateOrProvince.TEXAS\n# ... (all US states available)\n\n# Canadian Provinces\nStateOrProvince.ALBERTA\nStateOrProvince.BRITISH_COLUMBIA\nStateOrProvince.ONTARIO\n# ... (all Canadian provinces available)\n</code></pre>"},{"location":"reference/data-types/#transactions-business","title":"Transactions &amp; Business","text":"\ud83e\udd1d Transaction Types"},{"location":"reference/data-types/#participanttype","title":"ParticipantType","text":"<pre><code>from rezen.enums import ParticipantType\n\n# Transaction participant types\nParticipantType.BUYER         # Buyer in transaction\nParticipantType.SELLER        # Seller in transaction\nParticipantType.AGENT         # Real estate agent\nParticipantType.LENDER        # Mortgage lender\nParticipantType.INSPECTOR     # Property inspector\nParticipantType.APPRAISER     # Property appraiser\nParticipantType.TITLE_COMPANY # Title company\n</code></pre>"},{"location":"reference/data-types/#transactionstatus","title":"TransactionStatus","text":"<pre><code>from rezen.enums import TransactionStatus\n\n# Transaction lifecycle states\nTransactionStatus.DRAFT       # Draft transaction\nTransactionStatus.ACTIVE      # Active transaction\nTransactionStatus.PENDING     # Pending transaction\nTransactionStatus.CLOSED      # Closed transaction\nTransactionStatus.CANCELLED   # Cancelled transaction\n</code></pre>"},{"location":"reference/data-types/#auto-generated-api-documentation","title":"Auto-Generated API Documentation","text":"<p>The following sections provide auto-generated documentation from the source code:</p>"},{"location":"reference/data-types/#core-enums-module","title":"Core Enums Module","text":""},{"location":"reference/data-types/#rezen.enums","title":"<code>rezen.enums</code>","text":"<p>Shared enums for the ReZEN API client.</p>"},{"location":"reference/data-types/#rezen.enums.Country","title":"<code>Country</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Country enumeration.</p>"},{"location":"reference/data-types/#rezen.enums.SortDirection","title":"<code>SortDirection</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Sort direction enumeration used across multiple API endpoints.</p>"},{"location":"reference/data-types/#rezen.enums.StateOrProvince","title":"<code>StateOrProvince</code>","text":"<p>               Bases: <code>Enum</code></p> <p>States and provinces enumeration.</p>"},{"location":"reference/data-types/#usage-patterns","title":"Usage Patterns","text":""},{"location":"reference/data-types/#type-safe-development","title":"Type-Safe Development","text":"\ud83d\udee1\ufe0f Type Safety\ud83d\udd27 IDE Integration <pre><code>from typing import List, Optional\nfrom rezen import RezenClient\nfrom rezen.enums import TeamStatus, SortDirection\n\ndef get_active_teams(\n    client: RezenClient,\n    limit: int = 20\n) -&gt; List[dict]:\n    \"\"\"Get active teams with type safety.\"\"\"\n    return client.teams.search_teams(\n        status=TeamStatus.ACTIVE,  # Type-safe enum usage\n        sort_direction=SortDirection.DESC,\n        page_size=limit\n    )\n</code></pre> <pre><code>from rezen.enums import StateOrProvince, Country\n\n# IDE will provide autocompletion for enum values\ndef search_california_agents():\n    return client.agents.search_active_agents(\n        country=[Country.UNITED_STATES],\n        state_or_province=[StateOrProvince.CALIFORNIA]\n    )\n</code></pre>"},{"location":"reference/data-types/#validation-examples","title":"Validation Examples","text":"\u2705 Input Validation\ud83d\udd3d Filtering with Enums <pre><code>from rezen.enums import TeamStatus\n\ndef validate_team_status(status: str) -&gt; bool:\n    \"\"\"Validate team status input.\"\"\"\n    try:\n        TeamStatus(status)\n        return True\n    except ValueError:\n        return False\n\n# Usage\nif validate_team_status(\"ACTIVE\"):\n    print(\"Valid status\")\n</code></pre> <pre><code>from rezen.enums import (\n    TeamStatus,\n    AgentSortField,\n    StateOrProvince\n)\n\n# Advanced filtering with multiple enums\ndef advanced_search_example():\n    client = RezenClient()\n\n    # Search active teams\n    teams = client.teams.search_teams(\n        status=TeamStatus.ACTIVE\n    )\n\n    # Search California agents sorted by name\n    agents = client.agents.search_active_agents(\n        state_or_province=[StateOrProvince.CALIFORNIA],\n        sort_by=[AgentSortField.LAST_NAME]\n    )\n\n    return teams, agents\n</code></pre>"},{"location":"reference/data-types/#best-practices","title":"Best Practices","text":""},{"location":"reference/data-types/#type-hints","title":"\ud83c\udff7\ufe0f Type Hints","text":"<p>Always Use Type Hints</p> <pre><code>from typing import List, Optional\nfrom rezen.enums import TeamStatus\n\ndef process_teams(\n    statuses: List[TeamStatus],\n    limit: Optional[int] = None\n) -&gt; List[dict]:\n    \"\"\"Process teams with proper type hints.\"\"\"\n    # Implementation with type safety\n    pass\n</code></pre>"},{"location":"reference/data-types/#import-patterns","title":"\ud83d\udce5 Import Patterns","text":"<p>Recommended Import Style</p> <pre><code># Specific imports for better performance and clarity\nfrom rezen.enums import (\n    TeamStatus,\n    SortDirection,\n    AgentSortField,\n    StateOrProvince\n)\n\n# Avoid importing the entire module\n# from rezen import enums  # Less preferred\n</code></pre>"},{"location":"reference/data-types/#error-handling","title":"\ud83d\udc1b Error Handling","text":"<p>Enum Validation</p> <pre><code>from rezen.enums import TeamStatus\n\ndef safe_enum_conversion(value: str) -&gt; Optional[TeamStatus]:\n    \"\"\"Safely convert string to enum.\"\"\"\n    try:\n        return TeamStatus(value)\n    except ValueError:\n        print(f\"Invalid team status: {value}\")\n        return None\n</code></pre>"},{"location":"reference/data-types/#complete-enum-reference","title":"Complete Enum Reference","text":""},{"location":"reference/data-types/#quick-reference-table","title":"Quick Reference Table","text":"Category Enum Values Description Teams <code>TeamStatus</code> <code>ACTIVE</code>, <code>INACTIVE</code> Team status states Teams <code>TeamType</code> <code>PLATINUM</code>, <code>GOLD</code>, <code>SILVER</code>, <code>BRONZE</code> Team classification Sorting <code>SortDirection</code> <code>ASC</code>, <code>DESC</code> Sort order direction Teams <code>SortField</code> <code>NAME</code>, <code>CREATED_AT</code>, <code>UPDATED_AT</code>, <code>STATUS</code> Team sort fields Agents <code>AgentSortDirection</code> <code>ASC</code>, <code>DESC</code> Agent sort direction Agents <code>AgentSortField</code> <code>FIRST_NAME</code>, <code>LAST_NAME</code>, <code>EMAIL</code>, <code>CREATED_AT</code> Agent sort fields Geography <code>Country</code> <code>UNITED_STATES</code>, <code>CANADA</code> Supported countries Geography <code>StateOrProvince</code> All US states &amp; Canadian provinces Geographic regions Transactions <code>ParticipantType</code> <code>BUYER</code>, <code>SELLER</code>, <code>AGENT</code>, etc. Transaction participants Transactions <code>TransactionStatus</code> <code>DRAFT</code>, <code>ACTIVE</code>, <code>PENDING</code>, etc. Transaction states"},{"location":"reference/data-types/#migration-guide","title":"Migration Guide","text":"<p>Upgrading from String Values</p> <p>If you're migrating from string-based values to enums:</p> Before (String Values)After (Type-Safe Enums) <pre><code># Old approach with strings\nteams = client.teams.search_teams(\n    status=\"ACTIVE\",\n    sort_direction=\"DESC\"\n)\n</code></pre> <pre><code>from rezen.enums import TeamStatus, SortDirection\n\n# New approach with enums\nteams = client.teams.search_teams(\n    status=TeamStatus.ACTIVE,\n    sort_direction=SortDirection.DESC\n)\n</code></pre>"},{"location":"reference/data-types/#next-steps","title":"Next Steps","text":"<ul> <li> <p>\ud83d\udd27 Transaction Builder</p> <p>Learn about transaction creation and management</p> </li> <li> <p>\u26a0\ufe0f Exceptions</p> <p>Understand error handling and exception types</p> </li> <li> <p>\ud83d\udcc4 Examples</p> <p>See practical usage examples</p> </li> <li> <p>\ud83d\udcd6 API Reference</p> <p>Return to the main API reference</p> </li> </ul>"},{"location":"reference/exceptions/","title":"Exception Reference","text":"<p>Comprehensive error handling guide for the ReZEN Python API client, including exception types, handling patterns, and troubleshooting.</p>"},{"location":"reference/exceptions/#overview","title":"Overview","text":"<p>Error Handling Philosophy</p> <p>The ReZEN client uses a hierarchical exception system that provides:</p> <ul> <li>Specific Error Types: Different exceptions for different error conditions</li> <li>Rich Context: Detailed error messages with request/response information</li> <li>Graceful Degradation: Predictable error handling for robust applications</li> <li>Debug Information: Full context for troubleshooting and logging</li> </ul>"},{"location":"reference/exceptions/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>graph TD\n    A[Exception] --&gt; B[RezenError]\n    B --&gt; C[AuthenticationError]\n    B --&gt; D[ValidationError]\n    B --&gt; E[NotFoundError]\n    B --&gt; F[RateLimitError]\n    B --&gt; G[NetworkError]\n    B --&gt; H[APIError]\n    B --&gt; I[ConfigurationError]\n    H --&gt; J[ServerError]\n    H --&gt; K[ClientError]\n</code></pre>"},{"location":"reference/exceptions/#core-exception-types","title":"Core Exception Types","text":""},{"location":"reference/exceptions/#base-exception","title":"Base Exception","text":"\u26a0\ufe0f RezenError <p>Base exception for all ReZEN API errors</p> <pre><code>from typing import List, Dict, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RezenError\n\nclient: RezenClient = RezenClient()\n\ntry:\n    # Any ReZEN API operation\n    result: List[Dict[str, Any]] = client.teams.search_teams()\nexcept RezenError as e:\n    print(f\"ReZEN API error: {e}\")\n    print(f\"Error details: {e.details}\")\n</code></pre> <p>Attributes: - <code>message</code>: Human-readable error message - <code>status_code</code>: HTTP status code (if applicable) - <code>details</code>: Additional error context - <code>response</code>: Raw HTTP response (if available)</p>"},{"location":"reference/exceptions/#authentication-errors","title":"Authentication Errors","text":"\ud83d\udd10 AuthenticationError <p>API key or authentication issues</p> <pre><code>from typing import List, Dict, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import AuthenticationError\n\ntry:\n    client: RezenClient = RezenClient(api_key=\"invalid_key\")\n    teams: List[Dict[str, Any]] = client.teams.search_teams()\nexcept AuthenticationError as e:\n    print(\"Authentication failed - check your API key\")\n    # Handle authentication error\n    # - Prompt for new API key\n    # - Refresh authentication token\n    # - Log security event\n</code></pre> <p>Common Causes: - Invalid API key - Expired authentication token - Missing API key - Insufficient permissions</p> <p>Security Considerations</p> <p>Never log API keys in error messages. Always sanitize authentication errors before logging.</p>"},{"location":"reference/exceptions/#validation-errors","title":"Validation Errors","text":"\ud83d\udea8 ValidationError <p>Invalid input data or parameters</p> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import ValidationError\n\nclient: RezenClient = RezenClient()\n\ntry:\n    # Invalid email format\n    response: Dict[str, Any] = client.agents.get_agents_by_email(\"invalid-email\")\nexcept ValidationError as e:\n    print(f\"Validation error: {e.message}\")\n    print(f\"Invalid fields: {e.invalid_fields}\")\n    # Handle validation error\n    # - Show user-friendly error message\n    # - Highlight invalid form fields\n    # - Provide correction suggestions\n</code></pre> <p>Extended Attributes: - <code>invalid_fields</code>: List of fields that failed validation - <code>validation_details</code>: Detailed validation error information</p>"},{"location":"reference/exceptions/#resource-errors","title":"Resource Errors","text":"\u2753\ud83d\udcc4 NotFoundError <p>Requested resource does not exist</p> <pre><code>from typing import Dict, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import NotFoundError\n\nclient: RezenClient = RezenClient()\n\ntry:\n    transaction: Dict[str, Any] = client.transactions.get_transaction(\"invalid-id\")\nexcept NotFoundError as e:\n    print(f\"Resource not found: {e.resource_type}\")\n    print(f\"Resource ID: {e.resource_id}\")\n    # Handle not found error\n    # - Show \"not found\" message to user\n    # - Redirect to search page\n    # - Log potential data inconsistency\n</code></pre> <p>Extended Attributes: - <code>resource_type</code>: Type of resource that wasn't found - <code>resource_id</code>: ID of the requested resource</p>"},{"location":"reference/exceptions/#rate-limiting","title":"Rate Limiting","text":"\u23f1\ufe0f RateLimitError <p>API rate limit exceeded</p> <pre><code>import time\nfrom typing import List, Dict, Any\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import RateLimitError\n\nclient: RezenClient = RezenClient()\n\ndef api_call_with_retry() -&gt; List[Dict[str, Any]]:\n    \"\"\"Make API call with rate limit retry logic.\n\n    Returns:\n        List of teams from API\n\n    Raises:\n        RateLimitError: If max retries exceeded\n    \"\"\"\n    max_retries: int = 3\n    for attempt in range(max_retries):\n        try:\n            return client.teams.search_teams()\n        except RateLimitError as e:\n            if attempt == max_retries - 1:\n                raise  # Re-raise if max retries exceeded\n\n            # Wait before retrying\n            wait_time: int = e.retry_after or 60\n            print(f\"Rate limited. Waiting {wait_time} seconds...\")\n            time.sleep(wait_time)\n</code></pre> <p>Extended Attributes: - <code>retry_after</code>: Seconds to wait before retrying - <code>limit_type</code>: Type of rate limit (per minute, per hour, etc.) - <code>current_usage</code>: Current API usage count</p>"},{"location":"reference/exceptions/#network-errors","title":"Network Errors","text":"\ud83d\udce1 NetworkError <p>Connection and network-related issues</p> <pre><code>import logging\nfrom typing import Dict, Any, List\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import NetworkError\n\nclient: RezenClient = RezenClient()\n\ndef robust_api_call() -&gt; Dict[str, Any]:\n    \"\"\"Make robust API call with network error handling.\n\n    Returns:\n        API response or error dictionary\n    \"\"\"\n    try:\n        return client.agents.search_active_agents()\n    except NetworkError as e:\n        logging.error(f\"Network error: {e}\")\n\n        # Handle different network scenarios\n        if \"timeout\" in str(e).lower():\n            # Handle timeout\n            return {\"error\": \"Request timed out. Please try again.\"}\n        elif \"connection\" in str(e).lower():\n            # Handle connection error\n            return {\"error\": \"Unable to connect. Check your internet connection.\"}\n        else:\n            # Handle other network errors\n            return {\"error\": \"Network error occurred. Please try again later.\"}\n</code></pre>"},{"location":"reference/exceptions/#server-errors","title":"Server Errors","text":"\ud83d\udda5\ufe0f ServerError <p>API server-side errors (5xx status codes)</p> <pre><code>import logging\nfrom typing import Dict, Any, Callable, Optional\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import ServerError\n\nclient: RezenClient = RezenClient()\n\ndef handle_server_error() -&gt; Optional[Dict[str, Any]]:\n    \"\"\"Handle server errors with retry logic.\n\n    Returns:\n        API response if successful, None if failed\n    \"\"\"\n    try:\n        return client.transactions.get_transaction(\"tx-123\")\n    except ServerError as e:\n        # Log server error for monitoring\n        logging.error(f\"Server error {e.status_code}: {e.message}\")\n\n        # Implement retry logic for server errors\n        if e.status_code &gt;= 500:\n            # Exponential backoff retry\n            return retry_with_backoff(api_call)\n        else:\n            # Client error, don't retry\n            raise\n\n    return None\n</code></pre>"},{"location":"reference/exceptions/#auto-generated-exception-documentation","title":"Auto-Generated Exception Documentation","text":""},{"location":"reference/exceptions/#exception-classes-module","title":"Exception Classes Module","text":""},{"location":"reference/exceptions/#rezen.exceptions","title":"<code>rezen.exceptions</code>","text":"<p>Custom exceptions for the ReZEN API wrapper.</p>"},{"location":"reference/exceptions/#rezen.exceptions.AuthenticationError","title":"<code>AuthenticationError(message, status_code=None, response_data=None)</code>","text":"<p>               Bases: <code>RezenError</code></p> <p>Raised when authentication fails.</p>"},{"location":"reference/exceptions/#rezen.exceptions.InvalidFieldNameError","title":"<code>InvalidFieldNameError(field_name, correct_name, additional_info='')</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Raised when incorrect field names are used.</p> <p>Initialize invalid field name error.</p> <p>Parameters:</p> Name Type Description Default <code>field_name</code> <code>str</code> <p>The incorrect field name used</p> required <code>correct_name</code> <code>str</code> <p>The correct field name to use</p> required <code>additional_info</code> <code>str</code> <p>Additional context about the field</p> <code>''</code>"},{"location":"reference/exceptions/#rezen.exceptions.InvalidFieldValueError","title":"<code>InvalidFieldValueError(field_name, value, expected_format)</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Raised when field values don't match expected format.</p> <p>Initialize invalid field value error.</p> <p>Parameters:</p> Name Type Description Default <code>field_name</code> <code>str</code> <p>The field with invalid value</p> required <code>value</code> <code>Any</code> <p>The invalid value provided</p> required <code>expected_format</code> <code>str</code> <p>Description of expected format</p> required"},{"location":"reference/exceptions/#rezen.exceptions.NetworkError","title":"<code>NetworkError(message, status_code=None, response_data=None)</code>","text":"<p>               Bases: <code>RezenError</code></p> <p>Raised when network connection fails.</p>"},{"location":"reference/exceptions/#rezen.exceptions.NotFoundError","title":"<code>NotFoundError(message, status_code=None, response_data=None)</code>","text":"<p>               Bases: <code>RezenError</code></p> <p>Raised when a resource is not found.</p>"},{"location":"reference/exceptions/#rezen.exceptions.RateLimitError","title":"<code>RateLimitError(message, status_code=None, response_data=None)</code>","text":"<p>               Bases: <code>RezenError</code></p> <p>Raised when rate limit is exceeded.</p>"},{"location":"reference/exceptions/#rezen.exceptions.RezenError","title":"<code>RezenError(message, status_code=None, response_data=None)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all ReZEN API errors.</p> <p>Initialize ReZEN error.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Error message</p> required <code>status_code</code> <code>Optional[int]</code> <p>HTTP status code if applicable</p> <code>None</code> <code>response_data</code> <code>Optional[Dict[str, Any]]</code> <p>Response data from API if available</p> <code>None</code>"},{"location":"reference/exceptions/#rezen.exceptions.ServerError","title":"<code>ServerError(message, status_code=None, response_data=None)</code>","text":"<p>               Bases: <code>RezenError</code></p> <p>Raised when server returns 5xx error.</p>"},{"location":"reference/exceptions/#rezen.exceptions.TransactionSequenceError","title":"<code>TransactionSequenceError(message, required_steps=None)</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Raised when transaction builder operations are called in wrong sequence.</p> <p>Initialize transaction sequence error.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Error message</p> required <code>required_steps</code> <code>Optional[List[str]]</code> <p>List of required steps in order</p> <code>None</code>"},{"location":"reference/exceptions/#rezen.exceptions.ValidationError","title":"<code>ValidationError(message, status_code=None, response_data=None)</code>","text":"<p>               Bases: <code>RezenError</code></p> <p>Raised when request validation fails.</p>"},{"location":"reference/exceptions/#error-handling-patterns","title":"Error Handling Patterns","text":""},{"location":"reference/exceptions/#comprehensive-error-handler","title":"Comprehensive Error Handler","text":"\ud83d\udee1\ufe0f Production Ready\ud83d\udcdd Usage Example <pre><code>import logging\nimport time\nfrom typing import Optional, Dict, Any, Callable, List\n\nfrom rezen import RezenClient\nfrom rezen.exceptions import (\n    RezenError, AuthenticationError, ValidationError,\n    NotFoundError, RateLimitError, NetworkError, ServerError\n)\n\nclass RezenAPIHandler:\n    \"\"\"Production-ready ReZEN API handler with comprehensive error handling.\"\"\"\n\n    def __init__(self, api_key: Optional[str] = None) -&gt; None:\n        \"\"\"Initialize the API handler.\n\n        Args:\n            api_key: Optional API key for authentication\n        \"\"\"\n        self.client: RezenClient = RezenClient(api_key=api_key)\n        self.logger: logging.Logger = logging.getLogger(__name__)\n\n    def safe_api_call(self, operation: Callable[..., Any], *args: Any, **kwargs: Any) -&gt; Dict[str, Any]:\n        \"\"\"Execute API call with comprehensive error handling.\n\n        Args:\n            operation: Callable API operation to execute\n            *args: Positional arguments for the operation\n            **kwargs: Keyword arguments for the operation\n\n        Returns:\n            Dictionary containing success status and data or error information\n        \"\"\"\n        max_retries: int = 3\n        base_delay: int = 1\n\n        for attempt in range(max_retries):\n            try:\n                result: Any = operation(*args, **kwargs)\n                return {\"success\": True, \"data\": result}\n\n            except AuthenticationError as e:\n                self.logger.error(\"Authentication failed\", exc_info=True)\n                return {\n                    \"success\": False,\n                    \"error_type\": \"authentication\",\n                    \"message\": \"Invalid credentials. Please check your API key.\",\n                    \"retry\": False\n                }\n\n            except ValidationError as e:\n                self.logger.warning(f\"Validation error: {e.invalid_fields}\")\n                return {\n                    \"success\": False,\n                    \"error_type\": \"validation\",\n                    \"message\": str(e),\n                    \"invalid_fields\": e.invalid_fields,\n                    \"retry\": False\n                }\n\n            except NotFoundError as e:\n                return {\n                    \"success\": False,\n                    \"error_type\": \"not_found\",\n                    \"message\": f\"{e.resource_type} not found\",\n                    \"retry\": False\n                }\n\n            except RateLimitError as e:\n                if attempt &lt; max_retries - 1:\n                    wait_time: int = e.retry_after or (base_delay * (2 ** attempt))\n                    self.logger.info(f\"Rate limited. Waiting {wait_time}s...\")\n                    time.sleep(wait_time)\n                    continue\n\n                return {\n                    \"success\": False,\n                    \"error_type\": \"rate_limit\",\n                    \"message\": \"Rate limit exceeded. Please try again later.\",\n                    \"retry_after\": e.retry_after\n                }\n\n            except (NetworkError, ServerError) as e:\n                if attempt &lt; max_retries - 1:\n                    delay: int = base_delay * (2 ** attempt)\n                    self.logger.warning(f\"Network/Server error. Retrying in {delay}s...\")\n                    time.sleep(delay)\n                    continue\n\n                return {\n                    \"success\": False,\n                    \"error_type\": \"network\" if isinstance(e, NetworkError) else \"server\",\n                    \"message\": \"Service temporarily unavailable. Please try again later.\",\n                    \"retry\": True\n                }\n\n            except RezenError as e:\n                self.logger.error(f\"Unexpected ReZEN error: {e}\", exc_info=True)\n                return {\n                    \"success\": False,\n                    \"error_type\": \"api_error\",\n                    \"message\": \"An unexpected error occurred. Please contact support.\",\n                    \"retry\": False\n                }\n\n            except Exception as e:\n                self.logger.error(f\"Unexpected error: {e}\", exc_info=True)\n                return {\n                    \"success\": False,\n                    \"error_type\": \"unknown\",\n                    \"message\": \"An unexpected error occurred.\",\n                    \"retry\": False\n                }\n\n        return {\n            \"success\": False,\n            \"error_type\": \"max_retries\",\n            \"message\": \"Maximum retry attempts exceeded.\",\n            \"retry\": False\n        }\n</code></pre> <pre><code>from typing import List, Dict, Any\n\n# Usage of the comprehensive error handler\nhandler: RezenAPIHandler = RezenAPIHandler()\n\n# Safe team search\nresult: Dict[str, Any] = handler.safe_api_call(\n    handler.client.teams.search_teams,\n    status=\"ACTIVE\",\n    page_size=10\n)\n\nif result[\"success\"]:\n    teams: List[Dict[str, Any]] = result[\"data\"]\n    print(f\"Found {len(teams)} teams\")\nelse:\n    print(f\"Error: {result['message']}\")\n    if result.get(\"retry\"):\n        print(\"This error may be temporary. Consider retrying.\")\n</code></pre>"},{"location":"reference/exceptions/#context-managers-for-error-handling","title":"Context Managers for Error Handling","text":"\ud83d\udccb Context Manager <pre><code>import logging\nfrom contextlib import contextmanager\nfrom typing import Generator\n\nfrom rezen.exceptions import RezenError\n\n@contextmanager\ndef rezen_error_context(operation_name: str) -&gt; Generator[None, None, None]:\n    \"\"\"Context manager for ReZEN API operations with logging.\n\n    Args:\n        operation_name: Name of the operation for logging\n\n    Yields:\n        None\n\n    Raises:\n        RezenError: If API operation fails\n        Exception: For unexpected errors\n    \"\"\"\n    logger: logging.Logger = logging.getLogger(__name__)\n    logger.info(f\"Starting {operation_name}\")\n\n    try:\n        yield\n        logger.info(f\"Completed {operation_name}\")\n    except RezenError as e:\n        logger.error(f\"Failed {operation_name}: {e}\")\n        raise\n    except Exception as e:\n        logger.error(f\"Unexpected error in {operation_name}: {e}\")\n        raise\n\n# Usage\nfrom typing import List, Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\nwith rezen_error_context(\"team search\"):\n    teams: List[Dict[str, Any]] = client.teams.search_teams(status=\"ACTIVE\")\n</code></pre>"},{"location":"reference/exceptions/#debugging-and-troubleshooting","title":"Debugging and Troubleshooting","text":""},{"location":"reference/exceptions/#logging-configuration","title":"Logging Configuration","text":"<p>Production Logging Setup</p> <pre><code>import logging\n\nfrom rezen import RezenClient\n\n# Configure logging for ReZEN operations\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('rezen_api.log'),\n        logging.StreamHandler()\n    ]\n)\n\n# Set ReZEN client to debug mode\nclient: RezenClient = RezenClient(debug=True)\n</code></pre>"},{"location":"reference/exceptions/#error-analysis-tools","title":"Error Analysis Tools","text":"\ud83d\udc1b Debug Information\ud83d\udcc8 Error Monitoring <pre><code>from rezen.exceptions import RezenError\n\ndef analyze_error(error: RezenError) -&gt; None:\n    \"\"\"Analyze ReZEN error for debugging.\n\n    Args:\n        error: ReZEN error to analyze\n    \"\"\"\n    print(\"=== Error Analysis ===\")\n    print(f\"Error Type: {type(error).__name__}\")\n    print(f\"Message: {error.message}\")\n    print(f\"Status Code: {getattr(error, 'status_code', 'N/A')}\")\n\n    if hasattr(error, 'response') and error.response:\n        print(f\"Request URL: {error.response.request.url}\")\n        print(f\"Request Method: {error.response.request.method}\")\n        print(f\"Response Headers: {dict(error.response.headers)}\")\n\n    if hasattr(error, 'details') and error.details:\n        print(f\"Error Details: {error.details}\")\n\n# Usage\nfrom typing import List, Dict, Any\n\nfrom rezen import RezenClient\n\nclient: RezenClient = RezenClient()\n\ntry:\n    teams: List[Dict[str, Any]] = client.teams.search_teams()\nexcept RezenError as e:\n    analyze_error(e)\n</code></pre> <pre><code>import time\nfrom collections import defaultdict\nfrom typing import Dict, List, Any, DefaultDict\n\nfrom rezen.exceptions import RezenError\n\nclass ErrorMonitor:\n    \"\"\"Monitor and track API errors for analysis.\"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the error monitor.\"\"\"\n        self.error_counts: DefaultDict[str, int] = defaultdict(int)\n        self.error_history: List[Dict[str, Any]] = []\n\n    def record_error(self, error: RezenError) -&gt; None:\n        \"\"\"Record error occurrence.\n\n        Args:\n            error: ReZEN error to record\n        \"\"\"\n        error_type: str = type(error).__name__\n        self.error_counts[error_type] += 1\n        self.error_history.append({\n            \"timestamp\": time.time(),\n            \"error_type\": error_type,\n            \"message\": str(error),\n            \"status_code\": getattr(error, 'status_code', None)\n        })\n\n    def get_error_summary(self) -&gt; Dict[str, Any]:\n        \"\"\"Get summary of recorded errors.\n\n        Returns:\n            Dictionary containing error summary information\n        \"\"\"\n        return {\n            \"total_errors\": len(self.error_history),\n            \"error_counts\": dict(self.error_counts),\n            \"recent_errors\": self.error_history[-10:]  # Last 10 errors\n        }\n\n# Usage\nfrom rezen import RezenClient\n\nmonitor: ErrorMonitor = ErrorMonitor()\nclient: RezenClient = RezenClient()\n\ntry:\n    teams: List[Dict[str, Any]] = client.teams.search_teams()\nexcept RezenError as e:\n    monitor.record_error(e)\n    summary: Dict[str, Any] = monitor.get_error_summary()\n    print(summary)\n</code></pre>"},{"location":"reference/exceptions/#best-practices","title":"Best Practices","text":""},{"location":"reference/exceptions/#error-prevention","title":"\ud83d\udee1\ufe0f Error Prevention","text":"<p>Proactive Error Prevention</p> <ul> <li>Validate Input: Check data before making API calls</li> <li>Handle Rate Limits: Implement proper rate limiting in your application</li> <li>Use Timeouts: Set appropriate timeouts for API calls</li> <li>Monitor Errors: Track error patterns for proactive fixes</li> </ul>"},{"location":"reference/exceptions/#retry-strategies","title":"\ud83d\udd04 Retry Strategies","text":"<p>Exponential Backoff Implementation</p> <pre><code>import random\nimport time\nfrom rezen.exceptions import RateLimitError, NetworkError, ServerError\n\ndef exponential_backoff_retry(func, max_retries=3, base_delay=1):\n    \"\"\"Retry function with exponential backoff and jitter.\"\"\"\n\n    for attempt in range(max_retries):\n        try:\n            return func()\n        except (RateLimitError, NetworkError, ServerError) as e:\n            if attempt == max_retries - 1:\n                raise  # Last attempt, re-raise the error\n\n            # Calculate delay with exponential backoff and jitter\n            delay = base_delay * (2 ** attempt)\n            jitter = random.uniform(0, delay * 0.1)  # 10% jitter\n            total_delay = delay + jitter\n\n            print(f\"Attempt {attempt + 1} failed. Retrying in {total_delay:.2f}s...\")\n            time.sleep(total_delay)\n</code></pre>"},{"location":"reference/exceptions/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":"<p>Security Best Practices</p> <ul> <li>Never log API keys in error messages or logs</li> <li>Sanitize error messages before showing to users</li> <li>Implement rate limiting to prevent abuse</li> <li>Monitor authentication failures for security threats</li> </ul>"},{"location":"reference/exceptions/#quick-reference","title":"Quick Reference","text":""},{"location":"reference/exceptions/#exception-type-mapping","title":"Exception Type Mapping","text":"Exception HTTP Status When It Occurs Retry? <code>AuthenticationError</code> 401, 403 Invalid API key, insufficient permissions No <code>ValidationError</code> 400 Invalid input parameters No <code>NotFoundError</code> 404 Resource doesn't exist No <code>RateLimitError</code> 429 Rate limit exceeded Yes (with delay) <code>NetworkError</code> - Connection issues, timeouts Yes <code>ServerError</code> 500-599 Server-side errors Yes <code>ClientError</code> 400-499 Client-side errors (except above) No"},{"location":"reference/exceptions/#common-error-codes","title":"Common Error Codes","text":"Status Code Exception Description 400 <code>ValidationError</code> Bad request, invalid parameters 401 <code>AuthenticationError</code> Unauthorized, invalid API key 403 <code>AuthenticationError</code> Forbidden, insufficient permissions 404 <code>NotFoundError</code> Resource not found 429 <code>RateLimitError</code> Too many requests 500 <code>ServerError</code> Internal server error 502 <code>ServerError</code> Bad gateway 503 <code>ServerError</code> Service unavailable"},{"location":"reference/exceptions/#next-steps","title":"Next Steps","text":"<ul> <li> <p>\ud83d\udd27 Transaction Builder</p> <p>Learn about transaction creation with proper error handling</p> </li> <li> <p>\ud83d\udcdd Data Types</p> <p>Understand data validation and type safety</p> </li> <li> <p>\ud83d\udcc4 Examples</p> <p>See error handling in practical examples</p> </li> <li> <p>\ud83d\udcd6 API Reference</p> <p>Return to the main API reference</p> </li> </ul>"}]}